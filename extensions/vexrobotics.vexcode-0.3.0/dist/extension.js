var bs=Object.create;var Ft=Object.defineProperty;var ws=Object.getOwnPropertyDescriptor;var Ps=Object.getOwnPropertyNames;var Cs=Object.getPrototypeOf,_s=Object.prototype.hasOwnProperty;var Us=(f,e)=>{for(var t in e)Ft(f,t,{get:e[t],enumerable:!0})},Lo=(f,e,t,o)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of Ps(e))!_s.call(f,s)&&s!==t&&Ft(f,s,{get:()=>e[s],enumerable:!(o=ws(e,s))||o.enumerable});return f};var O=(f,e,t)=>(t=f!=null?bs(Cs(f)):{},Lo(e||!f||!f.__esModule?Ft(t,"default",{value:f,enumerable:!0}):t,f)),ys=f=>Lo(Ft({},"__esModule",{value:!0}),f);var oi={};Us(oi,{activate:()=>ei,deactivate:()=>ti});module.exports=ys(oi);var us=O(require("vscode"));var ft=O(require("vscode"));var po=O(require("vscode"));var Fe=O(require("fs")),bt=O(require("child_process")),Ae=O(require("path")),lo=O(require("os")),Ds="1.0.4",h=class{constructor(e,t,o){this._exeName=Ae.basename(e),this._exePath=e,this._exeParentPath=Ae.dirname(e),this._devPath=t||"",this._queOptions=o||{active:!0,maxCmds:0},this._checkFilePermissions()}vmDownload(e){let t="";if(e){t=`--progress --python="${e}" ${this._devPath}`;let o=this.checkFile(e,t,h.CommandID.downloadPythonVM);if(o.exitCode!==h.ExitCode.vexSucess)return o}else t="--progress --python";return this._runVexcomCMD(t,h.CommandID.downloadPythonVM)}recoverFromDFU(e){let t="";return t=`--json --dfu=${e.toLowerCase()}`,this._runVexcomCMD(t,h.CommandID.recoverDFU)}sytemUpdate(e,t=!1){let o="";t?o=`--quiet --progress --json --vexos-full --vexos "${e}" ${this._devPath}`:o=`--quiet --progress --json --vexos "${e}" ${this._devPath}`;let s=this.checkFile(e,o,h.CommandID.systemUpdate);return s.exitCode!==h.ExitCode.vexSucess?new Promise(a=>a(s)):this._runVexcomCMD(o,h.CommandID.systemUpdate)}systemInfo(){let e=`--json ${this._devPath}`;return this._runVexcomCMD(e,h.CommandID.systemInfo)}controllerRadioFirmwareUpdate(e,t=!1){let o="";t?o=`--progress --json --ctrl-fw "${e}" ${this._devPath}`:o=`--progress --json --ctrl-fw "${e}" ${this._devPath}`;let s=this.checkFile(e,o,h.CommandID.controllerRadioUpdate);return s.exitCode!==h.ExitCode.vexSucess?new Promise(a=>a(s)):this._runVexcomCMD(o,h.CommandID.controllerRadioUpdate)}controllerAtmelFirmwareUpdate(e){let t="";t=`--progress --json --atmel-fw "${e}" ${this._devPath}`;let o=this.checkFile(e,t,h.CommandID.controllerUsbUpdate);return o.exitCode!==h.ExitCode.vexSucess?new Promise(s=>s(o)):this._runVexcomCMD(t,h.CommandID.controllerUsbUpdate)}systemStatus(){let e=`--status ${this._devPath}`;return this._runVexcomCMD(e,h.CommandID.systemStatus)}downloadUserProgram(e,t,o,s=h.SLOT.slot1,a=!1,r=!1,n=h.DownloadChannel.vexNoChannel){let c="";a?c=` --name "${e}" --slot ${s} --write "${o}" --progress --json --run`:c=` --name "${e}" --slot ${s} --write "${o}" --progress --json`,c+=` ${n}`,r&&(c+=" --progress"),t&&(c+=` --description ${Buffer.from(t,"binary").toString("base64")}`),c+=` ${this._devPath}`;let l=this.checkFile(o,c,h.CommandID.downloadUserProgram);return l.exitCode!==h.ExitCode.vexSucess?new Promise(d=>d(l)):this._runVexcomCMD(c,h.CommandID.downloadUserProgram)}eraseUserProgram(e){let t=`--erase "${e}" ${this._devPath}`;return this._runVexcomCMD(t,h.CommandID.erase)}downloadPythonVM(e){let t;if(e){t=`${this._devPath} --python="${e}" --json --progress`;let o=this.checkFile(e,t,h.CommandID.downloadPythonVM);if(o.exitCode!==h.ExitCode.vexSucess)return new Promise(s=>s(o))}else t=`${this._devPath} --python --json --progress`;return this._runVexcomCMD(t,h.CommandID.downloadPythonVM)}stop(){let e=`--stop ${this._devPath}`;return this._runVexcomCMD(e,h.CommandID.stop)}play(e=h.SLOT.slot1){let t=`--slot ${e} --run ${this._devPath}`;return this._runVexcomCMD(t,h.CommandID.play)}screenGrab(e){let t=`--screen "${e}" ${this._devPath}`;return this._runVexcomCMD(t,h.CommandID.screenGrab)}batteryMedic(){let e=`--medic ${this._devPath}`;return this._runVexcomCMD(e,h.CommandID.batteryMedic)}setRobotName(e){let t=`--robot "${e}" ${this._devPath}`;return this._runVexcomCMD(t,h.CommandID.setName)}setTeamNumber(e){let t=`--team "${e}" ${this._devPath}`;return this._runVexcomCMD(t,h.CommandID.setTeam)}openUserPort(e){let t=`--quiet --user ${e}`;return this._runVexcomUserCMD(t,h.CommandID.userPort)}listUSB(){let e="--usb";return this._runVexcomCMD(e,h.CommandID.listUSB)}custom(e){return this._runVexcomCMD(e,h.CommandID.custom)}getVersion(){let e="--version --json";return this._runVexcomCMD(e,h.CommandID.vexcomVersion)}apiVersion(){return Ds}static getErrorCodeDetails(e){return Bo.get(e)?Bo.get(e):`(${e}) Unknown Error Code`}checkFile(e,t,o){let s={cmdID:o,cmdStr:`${Ae.basename(this._exeParentPath)} ${t}`,stderr:"",stdout:"",exitCode:h.ExitCode.vexSucess};if(!Fe.existsSync(e))return s.exitCode=h.ExitCode.vexAPIErrorFilePath,s;let r=[];switch(o){case h.CommandID.downloadPythonVM:r=["bin"];break;case h.CommandID.downloadUserProgram:r=["bin","py"];break;case h.CommandID.systemUpdate:r=["vexos"];break;case h.CommandID.controllerRadioUpdate:case h.CommandID.controllerUsbUpdate:r=["vexos"];break;default:r=[];break}let n=Ae.basename(e).split("."),c=n[n.length-1];return r.includes(c)||(s.exitCode=h.ExitCode.vexAPIErrorFileExtension),s}_checkFilePermissions(){if(lo.type()==="Linux"){let e=Fe.statSync(this._exePath);(e.mode&4095)!==493&&(console.log("CHMOD",new TextDecoder().decode(bt.spawnSync(`chmod 755 ${this._exePath}`,{shell:!0}).stderr)),e=Fe.statSync(this._exePath),console.log("New File Permission",(e.mode&4095).toString(8)))}else if(lo.type()==="Darwin"){let e=Ae.dirname(this._exePath),t=Fe.readdirSync(e),o=[];o.push(this._exePath),o.forEach(s=>{let a=Fe.statSync(s);(a.mode&4095)!==493&&(console.log("CHMOD",new TextDecoder().decode(bt.spawnSync(`chmod 755 ${this._exePath}`,{shell:!0}).stderr)),a=Fe.statSync(this._exePath),console.log(`${Ae.basename(s)}: Updated File Permission`,(a.mode&4095).toString(8)))})}else{let e=Fe.statSync(this._exePath);(e.mode&4095)!==438&&(console.log("CHMOD",new TextDecoder().decode(bt.spawnSync(`chmod +x ${this._exePath}`,{shell:!0}).stderr)),e=Fe.statSync(this._exePath),console.log("New File Permission",(e.mode&4095).toString(8)))}}_splitArgString(e){let t=[];return e.split(/\s/).forEach(o=>{(o!==""||o!=="")&&t.push(o)}),t}_runVexcomCMD(e,t=h.CommandID.unknown){let o=this,s=this._exeParentPath;if(!Fe.existsSync(this._exeParentPath)){this._onErrorRecieved(t,Number(`${h.getErrorCodeDetails(h.ExitCode.vexAPIVexcomMissing)} ${s}`),o),this._onExitRecieved(t,h.ExitCode.vexAPIVexcomMissing,o);let r={cmdID:t,cmdStr:`${this._exeName} ${e}`,stderr:"",stdout:"",exitCode:h.ExitCode.vexAPIVexcomMissing};return new Promise(n=>{n(r)})}let a=(r,n)=>{let c=t,l=`${this._exeName} ${e}`,d,v="",V="",U=!1,P={};P.cwd=this._exeParentPath,P.PATH=this._exeParentPath+Ae.delimiter+process.env.PATH;let R={cwd:this._exeParentPath,shell:!0,env:P};o._vexcomCP=bt.spawn(this._exeName,this._splitArgString(e),R),o._vexcomCP.stdout.on("data",function(E){V+=E,o._onDataRecieved(c,E,o)}),o._vexcomCP.stderr.on("data",function(E){v+=new TextDecoder().decode(E),o._onErrorRecieved(c,E,o)}),o._vexcomCP.on("exit",function(E){c===h.CommandID.systemInfo&&console.log(`ON EXIT - exit code: ${E}
`),d=setTimeout(()=>{let H={cmdID:c,cmdStr:l,stderr:v,stdout:V,exitCode:h.ExitCode.vexCMDTimeoutNoCloseEventRecieved};r(H)},2e3)}),o._vexcomCP.on("close",function(E){clearTimeout(d),c===h.CommandID.systemInfo&&console.log(`ON Close - exit code: ${E}
`),o._onExitRecieved(c,E,o),r({cmdID:c,cmdStr:l,stderr:v,stdout:V,exitCode:E})})};return this._queOptions.active?Ge.enqueue(()=>new Promise((r,n)=>a(r,n)),t,e):new Promise((r,n)=>a(r,n))}_runVexcomUserCMD(e,t=h.CommandID.unknown){let o=this;o._vexcomUserCP=void 0;let s=this._exePath;if(!Fe.existsSync(this._exePath)){this._onErrorRecieved(t,Number(`${h.getErrorCodeDetails(h.ExitCode.vexAPIVexcomMissing)} ${s}`),o),this._onExitRecieved(t,h.ExitCode.vexAPIVexcomMissing,o);let n={cmdID:t,cmdStr:`${this._exeName} ${e}`,stderr:"",stdout:"",exitCode:h.ExitCode.vexAPIVexcomMissing};return[void 0,new Promise(c=>{c(n)})]}let a=(n,c,l)=>{let d={};d.cwd=this._exeParentPath,d.PATH=this._exeParentPath+Ae.delimiter+process.env.PATH;let v={cwd:this._exeParentPath,shell:!0,env:d},V=bt.spawn(this._exeName,this._splitArgString(e),v);n(V)},r=async(n,c,l,d)=>{let v=t,V=`${Ae.basename(l._exePath)} ${e}`,U="";l._vexcomUserCP=await d,l._vexcomUserCP.stdout.on("data",function(P){console.log(new TextDecoder().decode(P)),l._onUserDataRecieved(v,P,l)}),l._vexcomUserCP.stderr.on("data",function(P){console.log(U),U+=new TextDecoder().decode(P),l._onErrorRecieved(v,P,l)}),l._vexcomUserCP.on("exit",function(P){l._onExitRecieved(v,P,l),n({cmdID:v,cmdStr:V,stderr:U,stdout:"",exitCode:P})})};if(this._queOptions.active){let n,c=Ge.enqueueGeneric(()=>new Promise((d,v)=>a(d,v,o)),h.CommandID.userPortCPStart),l=Ge.enqueue(()=>new Promise((d,v)=>r(d,v,o,c)),t,e);return[c,l]}}on(e,t){switch(e){case"UserRX":this.onUserRxFuncHandle=t;break;case"Data":this.onDataFuncHandle=t;break;case"Error":this.onErrorFuncHandle=t;break;case"Exit":this.onExitFuncHandle=t;break}}_onUserDataRecieved(e,t,o){o?.onUserRxFuncHandle&&o.onUserRxFuncHandle(e,t)}_onDataRecieved(e,t,o){o?.onDataFuncHandle&&o?.onDataFuncHandle(e,t.toString())}_onErrorRecieved(e,t,o){o?.onErrorFuncHandle&&o.onErrorFuncHandle(e,new TextDecoder().decode(t))}_onExitRecieved(e,t,o){o?.onExitFuncHandle&&o.onExitFuncHandle(e,t)}get activeCommand(){let e={cmdID:h.CommandID.vexcom_doing_nothing,promiseFunc:()=>{},reject:void 0,resolve:void 0};return Ge.activeCmd?Ge.activeCmd:e}};(s=>{let f;(U=>(U[U.slot1=1]="slot1",U[U.slot2=2]="slot2",U[U.slot3=3]="slot3",U[U.slot4=4]="slot4",U[U.slot5=5]="slot5",U[U.slot6=6]="slot6",U[U.slot7=7]="slot7",U[U.slot8=8]="slot8"))(f=s.SLOT||(s.SLOT={}));let e;(z=>(z.vexcom_doing_nothing="Doing nothing",z.unknown="Unknown CMD",z.custom="Custom CMD",z.play="Play",z.stop="Stop",z.erase="Erase",z.downloadUserProgram="User Program Download",z.downloadPythonVM="Python VM Download",z.systemUpdate="Vexos Update",z.controllerUsbUpdate="Controller Usb Update",z.controllerRadioUpdate="Controller Radio Update",z.recoverDFU="Recover Brain in DFU Mode",z.batteryMedic="Battery Medic",z.setName="Set Robot Name",z.setTeam="Set Team Name",z.vexcomVersion="Vexcom Version",z.systemInfo="System Info",z.systemStatus="System Status",z.listUSB="List USB",z.screenGrab="Screen Grab",z.userPortCPStart="User Port - Start Child Process",z.userPort="User Port - Result"))(e=s.CommandID||(s.CommandID={}));let t;(M=>(M[M.vexCMDTimeoutNoCloseEventRecieved=-11]="vexCMDTimeoutNoCloseEventRecieved",M[M.vexCMDTimeout=-10]="vexCMDTimeout",M[M.vexCMDQueueSize=-9]="vexCMDQueueSize",M[M.vexCMDQueueDownloadActive=-8]="vexCMDQueueDownloadActive",M[M.vexAPIErrorOS=-7]="vexAPIErrorOS",M[M.vexAPIErrorFileExtension=-6]="vexAPIErrorFileExtension",M[M.vexAPIErrorFilePath=-5]="vexAPIErrorFilePath",M[M.vexAPIVexcomAlive=-4]="vexAPIVexcomAlive",M[M.vexAPIVexcomMissing=-3]="vexAPIVexcomMissing",M[M.vexcomPlaceHolder2=-2]="vexcomPlaceHolder2",M[M.vexcomPlaceHolder1=-1]="vexcomPlaceHolder1",M[M.vexSucess=0]="vexSucess",M[M.vexError=1]="vexError",M[M.vexErrorAlive=2]="vexErrorAlive",M[M.vexErrorVersion=3]="vexErrorVersion",M[M.vexErrorCmd=4]="vexErrorCmd",M[M.vexErrorDevice=5]="vexErrorDevice",M[M.vexErrorPort=6]="vexErrorPort",M[M.vexErrorParam=7]="vexErrorParam",M[M.vexErrorVEXOS=8]="vexErrorVEXOS"))(t=s.ExitCode||(s.ExitCode={}));let o;(c=>(c.vexNoChannel="",c.vexPitChannel="--chan 0 ",c.vexDownloadchannel="--chan 1 "))(o=s.DownloadChannel||(s.DownloadChannel={}))})(h||(h={}));var Bo=new Map([[-11,"Vexcom command timeout, No Stdio closed event recieved"],[-10,"Vexcom command timeout, Vexcom Command killed"],[-9,"Max command queue limit reach, Vexcom Command Dropped"],[-8,"Vexcom Download Command in progress, Vexcom Command Dropped"],[-7,"Vexcom is not supported on this OS"],[-6,"Passed file extension is not supported"],[-5,"Passed file does not exist at directory"],[-4,"Vexcom alive message timeout"],[-3,"Vexcom Utillity is missing"],[0,"VEX Success"],[1,"VEX Error"],[2,"VEX Alive Error"],[3,"VEX Version Error"],[4,"VEX Command Error"],[5,"VEX Device Error"],[6,"VEX Port Error"],[7,"VEX Parameter Error"],[8,"VEX VEXOS Error"]]),xe=class{static setOptions(e){xe.options=e}static enqueue(e,t,o){return xe.options.maxCmds&&this.queue.length>=this.options.maxCmds?new Promise(s=>s({cmdID:t,cmdStr:o,stderr:"",stdout:"",exitCode:-9})):xe?.activeCmd?.cmdID==="Vexos Update"||xe?.activeCmd?.cmdID==="User Program Download"||xe?.activeCmd?.cmdID==="Python VM Download"||xe?.activeCmd?.cmdID==="Controller Radio Update"||xe?.activeCmd?.cmdID==="Controller Usb Update"?new Promise(s=>s({cmdID:t,cmdStr:o,stderr:"",stdout:"",exitCode:-8})):new Promise((s,a)=>{xe.queue.push({promiseFunc:e,resolve:s,reject:a,cmdID:t}),xe.dequeue()})}static enqueueGeneric(e,t){return new Promise((o,s)=>{xe.queue.push({promiseFunc:e,resolve:o,reject:s,cmdID:t}),xe.dequeue()})}static dequeue(){if(xe.pendingPromise)return!1;let e=xe.queue.shift();if(xe.activeCmd=e,!e)return!1;try{xe.pendingPromise=!0,console.log(`Running Command: ${e.cmdID}`),e.promiseFunc(e.resolve,e.reject).then(t=>{console.log(`Finished Command: ${e.cmdID} ${JSON.stringify(t)}`),xe.pendingPromise=!1,e.resolve(t),xe.dequeue()}).catch(t=>{xe.pendingPromise=!1,e.reject(t),xe.dequeue()})}catch(t){xe.pendingPromise=!1,e.reject(t),xe.dequeue()}return!0}},Ge=xe;Ge.options={active:!1,maxCmds:0},Ge.queue=[],Ge.pendingPromise=!1,Ge.activeCmd={cmdID:"Doing nothing",promiseFunc:()=>{},reject:void 0,resolve:void 0};var ae=O(require("vscode")),He=O(require("os")),Xt=O(require("path")),At=O(require("fs")),Oo=O(require("unzipper"));var i;(r=>{r.DEBUG=!1;let e;(d=>(d.Brain="Brain",d.Controller="Controller",d.Unknown="unknown"))(e=r.Device||(r.Device={}));let t;(v=>(v.V5="V5",v.EXP="EXP",v.IQ2="IQ2",v.Unknown="unknown"))(t=r.Platform||(r.Platform={}));let o;(d=>(d.cpp="cpp",d.python="python",d.unknown="unknown"))(o=r.Language||(r.Language={}));let s;(y=>{y.name="vexcode",y.author="vexrobotics",y.id=`${y.author}.${y.name}`;function v(){return ae.extensions.all.filter(T=>T.id.includes(y.name))[0].packageJSON.version}y.version=v,y.vexcomVersion="";function U(J){let T;return He.type()==="Windows_NT"&&(T=ae.Uri.joinPath(J.extensionUri,"resources","tools","vexcom","win32","vexcom.exe")),He.type()==="Darwin"&&(T=ae.Uri.joinPath(J.extensionUri,"resources","tools","vexcom","osx","vexcom")),He.type()==="Linux"&&He.arch()==="x64"&&(T=ae.Uri.joinPath(J.extensionUri,"resources","tools","vexcom","linux-x64","vexcom")),He.type()==="Linux"&&He.arch()==="arm64"&&(T=ae.Uri.joinPath(J.extensionUri,"resources","tools","vexcom","linux-arm64","vexcom")),He.type()==="Linux"&&He.arch()==="arm"&&(T=ae.Uri.joinPath(J.extensionUri,"resources","tools","vexcom","linux-arm32","vexcom")),T}y.getVexcomUri=U;let P;(oe=>{oe.vexProjectSettingsFolderArrID=`${y.id}.vexProjectSettingsFolderArr`,oe.isValidProjectID=`${y.id}.isValidProjectID`,oe.debugEnabled=`${y.id}.debugEnabled`,oe.isDebugEnabled=!1;async function re(z){return ae.commands.executeCommand("setContext",oe.isValidProjectID,z)}oe.setIsValidProject=re;async function M(z){return oe.isDebugEnabled=z,ae.commands.executeCommand("setContext",oe.debugEnabled,z)}oe.setDebug=M})(P=y.Context||(y.Context={}));let R;(G=>{G.buildID=`${y.name}.project.build`,G.cleanID=`${y.name}.project.clean`,G.rebuildID=`${y.name}.project.rebuild`,G.newProjectID=`${y.name}.project.new`,G.importID=`${y.name}.project.import`,G.settingUIID=`${y.name}.project.settingsUI`,G.eraseID=`${y.name}.system.erase`,G.downloadID=`${y.name}.system.download`,G.systemInfoID=`${y.name}.system.info`,G.screenGrabID=`${y.name}.system.screen-grab`,G.brainNameID=`${y.name}.system.brain-name`,G.teamNumberID=`${y.name}.system.team-number`,G.batteryMedicID=`${y.name}.system.battery-medic`,G.systemUpdateVEXosID=`${y.name}.system.update.vexos`,G.systemUpdatePythonVmID=`${y.name}.system.update.pythonVM`,G.controllerUpdateFirmwareID=`${y.name}.system.update.controller`,G.dfuUpdateFirmwareID=`${y.name}.system.update.dfu`,G.vexCommandHelpID=`${y.name}.command-help`,G.vexCommandHelpShowAllID=`${y.name}.command-help.show-all`,G.downloadSDKID=`${y.name}.resourceManager.download.sdk`,G.downloadToolchainID=`${y.name}.resourceManager.download.toolchain`,G.clearLogTerminalID=`${y.name}.terminal.log.clear`,G.clearInterativeTerminalID=`${y.name}.terminal.interactive.clear`,G.createNewTerminalSetID=`${y.name}.terminal.newset`,G.systemRecoverID=`${y.name}.system.recover`,G.installDrivers=`${y.name}.drivers.install`,G.controllerUpdateFirmwareAtmelID=`${y.name}.system.update.controller.atmel`,G.controllerUpdateFirmwareRadioDEVID=`${y.name}.system.update.controller.radio`,G.controllerUpdateFirmwareDEVID=`${y.name}.system.update.controllerMenu`,G.brainUpdateFirmwareDEVID=`${y.name}.system.update.brainMenu`,G.webSocketSettings=`${y.name}.websocket.settings`;async function jt(){return ae.commands.executeCommand(G.buildID)}G.build=jt;async function Bt(){return ae.commands.executeCommand(G.cleanID)}G.clean=Bt;async function nt(){return ae.commands.executeCommand(G.rebuildID)}G.rebuild=nt;async function no(){return ae.commands.executeCommand(G.newProjectID)}G.newProject=no;async function gs(){return ae.commands.executeCommand(G.importID)}G.importProject=gs;async function vs(){return ae.commands.executeCommand(G.systemInfoID)}G.systemInfo=vs;async function Vo(){return ae.commands.executeCommand(G.screenGrabID)}G.screenGrab=Vo;async function ro(){return ae.commands.executeCommand(G.brainNameID)}G.setBrainName=ro;async function To(){return ae.commands.executeCommand(G.teamNumberID)}G.setTeamNumber=To;async function No(){return ae.commands.executeCommand(G.batteryMedicID)}G.batteryMedic=No;async function $o(){return ae.commands.executeCommand(G.systemUpdateVEXosID)}G.systemUpdateVEXos=$o;async function ko(ao){return ae.commands.executeCommand(G.systemUpdatePythonVmID,ao)}G.systemUpdatePythonVM=ko;async function Ro(){return ae.commands.executeCommand(G.downloadID)}G.downloadUserProgram=Ro;async function Mo(){return ae.commands.executeCommand(G.vexCommandHelpID)}G.vexCommandHelp=Mo;async function Vt(){return ae.commands.executeCommand(G.vexCommandHelpShowAllID)}G.vexCommandHelpShowAll=Vt})(R=y.Command||(y.Command={}));let E;(X=>{X.enableUserTerminalID=`${y.name}.General.EnableUserTerminal`,X.buildTypeID=`${y.name}.Project.BuildType`,X.runAfterDownload=`${y.name}.Project.RunAfterDownload`,X.controllerChannel=`${y.name}.Controller.Channel`,X.projectHomeID=`${y.name}.Project.Home`,X.toolchainCPPPathID=`${y.name}.Cpp.Toolchain.Path`,X.sdkCPPHomeID=`${y.name}.Cpp.Sdk.Home`,X.sdkPythonHomeID=`${y.name}.Python.Sdk.Home`,X.pylanceStubPathID="python.analysis.stubPath",X.pylanceDiagnosticModePathID="python.analysis.diagnosticMode",X.pylanceCheckingModeID="python.analysis.typeCheckingMode",X.hostNameID=`${y.name}.WebsocketServer.HostAddress`,X.portID=`${y.name}.WebsocketServer.Port`,X.enableWebsocketServerID=`${y.name}.WebsocketServer.Enable`;function ye(de){let he=[];return de.affectsConfiguration(X.enableUserTerminalID)&&he.push(X.enableUserTerminalID),de.affectsConfiguration(X.buildTypeID)&&he.push(X.buildTypeID),de.affectsConfiguration(X.runAfterDownload)&&he.push(X.runAfterDownload),de.affectsConfiguration(X.controllerChannel)&&he.push(X.controllerChannel),de.affectsConfiguration(X.projectHomeID)&&he.push(X.projectHomeID),de.affectsConfiguration(X.toolchainCPPPathID)&&he.push(X.toolchainCPPPathID),de.affectsConfiguration(X.sdkCPPHomeID)&&he.push(X.sdkCPPHomeID),de.affectsConfiguration(X.sdkPythonHomeID)&&he.push(X.sdkPythonHomeID),de.affectsConfiguration(X.pylanceStubPathID)&&he.push(X.pylanceStubPathID),de.affectsConfiguration(X.pylanceDiagnosticModePathID)&&he.push(X.pylanceDiagnosticModePathID),de.affectsConfiguration(X.pylanceCheckingModeID)&&he.push(X.pylanceCheckingModeID),de.affectsConfiguration(X.hostNameID)&&he.push(X.hostNameID),de.affectsConfiguration(X.portID)&&he.push(X.portID),de.affectsConfiguration(X.enableWebsocketServerID)&&he.push(X.enableWebsocketServerID),he}X.getChangeSettingsList=ye})(E=y.Settings||(y.Settings={}));let H;(ye=>{ye.getSDKVersionID=`${y.name}.sdk.version`,ye.downloadSDKID=`${y.name}.sdk.download`,ye.downloadToolchainID=`${y.name}.toolchain.download`,ye.getVexosVersionID=`${y.name}.vexos.version`,ye.downloadVexosID=`${y.name}.vexos.download`,ye.getVexosManifestID=`${y.name}.vexos.manifest`,ye.downloadDriverInstallerID=`${y.name}.driver-installer`;async function z(X,de,he){return console.log("Send Command SDK Version",he),ae.commands.executeCommand(ye.getSDKVersionID,X,de,he)}ye.getSDKVersion=z;async function we(X,de,he,Lt){return ae.commands.executeCommand(ye.downloadSDKID,X,de,he,Lt)}ye.downloadSDK=we;async function ne(X){return ae.commands.executeCommand(ye.downloadToolchainID,X)}ye.downloadToolchain=ne;async function le(X,de){return ae.commands.executeCommand(ye.getVexosVersionID,X,de)}ye.getVEXosVersions=le;async function se(X,de){return ae.commands.executeCommand(ye.downloadVexosID,X,de)}ye.downloadLatestVEXos=se;async function Ue(X,de){return ae.commands.executeCommand(ye.getVexosManifestID,X,de)}ye.getLatestVEXosManifest=Ue;async function _t(X,de){return ae.commands.executeCommand(ye.downloadDriverInstallerID,X,de)}ye.downloadDriverInstaller=_t})(H=y.ResourceManager||(y.ResourceManager={}));let k;(ne=>{ne.v5BrainID=`vex-${"V5"}-${"Brain"}`,ne.expBrainID=`vex-${"EXP"}-${"Brain"}`,ne.iq2BrainID=`vex-${"IQ2"}-${"Brain"}`,ne.v5ControllerID=`vex-${"V5"}-${"Controller"}`,ne.expControllerID=`vex-${"EXP"}-${"Controller"}`,ne.iq2ControllerID=`vex-${"IQ2"}-${"Controller"}`,ne.fillerIcon="question";function z(le,se){return le==="V5"&&se==="Brain"?ne.v5BrainID:le==="EXP"&&se==="Brain"?ne.expBrainID:le==="IQ2"&&se==="Brain"?ne.iq2BrainID:le==="V5"&&se==="Controller"?ne.v5ControllerID:le==="EXP"&&se==="Controller"?ne.expControllerID:le==="IQ2"&&se==="Controller"?ne.iq2ControllerID:ne.fillerIcon}ne.getIconStr=z;function we(le){return`$(${le})`}ne.wrapID=we})(k=y.Icons||(y.Icons={}))})(s=r.Extension||(r.Extension={}));let a;(P=>{function n(){return new Date().toLocaleString()}P.getDateString=n;async function c(R){return()=>R}P.toPromise=c;function l(){let R=new TextDecoder,E;return He.type()==="Windows_NT"?E=R.decode(new Uint8Array([13,10]).buffer):He.type()==="Darwin"?E=R.decode(new Uint8Array([13]).buffer):E=R.decode(new Uint8Array([13]).buffer),E}P.getEndline=l;async function d(R){return R<0&&(R=0),new Promise(E=>setTimeout(E,R))}P.asyncSleep=d;async function v(R,E){if(!At.existsSync(R.fsPath))throw new Error(`Unzip Fail: File does not exist @ ${R.fsPath}`);let H=E?E.fsPath:Xt.dirname(R.fsPath);console.log(`File Uri Basename: ${Xt.dirname(R.fsPath)}`),console.log(`PathToUnzip: ${Xt.dirname(H)}`);let k=!1,y=!1;for(At.createReadStream(`${R.fsPath}`).pipe(Oo.Extract({path:`${H}`})).on("close",()=>{console.log("Unzipper Close"),k=!0}).on("error",()=>{throw k=!0,y=!0,console.log(new Error("Unzipper Close")),new Error("Unzip Fail: Read Stream Error")});!k||y;)await new Promise(T=>setTimeout(T,500));return y}P.unzipFile=v;function V(R,E){return{command:R?.cmdID?R.cmdID:h.CommandID.unknown,details:`${h.getErrorCodeDetails(R.exitCode)} ${R.stderr} | ${R.cmdStr}`,statusCode:R.exitCode,json:E||"{}"}}P._toCommandResponse=V;let U;(J=>{function R(T){let ee=parseInt(T),ie=ee>>>24&255,re=ee>>>16&255,M=ee>>>8&255,oe=ee&255;return`${ie}.${re}.${M}.${oe}`}J.toVersion=R;function E(T){let ee=0,ie=0,re=0,M=-1,oe="";return T.forEach(function(z){let we=0,ne=0,le=0,se=-1,Ue=z.split("_");if(we=parseInt(Ue[2]),ne=parseInt(Ue[3]),le=parseInt(Ue[4]),se=parseInt(Ue[5]),!(we<ee)&&(we>ee&&(ie=0,re=0,M=-1),!(ne<ie)&&(ne>ie&&(re=0,M=-1),!(le<re)))){if(le>re&&(M=0),M>se)if(se===0)M=se;else return;else if(M<se){if(M===0)return;M=se}ee=we,ie=ne,re=le,M=se,oe=z}}),oe}J.getLatestVEXosVersion=E;function H(T){let ee=0,ie=0,re=0,M=0,oe="";return T.forEach(function(z){let we=0,ne=0,le=0,se=-1,Ue=z.split(".");if(we=parseInt(Ue[0]),ne=parseInt(Ue[1]),le=parseInt(Ue[2]),se=parseInt(Ue[3]),!(we<ee)&&(we>ee&&(ie=0,re=0,M=-1),!(ne<ie)&&(ne>ie&&(re=0,M=-1),!(le<re)&&(le>re&&(M=-1),!(se<M))))){if(M>se)if(se===0)M=se;else return;else if(M<se){if(M===0)return;M=se}ee=we,ie=ne,re=le,M=se,oe=z}}),oe}J.getLatestFileVersion=H;function k(T){let ee=T.split("_");return ee.shift(),ee.shift(),ee.join(".")}J.fileNameToVersion=k;function y(T,ee){let ie=T.split(".");return ie.unshift(ee),ie.unshift("VEXOS"),ie.join("_")}J.versionToFileName=y})(U=P.vexos||(P.vexos={}))})(a=r.Utils||(r.Utils={}))})(i||(i={}));var Fo=O(require("vscode"));var x=class{constructor(){this._vexcomDataHolder="";this._dataResultArr=[]}static _toCommandResponse(e,t){return{command:e?.cmdID?e.cmdID:h.CommandID.unknown,details:`${h.getErrorCodeDetails(e.exitCode)} ${e.stderr} | ${e.cmdStr}`,statusCode:e.exitCode,json:t||"{}"}}_onVexcomDataRecieved(e,t,o){switch(t){case h.CommandID.systemStatus:case h.CommandID.systemInfo:e._vexcomDataHolder+=o;break;case h.CommandID.controllerRadioUpdate:case h.CommandID.controllerUsbUpdate:case h.CommandID.downloadUserProgram:case h.CommandID.downloadPythonVM:case h.CommandID.systemUpdate:let s;try{s=JSON.parse(o)?JSON.parse(o):""}catch{return}let a=s.percent-this._lastProgress;this._lastProgress=s.percent,this._progress?.report({increment:a,message:`${s.action.toUpperCase()}:${s.phase.toUpperCase()} ${s.percent}%`});break}}_onVexcomErrorRecieved(e,t,o){}_onVexcomExitRecieved(e,t,o){switch(t){case h.CommandID.systemStatus:case h.CommandID.systemInfo:e._dataResultArr.push(e._vexcomDataHolder),e._vexcomDataHolder="";break}}async _handleProgress(e,t){let o,s=async(a,r)=>(a?.report({increment:0,message:"preparing . . . "}),await e());{let a=Fo.window.withProgress(t,async(r,n)=>{this._progress||(this._lastProgress=0,this._progress=r,o=s(r,n),await o,this._progress=void 0)})}return o}isTypeOf(e){let t=x;return e instanceof x}get platform(){return this._platform}get device(){return this._device}get bootMode(){return this._bootMode}static async listDevices(e){let t=i.Extension.getVexcomUri(i.Extension.context),o=new h(t.fsPath,e,{active:!1,maxCmds:0}),s="";o.on("Data",(r,n)=>{s+=n});let a=await o.listUSB();return x._toCommandResponse(a,s)}};(e=>{let f;(n=>(n.unknown="unknown",n.dfu="dfu",n.ram="ram",n.rom="rom",n.app="app"))(f=e.BootMode||(e.BootMode={}))})(x||(x={}));var Ut=class{constructor(e){this._devicePath=e}};var Xo=require("serialport"),Ht=class extends Ut{constructor(t){super(t);t&&(this._serialPort=new Xo.SerialPort({path:t,baudRate:115200,parity:"none",stopBits:1,xoff:!0,xon:!0,autoOpen:!1}))}get serialPort(){return this?._serialPort}get isOpen(){return this?._serialPort?.isOpen}write(t){this?._serialPort?.write(t,"utf8")}read(t){this?._serialPort.read(t)}close(t){t?this?._serialPort.close(o=>t(o)):this?._serialPort.close()}open(t){t?this?._serialPort.open(o=>t(o)):this?._serialPort.open()}registerCallback(t,o){switch(t){case"OnRecieveData":this?._serialPort?.removeAllListeners("data"),this?._serialPort?.on("data",o);case"OnOpen":this?._serialPort?.on("open",o)}}};var zt=class extends Ut{constructor(t,o){super(t);let s=i.Extension.getVexcomUri(i.Extension.context);this._vexcom=new h(s.fsPath,this._devicePath,{active:!0,maxCmds:0})}get childProcess(){return this?._vexcomCP}get isOpen(){return this._vexcomCP?!this._vexcomCP?.exitCode:!1}async open(t){if(this.isOpen)return;let o=this._vexcom.openUserPort(this._devicePath);return this._vexcomCP=await o[0],console.log(JSON.stringify(o[0])),t&&t(void 0),i.Utils._toCommandResponse(await o[1])}write(t){this?._vexcomCP?.stdin?.write(t,"utf8")}read(t){}close(t){this._vexcomCP&&(this?._vexcomCP.stdin.write(new Uint8Array([3])),t&&t(void 0)),this._vexcomCP=void 0}registerCallback(t,o){switch(t){case"OnRecieveData":this?._vexcom?.on("UserRX",(s,a)=>o(a));case"OnOpen":}}};var A=class extends x{constructor(t,o=!1,s){super();this._needsVexosUpdate=!1;this._vexcomDataHolder="",this._dataResultArr=[],this._platform=t.platform,this._device=t.device,this._robotName=t.robotName,this._communicationPath=t.communication,this._userPath=t.user,this._id=t.id,this._teamNumber=t.teamNumber,this._systemInfoJSON=t.json,this.parseSystemInfoJSON(this._systemInfoJSON),!this._userPath&&this._platform===i.Platform.V5&&this._device===i.Device.Controller?this._userPort=new zt(this._communicationPath):this._userPort=new Ht(this._userPath);let a=i.Extension.getVexcomUri(i.Extension.context);this._vexcom=new h(a.fsPath,this._communicationPath,{active:!0,maxCmds:0}),this._vexcom.on("Data",(r,n)=>{this._onVexcomDataRecieved(this,r,n)}),this._vexcom.on("Error",(r,n)=>{this._onVexcomErrorRecieved(this,r,n)}),this._vexcom.on("Exit",(r,n)=>{this._onVexcomExitRecieved(this,r,n)})}async play(t){let o=await this._vexcom.play(t);return x._toCommandResponse(o)}async stop(){let t=await this._vexcom.stop();return x._toCommandResponse(t)}async erase(t){let o=await this._vexcom.eraseUserProgram(t);return x._toCommandResponse(o)}async downloadPythonVM(t){let o={location:po.ProgressLocation.Notification,title:"Python VM Update: ",cancellable:!1},s=await this._handleProgress(()=>this._vexcom.downloadPythonVM(t?.fsPath),o);return x._toCommandResponse(s)}async systemInfo(){let t=await this._vexcom.systemInfo(),o=x._toCommandResponse(t,this._dataResultArr.shift());return o.statusCode!==h.ExitCode.vexCMDQueueDownloadActive&&(this._systemInfoJSON=o.json,this.parseSystemInfoJSON(this._systemInfoJSON)),o}static async systemInfo(t){let o=i.Extension.getVexcomUri(i.Extension.context),a=await new h(o.fsPath,t,{active:!1,maxCmds:0}).systemInfo();return x._toCommandResponse(a,a.stdout)}static async listDevices(t){let o=i.Extension.getVexcomUri(i.Extension.context),s=new h(o.fsPath,t,{active:!1,maxCmds:0}),a="";s.on("Data",(n,c)=>{a+=c});let r=await s.listUSB();return x._toCommandResponse(r,a)}async systemStatus(){let t=await this._vexcom.systemStatus(),o=x._toCommandResponse(t,this._dataResultArr.shift());return this._systemInfoJSON=o.json,this.parseSystemInfoJSON(this._systemInfoJSON),o}static async getVexcomVersion(t){let o=i.Extension.getVexcomUri(i.Extension.context),s=new h(o.fsPath,"",{active:!0,maxCmds:0}),a="";s.on("Data",(n,c)=>{a+=c});let r=await s.getVersion();return x._toCommandResponse(r,a)}static async systemDFU(t,o){let s=i.Extension.getVexcomUri(i.Extension.context),a=new h(s.fsPath,"",{active:!1,maxCmds:0}),r={location:po.ProgressLocation.Notification,title:"Controller Usb Update: ",cancellable:!1},n=await a.recoverFromDFU(o.toString().toLowerCase());return x._toCommandResponse(n)}async setTeamName(t){let o=await this._vexcom.setTeamNumber(t);return o.exitCode===h.ExitCode.vexSucess&&(this._teamNumber=t),x._toCommandResponse(o)}async setRobotName(t){let o=await this._vexcom.setRobotName(t);return o.exitCode===h.ExitCode.vexSucess&&(this._robotName=t),x._toCommandResponse(o)}async screenGrab(t){let o=await this._vexcom.screenGrab(t.fsPath);return x._toCommandResponse(o)}async batteryMedic(){let t=await this._vexcom.batteryMedic();return x._toCommandResponse(t)}parseSystemInfoJSON(t){let o=JSON.parse(t),s;if(o.v5)s=o.v5;else if(o.iq2)s=o.iq2;else if(o.exp)s=o.exp;else if(o?.unknown?.controller_boot)s=o.unknown;else{this._systemInfoJSON="{}";return}this._filesInfo=o.files,this._systemInfo=s,s?.brain?.bootloader?(s?.brain?.bootloader===x.BootMode.ram||s?.brain?.bootloader===x.BootMode.rom?this._bootMode=s?.brain?.bootloader:this._bootMode=x.BootMode.unknown,this._robotName="",this._id="",this._teamNumber=""):s?.brain?(this._bootMode=x.BootMode.app,this._robotName=s.brain.name,this._id=s.brain.ssn,this._teamNumber=s.brain.team):s?.controller?(this._bootMode=x.BootMode.app,this._robotName="",this._id="",this._teamNumber=""):s?.controller_boot&&(this._bootMode=x.BootMode.rom,this._robotName="",this._id="",this._teamNumber="")}parseSystemStatusJSON(t){let o=JSON.parse(t),s;if(o.v5)s=o.v5;else if(o.iq2)s=o.iq2;else if(o.exp)s=o.exp;else{this._systemInfoJSON="{}";return}this._filesInfo=o.files,this._systemInfo=s,s?.system?.bootloader?(s?.brain?.bootloader===x.BootMode.ram||s?.brain?.bootloader===x.BootMode.rom?this._bootMode=s?.brain?.bootloader:this._bootMode=x.BootMode.unknown,this._robotName=`${this._bootMode}`,this._id="",this._teamNumber=""):s?.brain?(this._bootMode=x.BootMode.app,this._robotName=s.brain.name,this._id=s.brain.ssn,this._teamNumber=s.brain.team):s?.controller}get robotName(){return this._robotName}get id(){return this._id}get teamNumber(){return this._teamNumber}get bootMode(){return this._bootMode}get platform(){return this._platform}get device(){return this._device}get json(){return this._systemInfoJSON}get vexComSystemInfo(){return this._systemInfo}get vexcomFilesInfo(){return this._filesInfo}get activeCommand(){return this._vexcom.activeCommand.cmdID}get communication(){return this._communicationPath}get user(){return this._userPath}get userPort(){return this?._userPort}static isTypeOf(t){return t instanceof A}static toCommandResponse(t,o){return{command:t?.cmdID?t.cmdID:h.CommandID.unknown,details:`${h.getErrorCodeDetails(t.exitCode)} ${t.stderr} | ${t.cmdStr}`,statusCode:t.exitCode,json:o||"{}"}}};(e=>{let f;(s=>(s[s.V5ControllerNotSupported=-1]="V5ControllerNotSupported",s[s.SerialPortIOError=-2]="SerialPortIOError"))(f=e.Error||(e.Error={}))})(A||(A={}));var Ao=O(require("vscode"));var Ke=class extends A{constructor(e,t=!1,o){super(e,t,o)}async downloadUserProgram(e,t,o,s,a=!1){switch(this._device){case i.Device.Brain:if(this._bootMode!==x.BootMode.app)return{command:h.CommandID.downloadUserProgram,details:`${this._platform} ${this._device} running ${this._bootMode} bootloader`,json:"{}",statusCode:h.ExitCode.vexError};let r=await this._vexcom.downloadUserProgram(e,t,s.fsPath,o,a,!1);return x._toCommandResponse(r);case i.Device.Unknown:default:return{command:h.CommandID.downloadUserProgram,details:"Unknown Device Connected",json:"{}",statusCode:h.ExitCode.vexError}}}async systemUpdate(e,t=!1){let o={location:Ao.ProgressLocation.Notification,title:"Vexos Update: ",cancellable:!1},s=await this._handleProgress(()=>this._vexcom.sytemUpdate(e.fsPath,t),o);return x._toCommandResponse(s)}get needsVexosUpdate(){return this._needsVexosUpdate}set needsVexosUpdate(e){this._needsVexosUpdate=e}};var Ho=O(require("vscode"));var Xe=class extends A{constructor(t,o=!1,s){super(t,o,s);this._needsRadioUpdate=!1;this._needsUsbUpDate=!1}async downloadUserProgram(t,o,s,a,r=!1,n=h.DownloadChannel.vexNoChannel){switch(this._device){case i.Device.Controller:if(this._userPort.close(),!this._systemInfo?.controller?.flags){let V={command:h.CommandID.downloadUserProgram,details:`${this._platform} ${this._device} No Radio Status`,json:"{}",statusCode:h.ExitCode.vexError};return await super.systemInfo(),V}if((Number(this._systemInfo?.controller?.flags)&2)!==2&&this._systemInfo?.brain===void 0){let V={command:h.CommandID.downloadUserProgram,details:`${this._platform} ${this._device} Not Linked to brain`,json:"{}",statusCode:h.ExitCode.vexError};return await super.systemInfo(),V}let c={location:Ho.ProgressLocation.Notification,title:"Program Download: ",cancellable:!1},l=await super.systemInfo();if(l.statusCode!==h.ExitCode.vexSucess)return l;let d=await this._handleProgress(()=>this._vexcom.downloadUserProgram(t,o,a.fsPath,s,r,!0,n),c);return this._userPort.open(),x._toCommandResponse(d);case i.Device.Unknown:default:return{command:h.CommandID.downloadUserProgram,details:"Unknown Device Connected",json:"{}",statusCode:h.ExitCode.vexError}}}async play(t){this._userPort.close();let o=await super.systemInfo();if(o.statusCode!==h.ExitCode.vexSucess)return o;let s=await super.play(t);return this._userPort.open(),s}async stop(){this._userPort.close();let t=await super.systemInfo();return t.statusCode!==h.ExitCode.vexSucess?t:await super.stop()}async erase(t){this._userPort.close();let o=await super.erase(t),s=await super.systemInfo();return s.statusCode!==h.ExitCode.vexSucess?s:(this._userPort.open(),o)}async setRobotName(t){this._userPort.close();let o=await super.setRobotName(t),s=await super.systemInfo();return s.statusCode!==h.ExitCode.vexSucess?s:(this._userPort.open(),o)}async setTeamName(t){this._userPort.close();let o=await super.setTeamName(t),s=await super.systemInfo();return s.statusCode!==h.ExitCode.vexSucess?s:(this._userPort.open(),o)}async screenGrab(t){this._userPort.close();let o=await super.screenGrab(t);return this._userPort.open(),o}async batteryMedic(){this._userPort.close();let t=await super.batteryMedic();return this._userPort.open(),t}async downloadPythonVM(){this._userPort.close();let t=await super.downloadPythonVM();return this._userPort.open(),t}async systemInfo(){let t=this._userPort.isOpen;t&&this._userPort.close();let o=await super.systemInfo();return t&&this._userPort.open(),o}get needsRadioUpdate(){return this._needsRadioUpdate}set needsRadioUpdate(t){this._needsRadioUpdate=t}get needsUsbUpdate(){return this._needsUsbUpDate}set needsUsbUpdate(t){this._needsUsbUpDate=t}get needsVexosUpdate(){return this._needsVexosUpdate=this._needsUsbUpDate&&this._needsRadioUpdate,this._needsUsbUpDate&&this._needsRadioUpdate}set needsVexosUpdate(t){this._needsVexosUpdate=t}};var zo=O(require("vscode"));var qe=class extends A{constructor(e,t=!1,o){super(e,t,o)}async downloadUserProgram(e,t,o,s,a=!1){switch(this._device){case i.Device.Brain:if(this._bootMode!==x.BootMode.app)return{command:h.CommandID.downloadUserProgram,details:`${this._platform} ${this._device} running ${this._bootMode} bootloader`,json:"{}",statusCode:h.ExitCode.vexError};let r=await this._vexcom.downloadUserProgram(e,t,s.fsPath,o,a,!1);return x._toCommandResponse(r);case i.Device.Unknown:default:return{command:h.CommandID.downloadUserProgram,details:"Unknown Device Connected",json:"{}",statusCode:h.ExitCode.vexError}}}async systemUpdate(e,t=!1){let o={location:zo.ProgressLocation.Notification,title:"Vexos Update: ",cancellable:!1},s=await this._handleProgress(()=>this._vexcom.sytemUpdate(e.fsPath,t),o);return x._toCommandResponse(s)}get needsVexosUpdate(){return this._needsVexosUpdate}set needsVexosUpdate(e){this._needsVexosUpdate=e}};var yt=O(require("vscode"));var Be=class extends A{constructor(t,o=!1,s){super(t,o,s);this._needsRadioUpdate=!1;this._needsUsbUpDate=!1}async downloadUserProgram(t,o,s,a,r=!1){switch(this._device){case i.Device.Controller:if(!this._systemInfo?.controller?.flags)return{command:h.CommandID.downloadUserProgram,details:`${this._platform} ${this._device} No Radio Status`,json:"{}",statusCode:h.ExitCode.vexError};if((Number(this._systemInfo?.controller?.flags)&2)!==2&&this._systemInfo?.brain===void 0)return{command:h.CommandID.downloadUserProgram,details:`${this._platform} ${this._device} Not Linked to brain`,json:"{}",statusCode:h.ExitCode.vexError};let n={location:yt.ProgressLocation.Notification,title:"Program Download: ",cancellable:!1};if(this._platform===i.Platform.EXP||this._platform===i.Platform.IQ2){let l=await this._handleProgress(()=>this._vexcom.downloadUserProgram(t,o,a.fsPath,s,r,!0),n);return x._toCommandResponse(l)}else return{command:h.CommandID.downloadUserProgram,details:"Unknown Device Connected",json:"{}",statusCode:h.ExitCode.vexError};case i.Device.Unknown:default:return{command:h.CommandID.downloadUserProgram,details:"Unknown Device Connected",json:"{}",statusCode:h.ExitCode.vexError}}}async controllerUsbUpdate(t){let o={location:yt.ProgressLocation.Notification,title:`${this.platform} ${this.device} Usb Update: `,cancellable:!1},s=await this._handleProgress(async()=>{this._progress?.report({increment:50,message:"50%"});let a=await this._vexcom.controllerAtmelFirmwareUpdate(t.fsPath);return a.exitCode===h.ExitCode.vexSucess&&(this._needsUsbUpDate=!1,this._progress?.report({increment:50,message:"100%"}),await i.Utils.asyncSleep(100)),a},o);return x._toCommandResponse(s)}async controllerRadioUpdate(t){let o={location:yt.ProgressLocation.Notification,title:`${this.platform} ${this.device} Radio Update: `,cancellable:!1},s=await this._handleProgress(()=>this._vexcom.controllerRadioFirmwareUpdate(t.fsPath),o);return s.exitCode===h.ExitCode.vexSucess&&(this._needsRadioUpdate=!1),x._toCommandResponse(s)}async controllerUpdate(t){let o={location:yt.ProgressLocation.Notification,title:`${this.platform} ${this.device} Update: `,cancellable:!1};return await this.controllerRadioUpdate(t),await this.controllerUsbUpdate(t)}static async controllerUsbUpdate(t){let o=i.Extension.getVexcomUri(i.Extension.context),s=new h(o.fsPath,"",{active:!1,maxCmds:0}),a={location:yt.ProgressLocation.Notification,title:"Controller Usb Update: ",cancellable:!1},r=await s.controllerAtmelFirmwareUpdate(t.fsPath);return x._toCommandResponse(r)}get needsRadioUpdate(){return this._needsRadioUpdate}set needsRadioUpdate(t){this._needsRadioUpdate=t}get needsUsbUpdate(){return this._needsUsbUpDate}set needsUsbUpdate(t){this._needsUsbUpDate=t}get needsVexosUpdate(){return this._needsVexosUpdate=this._needsUsbUpDate&&this._needsRadioUpdate,this._needsUsbUpDate&&this._needsRadioUpdate}set needsVexosUpdate(t){this._needsVexosUpdate=t}};var Wo=O(require("vscode"));var Je=class extends A{constructor(e,t=!1){super(e,t)}async downloadUserProgram(e,t,o,s,a=!1){switch(this._device){case i.Device.Brain:if(this._bootMode!==x.BootMode.app)return{command:h.CommandID.downloadUserProgram,details:`${this._platform} ${this._device} running ${this._bootMode} bootloader`,json:"{}",statusCode:h.ExitCode.vexError};let r=await this._vexcom.downloadUserProgram(e,t,s.fsPath,o,a,!1);return x._toCommandResponse(r);case i.Device.Unknown:default:return{command:h.CommandID.downloadUserProgram,details:"Unknown Device Connected",json:"{}",statusCode:h.ExitCode.vexError}}}async systemUpdate(e,t=!1){let o={location:Wo.ProgressLocation.Notification,title:"Vexos Update: ",cancellable:!1},s=await this._handleProgress(()=>this._vexcom.sytemUpdate(e.fsPath,t),o);return x._toCommandResponse(s)}get needsVexosUpdate(){return this._needsVexosUpdate}set needsVexosUpdate(e){this._needsVexosUpdate=e}};var Dt=O(require("vscode"));var Ve=class extends A{constructor(t,o=!1,s){super(t,o,s);this._needsRadioUpdate=!1;this._needsUsbUpDate=!1}async downloadUserProgram(t,o,s,a,r=!1){switch(this._device){case i.Device.Controller:if(!this._systemInfo?.controller?.flags)return{command:h.CommandID.downloadUserProgram,details:`${this._platform} ${this._device} No Radio Status`,json:"{}",statusCode:h.ExitCode.vexError};if((Number(this._systemInfo?.controller?.flags)&2)!==2&&this._systemInfo?.brain===void 0)return{command:h.CommandID.downloadUserProgram,details:`${this._platform} ${this._device} Not Linked to brain`,json:"{}",statusCode:h.ExitCode.vexError};let n={location:Dt.ProgressLocation.Notification,title:"Program Download: ",cancellable:!1};if(this._platform===i.Platform.EXP||this._platform===i.Platform.IQ2){let l=await this._handleProgress(()=>this._vexcom.downloadUserProgram(t,o,a.fsPath,s,r,!0),n);return x._toCommandResponse(l)}else return{command:h.CommandID.downloadUserProgram,details:"Unknown Device Connected",json:"{}",statusCode:h.ExitCode.vexError};case i.Device.Unknown:default:return{command:h.CommandID.downloadUserProgram,details:"Unknown Device Connected",json:"{}",statusCode:h.ExitCode.vexError}}}async controllerUsbUpdate(t){let o={location:Dt.ProgressLocation.Notification,title:`${this.platform} ${this.device} Usb Update: `,cancellable:!1},s=await this._handleProgress(async()=>{this._progress?.report({increment:50,message:"50%"});let a=await this._vexcom.controllerAtmelFirmwareUpdate(t.fsPath);return a.exitCode===h.ExitCode.vexSucess&&(this._needsUsbUpDate=!1,this._progress?.report({increment:50,message:"100%"}),await i.Utils.asyncSleep(100)),a},o);return x._toCommandResponse(s)}async controllerRadioUpdate(t){let o={location:Dt.ProgressLocation.Notification,title:`${this.platform} ${this.device} Radio Update: `,cancellable:!1},s=await this._handleProgress(()=>this._vexcom.controllerRadioFirmwareUpdate(t.fsPath),o);return s.exitCode===h.ExitCode.vexSucess&&(this._needsRadioUpdate=!1),x._toCommandResponse(s)}async controllerUpdate(t){let o={location:Dt.ProgressLocation.Notification,title:`${this.platform} ${this.device} Update: `,cancellable:!1};return await this.controllerRadioUpdate(t),await this.controllerUsbUpdate(t)}static async controllerUsbUpdate(t){let o=i.Extension.getVexcomUri(i.Extension.context),s=new h(o.fsPath,"",{active:!1,maxCmds:0}),a={location:Dt.ProgressLocation.Notification,title:"Controller Usb Update: ",cancellable:!1},r=await s.controllerAtmelFirmwareUpdate(t.fsPath);return x._toCommandResponse(r)}get needsRadioUpdate(){return this._needsRadioUpdate}set needsRadioUpdate(t){this._needsRadioUpdate=t}get needsUsbUpdate(){return this._needsUsbUpDate}set needsUsbUpdate(t){this._needsUsbUpDate=t}get needsVexosUpdate(){return this._needsVexosUpdate=this._needsUsbUpDate&&this._needsRadioUpdate,this._needsUsbUpDate&&this._needsRadioUpdate}set needsVexosUpdate(t){this._needsVexosUpdate=t}};var De=class extends x{constructor(t){super();this._vid="";this._pid="";this._bootMode=t.bootMode,this._platform=t.platform,this._device=t.device,this._vid=t.vid,this._pid=t.pid;let o=i.Extension.getVexcomUri(i.Extension.context);this._vexcom=new h(o.fsPath,"",{active:!0,maxCmds:0}),this._vexcom.on("Data",(s,a)=>{this._onVexcomDataRecieved(this,s,a)}),this._vexcom.on("Error",(s,a)=>{this._onVexcomErrorRecieved(this,s,a)}),this._vexcom.on("Exit",(s,a)=>{this._onVexcomExitRecieved(this,s,a)})}get activeCommand(){return this._vexcom.activeCommand.cmdID}static isTypeOf(t){return t instanceof De}get pid(){return this._pid}get vid(){return this._vid}};var ct=class extends De{constructor(e){super(e)}async recover(){let e=await this._vexcom.recoverFromDFU(this._platform);return x._toCommandResponse(e)}};var lt=class extends De{constructor(e){super(e)}async recover(){let e=await this._vexcom.recoverFromDFU(this._platform);return x._toCommandResponse(e)}};var Go=O(require("vscode"));var dt=class extends De{constructor(e){super(e)}async recover(e){let t=await this._vexcom.recoverFromDFU(this._platform);return x._toCommandResponse(t)}async controllerUsbUpdate(e){let t={location:Go.ProgressLocation.Notification,title:"Controller Usb Update: ",cancellable:!1},o=await this._vexcom.controllerAtmelFirmwareUpdate(e.fsPath);return x._toCommandResponse(o)}};var qo=O(require("vscode"));var pt=class extends De{constructor(e){super(e)}async recover(e){let t=await this._vexcom.controllerAtmelFirmwareUpdate(e.fsPath);return x._toCommandResponse(t)}async controllerUsbUpdate(e){let t={location:qo.ProgressLocation.Notification,title:"Controller Usb Update: ",cancellable:!1},o=await this._vexcom.controllerAtmelFirmwareUpdate(e.fsPath);return x._toCommandResponse(o)}};var Wt=class{static createDevice(e){switch(`${e.platform}-${e.device}-${e.bootMode}`){case`${i.Platform.V5}-${i.Device.Brain}-${x.BootMode.app}`:return new Ke(e);case`${i.Platform.EXP}-${i.Device.Brain}-${x.BootMode.app}`:case`${i.Platform.EXP}-${i.Device.Brain}-${x.BootMode.rom}`:case`${i.Platform.EXP}-${i.Device.Brain}-${x.BootMode.ram}`:return new qe(e);case`${i.Platform.IQ2}-${i.Device.Brain}-${x.BootMode.app}`:case`${i.Platform.IQ2}-${i.Device.Brain}-${x.BootMode.rom}`:case`${i.Platform.IQ2}-${i.Device.Brain}-${x.BootMode.ram}`:return new Je(e);case`${i.Platform.V5}-${i.Device.Controller}-${x.BootMode.app}`:return new Xe(e);case`${i.Platform.EXP}-${i.Device.Controller}-${x.BootMode.app}`:case`${i.Platform.EXP}-${i.Device.Controller}-${x.BootMode.rom}`:return new Be(e);case`${i.Platform.IQ2}-${i.Device.Controller}-${x.BootMode.app}`:case`${i.Platform.IQ2}-${i.Device.Controller}-${x.BootMode.rom}`:return new Ve(e);default:return}}};var Gt=class{static createDevice(e){switch(`${e.platform}-${e.device}-${x.BootMode.dfu}`){case`${i.Platform.EXP}-${i.Device.Brain}-${x.BootMode.dfu}`:return new ct(e);case`${i.Platform.IQ2}-${i.Device.Brain}-${x.BootMode.dfu}`:return new lt(e);case`${i.Platform.EXP}-${i.Device.Controller}-${x.BootMode.dfu}`:return new dt(e);case`${i.Platform.IQ2}-${i.Device.Controller}-${x.BootMode.dfu}`:return new pt(e);default:return}}};var mo=O(require("vscode")),Jo=require("serialport"),uo=O(require("child_process")),Nt=O(require("path")),go=O(require("os")),L=class{constructor(e,t){this._maxDeviceConnects=2;this._maxDeviceDisconnects=2;this._dfuConnectCounter=0;this._dfuDisconnectCounter=0;this._detectLoopInLock=!1;this._deviceDetectionLock=!1;this._deviceDFUDetectionLock=!1;L._context=e,this._activeDeviceList=[],this._activeDFUDeviceList=[],L._logCB=t,L._logHandler("Starting")}async checkSystemVEXOS(e){if(!(e instanceof A)||!(e instanceof A))return;L._logHandler("Checking Device Vexos against Local Vexos-------------");let t=mo.Uri.joinPath(L._context.globalStorageUri,"vexos"),o=(await i.Extension.ResourceManager.getVEXosVersions(e.platform,t)).json,s=JSON.parse(o),a=JSON.parse(e.json),r;a.v5&&(r=a.v5.brain.vexos),a.exp&&(e.bootMode===x.BootMode.app?r=a.exp.brain.vexos:(e.bootMode===x.BootMode.ram||e.bootMode===x.BootMode.rom)&&(r=a.exp.brain.version)),a.iq2&&(e.bootMode===x.BootMode.app?r=a.iq2.brain.vexos:(e.bootMode===x.BootMode.ram||e.bootMode===x.BootMode.rom)&&(r=a.iq2.brain.version));let n=i.Utils.vexos.toVersion(r).split(".").join("_"),c=`VEXOS_${e.platform}_${n}`,l=s.online.latest!=="",d=s.local.latest!=="",v="",V=!1,U,P={command:"check vexos",details:"",json:"",statusCode:0};if(l)return U=i.Utils.vexos.getLatestVEXosVersion([c,s.online.latest,s.local.latest]),U!==c||e.bootMode!==x.BootMode.app||V?(L._logHandler(`Vexos update available: Online-${s.online.latest} Local-${s.local.latest} System-${i.Utils.vexos.fileNameToVersion(c)} BootMode: ${e.bootMode}`),v=`Vexos update available: ${i.Utils.vexos.fileNameToVersion(U)}`,P.details=v,P.statusCode=1,P):Number(a?.v5?.brain?.flags)&65536?(L._logHandler(`Vexos update available: Assets Invalid, Online-${s.online.latest} System-${i.Utils.vexos.fileNameToVersion(c)} BootMode: ${e.bootMode}`),v=`Vexos update available: ${i.Utils.vexos.fileNameToVersion(U)}`,P.details=v,P.statusCode=1,P):(L._logHandler(`VEXOS Version: Online:${s.online.latest} System:${c}`),L._logHandler("VEXOS - Up To Date"),P.details="VEXOS up to date",P.statusCode=0,P);if(d)return U=i.Utils.vexos.getLatestVEXosVersion([c,s.local.latest]),U!==c||e.bootMode!==x.BootMode.app?(L._logHandler(`Vexos update available: ${i.Utils.vexos.fileNameToVersion(c)} BootMode: ${e.bootMode}`),v=`Vexos update available: ${i.Utils.vexos.fileNameToVersion(U)}`,P.details=v,P.statusCode=1,P):(L._logHandler(`VEXOS Version @: Online:${s.online.latest} System:${c}`),L._logHandler("VEXOS - Up To Date"),P.details="VEXOS up to date",P.statusCode=0,P);throw new Error("No Internet connection and no vexos availiable at current home directory");L._logHandler(`VEXOS Check Result: ${v}`)}async checkControllerVEXOS(e){if(!(e instanceof Ve)&&!(e instanceof Be))return;L._logHandler("Checking Device Vexos against Local Vexos-------------");let t=mo.Uri.joinPath(L._context.globalStorageUri,"vexos"),o=(await i.Extension.ResourceManager.getVEXosVersions(e.platform,t)).json,s=JSON.parse(o),a=JSON.parse(e.json),r=s.online.latest!=="",n=s.local.latest!=="",c="",l=!1,d,v,V={command:"check controller vexos",details:"",json:"",statusCode:0},U=await i.Extension.ResourceManager.getLatestVEXosManifest(e.platform,t),P=JSON.parse(U.json),R,E,H,k;e.bootMode===x.BootMode.app?(R=i.Utils.vexos.toVersion(e.vexComSystemInfo?.controller?.version)?i.Utils.vexos.toVersion(e?.vexComSystemInfo?.controller?.version):"",E=i.Utils.vexos.toVersion(e.vexComSystemInfo?.controller?.atmel)?i.Utils.vexos.toVersion(e?.vexComSystemInfo?.controller?.atmel):"",H=P.ctrl.cdc.version,k=P.ctrl.radio.version):(R="",E=i.Utils.vexos.toVersion(e.vexComSystemInfo?.controller_boot?.atmel)?i.Utils.vexos.toVersion(e.vexComSystemInfo?.controller_boot?.atmel):"",H=P.ctrl.cdc.version,k=P.ctrl.radio.version);let y;console.log(e.vexComSystemInfo),d=i.Utils.vexos.getLatestFileVersion([R,k]),v=i.Utils.vexos.getLatestVEXosVersion([E,H]);let J=!1,T=!1;return d!==R||l?(L._logHandler(`${e.platform} ${e.device} VEXOS update available:${R} -> ${k}`),c=`${e.platform} ${e.device} VEXOS update available:${P.version}`,V.details=c,V.statusCode=1,J=!0,e.needsRadioUpdate=!0):J=!1,v!==E||l?(L._logHandler(`${e.platform} ${e.device} USB update available: ${E} -> ${H}`),c=`${e.platform} ${e.device} VEXOS update available:${P.version}`,V.details=c,V.statusCode=1,T=!0,e.needsUsbUpdate=!0):T=!1,L._logHandler("VEXOS - Up To Date"),V.statusCode||(V.details="VEXOS up to date"),V.json=JSON.stringify({usb:T,radio:J}),V}static async getVEXDeviceList(e){let t=await Jo.SerialPort.list();L._serialPortIOList=t;let o=this.filterbyType(t,"User",e),s=this.filterbyType(t,"Communication",e),a=go.type(),r=[];return s.forEach(n=>{if(n.productId===this._v5ControllerPid){let c=this.getDeviceTypeFromPID(n.productId),l={platform:c.platform,device:c.device,bootMode:x.BootMode.unknown,user:"",communication:n.path,robotName:"",teamNumber:"",id:"",json:""};r.some(d=>l.communication===d.communication||l.user===d.user)||r.push(l);return}o.forEach(c=>{if(this.comparePortByPlatform(a,c,n)){let d=this.getDeviceTypeFromPID(n.productId),v={platform:d.platform,device:d.device,user:c.path,bootMode:x.BootMode.unknown,communication:n.path,robotName:"",teamNumber:"",id:"",json:""};r.some(V=>v.communication===V.communication||v.user===V.user)||r.push(v)}})}),r.sort(this._sortListCB),r}static async getVEXDfuDeviceList(e){let t=await x.listDevices(""),o=JSON.parse(t.json),s=o?.usb?.dfu?o?.usb?.dfu:[],a=[],r=RegExp(/(?<=0x)\w\w\w\w/),n=0,c=0;return s.forEach(l=>{let d=r.exec(l.vid)[0],v=r.exec(l.pid)[0],V=L.getDeviceTypeFromPID(v);n=a.filter(U=>l.family===U.platform.toUpperCase()&&d===U.vid&&v===U.pid).length+1,a.push({device:V.device,pid:v,vid:d,bootMode:x.BootMode.dfu,platform:V.platform,id:n})}),e&&(a=a.filter(l=>e===l.platform)),a}getBootMode(e){let t=JSON.parse(e),o,s=x.BootMode.unknown;if(t.v5)o=t.v5;else if(t.iq2)o=t.iq2;else if(t.exp)o=t.exp;else if(t?.unknown?.controller_boot)o=t.unknown;else return;return o?.brain?.bootloader?o?.brain?.bootloader===x.BootMode.ram||o?.brain?.bootloader===x.BootMode.rom?s=o?.brain?.bootloader:s=x.BootMode.unknown:o?.brain?s=x.BootMode.app:o?.controller?s=x.BootMode.app:o?.controller_boot&&(s=x.BootMode.rom),s}startSearch(){if(L._setStartTime(),L._logHandler("Starting VEX Device Search"),this._searchLoopID){L._logHandler("Can't Start Loop because loop alread active");return}this._searchLoopID=setInterval(()=>{this._deviceDetectionLock||this.deviceDetectionLoop().then(()=>{this._deviceDetectionLock=!1}),this._deviceDFUDetectionLock||this.deviceDFULoop().then(()=>{this._deviceDFUDetectionLock=!1}),L._elapsedTime()>1e4&&(L._startTime=new Date)},500)}resetSearch(){L._setStartTime(),L._logHandler("Reset VEX Device Search"),this._activeDeviceList=[],this.stopSearch(),this.startSearch()}stopSearch(){L._logHandler("Stoping VEX Device Search"),clearInterval(this._searchLoopID),this._searchLoopID=void 0}on(e,t){switch(e){case"VEX_Device_Detected":{this._onDeviceDetect=t;break}case"VEX_Device_Disconnected":{this._onDeviceDisconnect=t;break}case"VEX_DFU_Device_Detected":{this._onDeviceDFUDetect=t;break}case"VEX_DFU_Device_Disconnected":{this._onDeviceDFUDisconnect=t;break}case"Log":{L._logCB=t;break}}}async deviceDetectionLoop(){this._deviceDetectionLock=!0;let e=[],t=[],o=this._activeDeviceList,s=await L.getVEXDeviceList();t=o.filter(n=>!s.some(c=>c.communication===n.communication&&c.user===n.user)),t.forEach(async n=>{L._logHandler(""),L._logHandler(`VEX ${n.platform} ${n.device} Disconnected `),L._logHandler("---------------------------------------------"),L._logHandler(`	-(User)           	 ${n.user}`),L._logHandler(`	-(Communication)  	 ${n.communication}`),i.DEBUG&&(L._logHandler(`	-(Robot Name) 	 ${n.robotName}`),L._logHandler(`	-(Team #)     	 ${n.teamNumber}`),L._logHandler(`	-(id)   	 ${n.id}`),L._logHandler(`	-(BootMode)       	 ${n.bootMode}`)),L._logHandler(""),this._activeDeviceList=this._activeDeviceList.filter(c=>c.communication!==n.communication),this._disconnetHandler(n)}),e=s.filter(n=>!o.some(c=>c.communication===n.communication&&c.user===n.user));let a=async n=>{if(this.activeDeviceList.some(v=>v.communication===n.communication))return;let c=(await A.systemInfo(n.communication)).json,l=JSON.parse(c),d;if(l.v5)d=l.v5;else if(l.iq2)d=l.iq2;else if(l.exp)d=l.exp;else if(l.unknown)d=l.unknown;else return;n.json=c,n.device===i.Device.Brain?d.brain?.bootloader?d.brain.bootloader?(n.robotName=`${d.brain.bootloader}`,n.id="",n.teamNumber=""):!d.brain&&d.controller&&(n.robotName="Controller",n.id="",n.teamNumber=""):(n.robotName=d.brain.name,n.id=d.brain.ssn,n.teamNumber=d.brain.team):n.device===i.Device.Controller&&(d.controller||d.controller_boot)&&(n.robotName="",n.id="",n.teamNumber=""),n.bootMode=this.getBootMode(c),L._logHandler(""),L._logHandler(`VEX ${n.platform} ${n.device} Detected `),L._logHandler("---------------------------------------------"),L._logHandler(`	-(User)           	 ${n.user}`),L._logHandler(`	-(Communication)  	 ${n.communication}`),i.DEBUG&&(L._logHandler(`	-(Robot Name) 	 ${n.robotName}`),L._logHandler(`	-(Team #)     	 ${n.teamNumber}`),L._logHandler(`	-(id)         	 ${n.id}`),L._logHandler(`	-(BootMode)   	 ${n.bootMode}`)),L._logHandler(""),this._activeDeviceList.push(n),this._dectectHandler(n)},r=0;for(e.forEach(async n=>{console.log("=========>Detection Loop Function Called"),await a(n),r++});r!==e.length;)await i.Utils.asyncSleep(250)}async deviceDFULoop(){let e=[],t=[],o=this._activeDFUDeviceList,s=await L.getVEXDfuDeviceList();t=o.filter(n=>!s.some(c=>n.id===n.id&&n.vid===c.vid&&n.pid===c.pid)),this._dfuDisconnectCounter===this._maxDeviceDisconnects?(this._dfuDisconnectCounter=0,t.forEach(async n=>{L._logHandler(""),L._logHandler(`VEX ${n.platform} ${n.device} (DFU) Disconnected `),L._logHandler("---------------------------------------------"),L._logHandler(`	-(VID)	 ${n.vid}`),L._logHandler(`	-(PID)	 ${n.pid}`),L._logHandler(`	-(Dummy ID)	 ${n.id}`),L._logHandler(""),this._activeDFUDeviceList=this._activeDFUDeviceList.filter(c=>!(c.id===n.id&&c.vid===n.vid&&c.pid===n.pid)),this._disconnetDFUHandler(n)})):t.length?this._dfuDisconnectCounter++:this._dfuDisconnectCounter=0,e=s.filter(n=>!o.some(c=>c.id===n.id&&c.vid===n.vid&&c.pid===n.pid));let a=async n=>{this._activeDFUDeviceList.some(c=>c.id===n.id&&c.vid===n.vid&&c.pid===n.pid)||(L._logHandler(""),L._logHandler(`VEX ${n.platform} ${n.device} (DFU) Detected `),L._logHandler("---------------------------------------------"),L._logHandler(`	-(VID)	 ${n.vid}`),L._logHandler(`	-(PID)	 ${n.pid}`),L._logHandler(`	-(Dummy ID)	 ${n.id}`),L._logHandler(""),this._activeDFUDeviceList.push(n),this._dectectDFUHandler(n))},r=0;for(e.forEach(async n=>{await a(n),r++});r!==e.length;)await i.Utils.asyncSleep(250)}static comparePortByPlatform(e,t,o){switch(e){case"Windows_NT":return t.serialNumber===o.serialNumber;case"Darwin":return t.locationId===o.locationId;case"Linux":let s=t.path.split("/").at(-1),a=o.path.split("/").at(-1),r=uo.spawnSync(`find /sys/devices -name "${s}"`,{shell:!0}).stdout.toString(),n=uo.spawnSync(`find /sys/devices -name "${a}"`,{shell:!0}).stdout.toString(),c=Nt.dirname(Nt.dirname(r)).split("."),l=Nt.dirname(Nt.dirname(n)).split(".");return c.pop(),l.pop(),r=c.join("."),n=l.join("."),r===n;default:return!1}}static getPortTypeByPlatform(e,t){let o="";switch(e){case"Windows_NT":t.pnpId.includes(this._comsMI)||t.pnpId.includes(this._comsV5ControllerMI)?o="Communication":t.pnpId.includes(this._userMI)?o="User":o="Unknown";break;case"Darwin":let s=t.path.slice(-1);s===this._comsModem||s===this._comsV5ControllerModem?o="Communication":s===this._userModem?o="User":o="Unknown";break;case"Linux":t.pnpId.includes(this._comsIF)||t.pnpId.includes(this._comsV5ControllerIF)?o="Communication":t.pnpId.includes(this._userIF)?o="User":o="Unknown";break;default:o="Unknown";break}return o}static filterbyType(e,t,o){let s=o==="v5"||o===void 0,a=o==="exp"||o===void 0,r=o==="iq2"||o===void 0,n=go.type();return e.filter(l=>l.vendorId===this._vexVid&&(l.productId===this._v5BrainPid&&s||l.productId===this._v5ControllerPid&&s||l.productId===this._iq2BrainPid&&r||l.productId===this._iq2ControllerPid&&r||l.productId===this._expBrainPid&&a||l.productId===this._expControllerPid&&a)&&this.getPortTypeByPlatform(n,l)===t)}static getDeviceTypeFromPID(e){switch(e){case this._v5BrainPid:return{platform:i.Platform.V5,device:i.Device.Brain};case this._v5ControllerPid:return{platform:i.Platform.V5,device:i.Device.Controller};case this._expBrainPid:return{platform:i.Platform.EXP,device:i.Device.Brain};case this._expControllerPid:return{platform:i.Platform.EXP,device:i.Device.Controller};case this._iq2BrainPid:return{platform:i.Platform.IQ2,device:i.Device.Brain};case this._iq2ControllerPid:return{platform:i.Platform.IQ2,device:i.Device.Controller};case this._expBrainDFUPid:return{platform:i.Platform.EXP,device:i.Device.Brain};case this._expControllerDFUPid:return{platform:i.Platform.EXP,device:i.Device.Controller};case this._iq2BrainDFUPid:return{platform:i.Platform.IQ2,device:i.Device.Brain};case this._iq2ControllerDFUPid:return{platform:i.Platform.IQ2,device:i.Device.Controller};default:return{platform:i.Platform.Unknown,device:i.Device.Unknown}}}static _sortListCB(e,t){var o=`${e.platform} ${e.device}`.toUpperCase(),s=`${e.platform} ${e.device}`.toUpperCase();return o<s?-1:o>s?1:e.communication<t.communication?-1:e.communication>t.communication?1:0}static _setStartTime(){L._startTime=new Date}static _elapsedTime(){return Number(new Date)-Number(L._startTime)}static _logHandler(e,...t){let o=`${L._classType} ${e}`;t?.length?(console.log(o,t),L._logCB&&L._logCB(`${o} ${JSON.stringify(t)}`)):(console.log(o),L._logCB&&L._logCB(o))}_dectectHandler(e){this._onDeviceDetect&&this._onDeviceDetect(e)}_disconnetHandler(e){this._onDeviceDisconnect&&this._onDeviceDisconnect(e)}_dectectDFUHandler(e){this._onDeviceDFUDetect&&this._onDeviceDFUDetect(e)}_disconnetDFUHandler(e){this._onDeviceDFUDisconnect&&this._onDeviceDFUDisconnect(e)}get activeDeviceList(){return this._activeDeviceList}get activeDFUDeviceList(){return this._activeDFUDeviceList}set selectedDevice(e){this._selectedDevice=e}get selectedDevice(){return this._selectedDevice}},ue=L;ue._classType="Device Manager: ",ue._vexVid="2888",ue._nxpVid="1FC9",ue._expBrainPid="0600",ue._expBrainDFUPid="013D",ue._expControllerPid="0610",ue._expControllerDFUPid="061F",ue._iq2BrainPid="0200",ue._iq2BrainDFUPid="001F",ue._iq2ControllerPid="0210",ue._iq2ControllerDFUPid="021F",ue._v5BrainPid="0501",ue._v5ControllerPid="0503",ue._vexAICamera="0509",ue._comsMI="MI_00",ue._userMI="MI_02",ue._comsModem="1",ue._userModem="3",ue._comsIF="if00",ue._userIF="if02",ue._comsV5ControllerMI="MI_01",ue._comsV5ControllerModem="2",ue._comsV5ControllerIF="if01";var $t=O(require("child_process")),St=O(require("path")),Qo=O(require("os")),Ko=O(require("fs")),Yo=O(require("vscode"));var wt=class{constructor(e){this._version="1_1_0";this._installerName="VEX Devices Driver Installer.exe";this._installSciptURI=Yo.Uri.joinPath(e.globalStorageUri,"drivers",this._installerName)}async listVEXDrivers(){let e=$t.spawnSync("driverquery /SI /NH /FO CSV",{shell:!0}),t=[];return new TextDecoder().decode(e.stdout).split(/[\r\n]+/).forEach(a=>{let n=a.replace(/\"/gi,"").split(","),c={name:n[0],driver:n[1],active:n[2],manufacterur:n[3]};t.push(c)}),console.log(t.filter(a=>a.manufacterur==="VEX Robotics Inc.")),t.filter(a=>a.manufacterur==="VEX Robotics Inc.")}async run(){let e=(t,o)=>{let s="",a="",r="",n={};n.PATH=St.dirname(this._installSciptURI.fsPath)+St.delimiter+process.env.PATH;let c={shell:!0,env:n},l=$t.spawn(`"${this._installerName}"`,[],c);console.log(l),l.stdout.on("data",function(d){console.log(new TextDecoder().decode(d)),r+=new TextDecoder().decode(d)}),l.stderr.on("data",function(d){console.log(new TextDecoder().decode(d)),a+=new TextDecoder().decode(d)}),l.on("exit",function(d){console.log(d.toString(2)),t({stdout:r,stderr:a,exitCode:d})})};return new Promise((t,o)=>e(t,o))}async download(){return i.Extension.ResourceManager.downloadDriverInstaller(this._version)}get exist(){return console.log(this._installSciptURI.fsPath),Qo.type()==="Windows_NT"?Ko.existsSync(this._installSciptURI.fsPath):!0}_executeCMD(e,t,o){let s,a=(r,n)=>{let c="",l="",d="",v={};v.PATH=St.dirname(this._installSciptURI.fsPath)+St.delimiter+process.env.PATH;let V={shell:!0,env:v},U=$t.spawn(`"${this._installerName}"`,[],V);console.log(U),U.stdout.on("data",function(P){console.log(new TextDecoder().decode(P)),d+=new TextDecoder().decode(P)}),U.stderr.on("data",function(P){console.log(new TextDecoder().decode(P)),l+=new TextDecoder().decode(P)}),U.on("exit",function(P){console.log(P.toString(2)),r({stdout:d,stderr:l,exitCode:P})})};return new Promise((r,n)=>a(r,n))}};(r=>(r.EXP_USER_PORT="VEX EXP User Port",r.EXP_COM_PORT="VEX EXP Communications Port",r.EXP_CONTROLLER_DFU="VEX EXP cFirmware Upgrade",r.IQ2_USER_PORT="VEX IQ User Port",r.IQ2_COM_PORT="VEX IQ Communications Port",r.IQ2_CONTROLLER_DFU="VEX IQ cFirmware Upgrade"))(wt||(wt={}));var qt=O(require("vscode")),Te=class{constructor(e,t,o){this._logHomeUri=qt.Uri.joinPath(e.extensionUri,"_logs"),this._outputBox=qt.window.createOutputChannel(t,o)}_writeTextToLog(e){}static _addLeadingZeros(e,t){if(e<0){let o=String(e).slice(1);return"-"+o.padStart(t,"0")}return String(e).padStart(t,"0")}appendLine(e){let t=`${Te.getTimeStamp()} ${e}`;this._outputBox.appendLine(t),this._writeTextToLog(t)}append(e){let t=`${Te.getTimeStamp()} ${e}`;this._outputBox.append(t)}clear(){this._outputBox.clear()}hide(){this._outputBox.hide()}show(){this._outputBox.show()}static getTimeStamp(){let e=new Date,t=Te._addLeadingZeros(e.getMonth()+1,2),o=Te._addLeadingZeros(e.getDate(),2),s=Te._addLeadingZeros(e.getFullYear(),4),a=Te._addLeadingZeros(e.getHours(),2),r=Te._addLeadingZeros(e.getMinutes(),2),n=Te._addLeadingZeros(e.getSeconds(),2),c=Te._addLeadingZeros(e.getMilliseconds(),3);return`[${t}/${o}/${s} ${a}:${r}:${n}:${c}]`}};var me=O(require("vscode")),Me=O(require("fs")),vo=O(require("os")),Jt=require("util");var Ye=class{constructor(e,t){this._name="";this._description="";this._projectUri=e,this._settingsFileUri=me.Uri.joinPath(this._projectUri,".vscode",Ye.vexProjectSettingsName),this._cppIntellisenseSettings=me.Uri.joinPath(this._projectUri,".vscode",Ye.c_cpp_propertiesFileName),this._pythonIntellisenseSettings=me.Uri.joinPath(this._projectUri,".vscode",Ye.python_propertiesFileName),t&&this.updateSettingsObj(t),this.writeProjectSettings(t)}updateSettingsObj(e){this._name=e.project.name?e.project.name:"",this._description=e.project.description?e.project.description:"",this._sdkVersion=e.project.sdkVersion?e.project.sdkVersion:"",this._language=e.project.language?e.project.language:i.Language.unknown,e.project.language==="cpp"&&(this._includesUris=[],e?.project?.cpp?.includePath.forEach(t=>{this._includesUris.push(t)}))}readProjectSettings(){if(!Me.existsSync(this._settingsFileUri.fsPath)||!this._settingsFileUri.fsPath.includes(Ye.vexProjectSettingsName))return;let e=Me.readFileSync(this._settingsFileUri.fsPath);return JSON.parse(new Jt.TextDecoder().decode(e))}async writeProjectSettings(e){this._lastProjectSettingsWrite=e;let t=me.Uri.joinPath(this._projectUri,".vscode");!this._settingsFileUri.fsPath||!e||(Me.existsSync(this._settingsFileUri.fsPath)?t=this._settingsFileUri:(await me.workspace.fs.createDirectory(t),t=me.Uri.joinPath(t,Ye.vexProjectSettingsName)),Me.writeFileSync(t.fsPath,JSON.stringify(e,null,"	")),this.updateSettingsObj(e))}updateProjectSettings(){this.updateSettingsObj(this.readProjectSettings())}get lastProjectSettingsWrite(){return this._lastProjectSettingsWrite}static readProjectSettings(e){if(!Me.existsSync(e.fsPath)||!e.fsPath.includes(Ye.vexProjectSettingsName))return;let t=Me.readFileSync(e.fsPath);return JSON.parse(new Jt.TextDecoder().decode(t))}static async writeProjectSettings(e,t){let o=me.Uri.joinPath(t,".vscode"),s=me.Uri.joinPath(o,Ye.vexProjectSettingsName);!s.fsPath||!e||(Me.existsSync(s.fsPath)?o=s:(await me.workspace.fs.createDirectory(o),o=me.Uri.joinPath(o,Ye.vexProjectSettingsName)),Me.writeFileSync(o.fsPath,JSON.stringify(e,null,"	")))}async updateIntellesenseJSON(e){let t=this.readProjectSettings(),o=me.Uri.joinPath(this._projectUri,".vscode");if(t.project.language==="cpp"){let s="";vo.type()==="Windows_NT"&&(s="clang"),vo.type()==="Darwin"&&(s="clang");let a=`${"${config:"+i.Extension.Settings.toolchainCPPPathID+"}"}`,r=me.Uri.file(""),n=me.Uri.joinPath(r,"clang","bin",s),c=`${"${config:"+i.Extension.Settings.sdkCPPHomeID+"}"}`,l=me.Uri.joinPath(r,t.project.platform,this._sdkVersion,"vex"+t.project.platform.toLowerCase());console.log(l);let d={env:{vex_compilerPath:`${a}${n.fsPath}`,vex_sdkPath:`${c}${l.fsPath}`,vex_gcc:t.project.platform==="V5"?"${vex_sdkPath}/gcc/include/c++/4.9.3":"${vex_sdkPath}/gcc/include/c++/7.3.1",vex_sdkIncludes:["${vex_sdkPath}/include/**","${vex_sdkPath}/gcc/include/**","${vex_sdkPath}/gcc/include/machine/**","${vex_sdkPath}/gcc/include/newlib-nano/**","${vex_sdkPath}/gcc/include/sys/**","${vex_sdkPath}/clang/8.0.0/include/**","${vex_gcc}/","${workspaceFolder}/include/**","${workspaceFolder}/src/**"]},configurations:"",version:4};if(!this._cppIntellisenseSettings.fsPath||!d)return;Me.existsSync(this._cppIntellisenseSettings.fsPath)||(await me.workspace.fs.createDirectory(o),await me.workspace.fs.copy(e,this._cppIntellisenseSettings));let v=Me.readFileSync(this._cppIntellisenseSettings.fsPath),V=JSON.parse(new Jt.TextDecoder().decode(v));if(d.env===V.env)return;d.configurations=V.configurations,console.log("Settings URI:",this._cppIntellisenseSettings.fsPath),console.log("Settings JSON:",d),Me.writeFileSync(this._cppIntellisenseSettings.fsPath,JSON.stringify(d,null,"	"))}if(t.project.language==="python"){Me.existsSync(this._pythonIntellisenseSettings.fsPath)||(await me.workspace.fs.createDirectory(o),await me.workspace.fs.copy(e,this._pythonIntellisenseSettings));let s=me.workspace.getConfiguration().get(i.Extension.Settings.sdkPythonHomeID);await me.workspace.getConfiguration().update(i.Extension.Settings.pylanceStubPathID,`${s}\\${t.project.platform.toUpperCase()}\\${t.project.sdkVersion}\\vex${t.project.platform.toLowerCase()}\\stubs`,me.ConfigurationTarget.Workspace,!0),await me.workspace.getConfiguration().update(i.Extension.Settings.pylanceDiagnosticModePathID,"workspace",me.ConfigurationTarget.Workspace,!0),await me.workspace.getConfiguration().update(i.Extension.Settings.pylanceCheckingModeID,"basic",me.ConfigurationTarget.Workspace,!0)}}set name(e){this._name=e.length<=13?e:e.substring(0,12)}get name(){return this._name}get projectUri(){return this._projectUri}get description(){return this._description}get sdkVersion(){return this._sdkVersion}get includeEnvUris(){return this._includesUris}get language(){return this._language}get settingsFileUri(){return this._settingsFileUri}},Qe=Ye;Qe.vexProjectSettingsName="vex_project_settings.json",Qe.c_cpp_propertiesFileName="c_cpp_properties.json",Qe.python_propertiesFileName="settings.json";var j=O(require("vscode")),ce=O(require("fs")),Se=O(require("os")),rs=O(require("child_process")),Ee=require("util"),je=O(require("path"));var W=O(require("vscode"));var Ss=(f,e,t,o,s,a)=>`
    <vscode-data-grid-row class="row">
        <vscode-data-grid-cell grid-column="1">
            <section class="component-row">
                <section class="component-container">
                    <img src="${e}" alt="${a} Project Icon" >
                </section>
                <section class="component-container">
                    <h3 id="project-title-${f}" class="zeroMargin project-title">${t}</h3>
                    <p  id="project-description-${f}" class="p-description project-description">${o}</p>
                    <section id="project-tags-${f}" class="label-row">
                        ${s}
                    </section>
                </section>

            </section>
        </vscode-data-grid-cell>
    </vscode-data-grid-row>
`,Is=f=>`<vscode-tag>${f}</vscode-tag>`,mt=class{constructor(e){console.log(e),this._id=e?e.id:"",this._iconUri=e?e.iconUri:void 0,this._projectName=e?e.projectName:"",this._description=e?e.description:"",this._tags=e?e.tags:[],this._platform=e?e.platform:"",console.log(this)}set iconUri(e){this._iconUri=e}set projectName(e){this._projectName=e}set description(e){this._description=e}set tags(e){this._tags=e}get html(){return Ss(this._id,this._iconUri,this._projectName,this._description,this._getTagHtml(),this._platform)}_getTagHtml(){let e="";return this._tags.length&&this._tags.forEach(t=>{e+=Is(t)}),e}static html(e){let t="";return e&&(t+='<vscode-data-grid id="ListContainer" generate-header="none" aria-label="Basic" class="project-list">',e.forEach(o=>{t+=o.html}),t+="</vscode-data-grid>"),t}static getObjsFromOptionList(e){if(!e)return[];let t=[];return e.forEach(o=>{t.push(new mt(o)),console.log(t)}),t}};var Es=(f,e,t,o)=>`
    <vscode-data-grid-row class="row platform-row">
        <vscode-data-grid-cell grid-column="1" style="height:auto!important; padding-top:10%!important; padding-bottom:10%!important;">
            <div class="platform-container">
                <div class="platform-image-container">
                    <img class="platform-img" src="${e}" alt="${o} Project Icon" >
                </div>
                <div class="platform-title-container">
                    <h2 id="project-title-${f}" class="platform-title">${t}</h2>
                </div>
            </div>

        </vscode-data-grid-cell>
    </vscode-data-grid-row>
`;var Pt=class{constructor(e){console.log(e),this._id=e?e.id:"",this._iconUri=e?e.iconUri:void 0,this._projectName=e?e.platformName:"",this._platform=e?e.platform:"",console.log(this)}set iconUri(e){this._iconUri=e}set projectName(e){this._projectName=e}get html(){return Es(this._id,this._iconUri,this._projectName,this._platform)}static html(e){let t="";return e&&(t+='<vscode-data-grid id="ListContainer" generate-header="none" aria-label="Basic" class="platform-list">',e.forEach(o=>{t+=o.html}),t+="</vscode-data-grid>"),t}static getObjsFromOptionList(e){if(!e)return[];let t=[];return e.forEach(o=>{t.push(new Pt(o)),console.log(t)}),t}};var js=(f,e,t)=>`
    <vscode-data-grid-row class="row platform-row">
    <vscode-data-grid-cell grid-column="1" style="height:auto!important; padding-top:10%!important; padding-bottom:10%!important;">
        <div class="platform-container">
            <div class="platform-image-container">
            <img class="language-img" src="${e}" alt="${t} Language Icon" >
            </div>
            <div class="platform-title-container">
            <h2 id="language-title-${f}" class="language-title">${t}</h2>
            </div>
        </div>

    </vscode-data-grid-cell>
</vscode-data-grid-row>
`,Ct=class{constructor(e){console.log(e),this._id=e?e.id:"",this._iconUri=e?e.iconUri:void 0,this._languageName=e?e.languageTitle:"",console.log(this)}set iconUri(e){this._iconUri=e}set projectName(e){this._languageName=e}get html(){return js(this._id,this._iconUri,this._languageName)}static html(e){let t="";return e&&(t+='<vscode-data-grid id="ListContainer" generate-header="none" aria-label="Basic" class="platform-list">',e.forEach(o=>{t+=o.html}),t+="</vscode-data-grid>"),t}static getObjsFromOptionList(e){if(!e)return[];let t=[];return e.forEach(o=>{t.push(new Ct(o)),console.log(t)}),t}};var D=O(require("vscode")),Vs=[{projectName:"V5 Empty Template Project",description:"This is a V5 python template project",iconUri:D.Uri.file("v5python.png"),id:"",tags:["Empty"],zipName:"py_v5_vsc_empty.zip",platform:"V5",language:"python"},{projectName:"V5 Clawbot Project",description:"This is an V5 python Clawbot project",iconUri:D.Uri.file("v5python.png"),id:"",tags:["Clawbot"],zipName:"py_v5_vsc_clawbot.zip",platform:"V5",language:"python"},{projectName:"Clawbot Controller with Events",description:"This example will use Controller button events to control the V5 Clawbot arm and claw",iconUri:D.Uri.file("v5python.png"),id:"",tags:["Clawbot"],zipName:"py_v5_vsc_clawbot_controller_tank.zip",platform:"V5",language:"python"},{projectName:"Drive to Location (Known Starting Position)",description:"This example will show how to use a GPS Sensor to navigate a V5 Moby Hero Bot to the center of a field by driving along the X-axis then the Y-axis",iconUri:D.Uri.file("v5python.png"),id:"",tags:["Sensing"],zipName:"py_v5_vsc_drive_to_location_gps.zip",platform:"V5",language:"python"},{projectName:"Drivetrain Sensing",description:"This example will show all of the available commands for using the Drivetrain",iconUri:D.Uri.file("v5python.png"),id:"",tags:["Sensing"],zipName:"py_v5_vsc_drivetrain_sensing.zip",platform:"V5",language:"python"},{projectName:"Limit / Bumper Sensing",description:"This example will show all of the available commands for using the Limit and Bumper Sensors",iconUri:D.Uri.file("v5python.png"),id:"",tags:["Sensing"],zipName:"py_v5_vsc_limit_bumper_sensing.zip",platform:"V5",language:"python"},{projectName:"Right Arcade Control",description:"This example will use the right X/Y Controller axis to control the Clawbot.",iconUri:D.Uri.file("v5python.png"),id:"",tags:["Clawbot"],zipName:"py_v5_vsc_right_arcade_control.zip",platform:"V5",language:"python"},{projectName:"Split Arcade Control",description:"This example will use the left Y and right X Controller axis to control the Clawbot.",iconUri:D.Uri.file("v5python.png"),id:"",tags:[,"Clawbot"],zipName:"py_v5_vsc_split_arcade_control.zip",platform:"V5",language:"python"},{projectName:"Using Threads",description:"This example will show how to run multiple threads (tasks) in a project at the same time",iconUri:D.Uri.file("v5python.png"),id:"",tags:["Control"],zipName:"py_v5_vsc_using_threads.zip",platform:"V5",language:"python"}],Ts=[{projectName:"EXP Empty Template Project",description:"This is a EXP python template project",iconUri:D.Uri.file("exppython.png"),id:"",tags:["Empty"],zipName:"py_exp_vsc_empty.zip",platform:"EXP",language:"python"},{projectName:"EXP Clawbot Project",description:"This is an EXP python Clawbot project",iconUri:D.Uri.file("exppython.png"),id:"",tags:["Clawbot"],zipName:"py_exp_vsc_clawbot.zip",platform:"EXP",language:"python"},{projectName:"Clawbot Controller with Events",description:"The Left up/down Controller Axis (A) will control the speed of the left motor. The Right up/down Controller Axis (D) will control the  speed of the right motor. The Left up/down Controller Buttons will control the Arm. The Right up/down Controller Buttons will control the Claw",iconUri:D.Uri.file("exppython.png"),id:"",tags:["Clawbot"],zipName:"py_exp_vsc_clawbot_controller_tank.zip",platform:"EXP",language:"python"},{projectName:"Drivetrain Sensing",description:"This example will print Drivetrain-related information to the EXP Brain's Screen",iconUri:D.Uri.file("exppython.png"),id:"",tags:["Sensing"],zipName:"py_exp_vsc_drivetrain_sensing.zip",platform:"EXP",language:"python"},{projectName:"Limit / Bumper Sensing",description:"This example will show all of the available commands for using the Limit and Bumper Sensors",iconUri:D.Uri.file("exppython.png"),id:"",tags:["Sensing"],zipName:"py_exp_vsc_limit_bumper_sensing.zip",platform:"EXP",language:"python"},{projectName:"Right Arcade",description:"The Right up/down Controller Axis (2) will drive the robot forward and backwards. The Right left/right Controller Axis (1) will turn the robot left and right. The deadband variable prevents drift when the Controller's joystick is released.",iconUri:D.Uri.file("exppython.png"),id:"",tags:[,"Clawbot"],zipName:"py_exp_vsc_right_arcade_control.zip",platform:"EXP",language:"python"},{projectName:"Split Arcade",description:"The Left up/down Controller Axis (3) will drive the robot forward and backwards. The Right left/right Controller Axis (1) will turn the robot left and right. The deadband variable prevents drift when the Controller's joystick is released.",iconUri:D.Uri.file("exppython.png"),id:"",tags:["Clawbot"],zipName:"py_exp_vsc_split_arcade_control.zip",platform:"EXP",language:"python"},{projectName:"Using Threads",description:"This example will show how to run multiple threads (tasks) in a project at the same time",iconUri:D.Uri.file("exppython.png"),id:"",tags:["Control"],zipName:"py_exp_vsc_using_threads.zip",platform:"EXP",language:"python"}],Ns=[{projectName:"IQ2 Empty Template Project",description:"This is a IQ2 python template project",iconUri:D.Uri.file("iqpython.png"),id:"",tags:["Empty"],zipName:"py_iq2_vsc_empty.zip",platform:"IQ2",language:"python"},{projectName:"IQ2 Clawbot Project",description:"This is an IQ2 python Clawbot project",iconUri:D.Uri.file("iqpython.png"),id:"",tags:["Clawbot"],zipName:"py_iq2_vsc_clawbot.zip",platform:"IQ2",language:"python"},{projectName:"Base Robot With Sensors",description:"Base IQ Gen 2 robot with controls and with sensors",iconUri:D.Uri.file("iqpython.png"),id:"",tags:["Basebot"],zipName:"py_iq2_vsc_basebot_with_sensors.zip",platform:"IQ2",language:"python"},{projectName:"Controlling Fling",description:"This program shows how to control Fling's motors with the controller events and the drivetrain with the configured controller. The Left up/down controller buttons will control the Intake Motor. The Right up/down controller buttons will control the Catapult Motor. The Joysticks are configured for Tank control",iconUri:D.Uri.file("iqpython.png"),id:"",tags:["Herobot"],zipName:"py_iq2_vsc_herobot_fling_with_controller.zip",platform:"IQ2",language:"python"},{projectName:"PLTW Template",description:"An empty project for the Project Lead The Way chassis",iconUri:D.Uri.file("iqpython.png"),id:"",tags:["PLTW"],zipName:"py_iq2_vsc_pltw_chassis.zip",platform:"IQ2",language:"python"},{projectName:"Split Arcade",description:"The Left up/down Controller Axis (A) will drive the robot forward and backwards. The Right left/right Controller Axis (C) will turn the robot left and right. The deadband variable prevents drift when the Controller's joystick is released.",iconUri:D.Uri.file("iqpython.png"),id:"",tags:["Clawbot"],zipName:"py_iq2_vsc_split_arcade.zip",platform:"IQ2",language:"python"},{projectName:"Using Threads",description:"This example will show how to run multiple threads (tasks) in a project at the same time",iconUri:D.Uri.file("iqpython.png"),id:"",tags:["Control"],zipName:"py_iq2_vsc_thread_example.zip",platform:"IQ2",language:"python"}],$s=[{projectName:"V5 Empty Template Project",description:"This is a template for an empty V5 project",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Empty"],zipName:"cpp_v5_vsc_empty.zip",platform:"V5",language:"cpp"},{projectName:"V5 Competition Template Project",description:"This is a V5 competition template project",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Competition"],zipName:"cpp_v5_vsc_competition_template.zip",platform:"V5",language:"cpp"},{projectName:"Clawbot Controller with Events",description:"This example will use Controller button events to control the V5 Clawbot arm and claw",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Clawbot"],zipName:"cpp_v5_vsc_clawbot_controller_tank.zip",platform:"V5",language:"cpp"},{projectName:"Clawbot Template (Drivetrain 2-motor)",description:"Clawbot Template (Drivetrain 2-motor)",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Clawbot"],zipName:"Claw_Drive_Temp.zip",platform:"V5",language:"cpp"},{projectName:"Clawbot Template (Drivetrain 4-motor)",description:"Blank Pre-Configured V5 Clawbot 4-motor Drivetrain Project",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Clawbot"],zipName:"Claw_4drive_gyro_temp.zip",platform:"V5",language:"cpp"},{projectName:"Clawbot Template (2-motor Drivetrain, No Gyro)",description:"Blank Pre-Configured V5 Clawbot 2-motor Drivetrain Project",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Clawbot"],zipName:"Drive_Temp_Nogyro.zip",platform:"V5",language:"cpp"},{projectName:"Clawbot Template (4-motor Drivetrain, No Gyro)",description:"Blank Pre-Configured V5 Clawbot 4-motor Drivetrain Project",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Clawbot"],zipName:"Claw_4drive_Nogyro_temp.zip",platform:"V5",language:"cpp"},{projectName:"Clawbot Template (Motors)",description:"Blank Pre-Configured V5 Clawbot Project",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Clawbot"],zipName:"Claw_Motor_Temp.zip",platform:"V5",language:"cpp"},{projectName:"Clawbot Competition Template",description:"Competition template with a Clawbot configured",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Competition","Clawbot"],zipName:"Clawbot_Competition.zip",platform:"V5",language:"cpp"},{projectName:"Competition Template",description:"Competition template with no devices configured",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Competition"],zipName:"Competition_Template.zip",platform:"V5",language:"cpp"},{projectName:"SDV (Drivetrain 2-motor)",description:"Blank Pre-Configured SDV Drivetrain Project",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["SDV"],zipName:"SDV_Drivetrain.zip",platform:"V5",language:"cpp"},{projectName:"SDV (Motors)",description:"Blank Pre-Configured SDV Project",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["SDV"],zipName:"SDV_Motors.zip",platform:"V5",language:"cpp"},{projectName:"Speedbot (Drivetrain 2-motor, No Gyro)",description:"Blank Pre-Configured V5 Speedbot 2-motor Drivetrain Project",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Speedbot"],zipName:"Speedbot_DT_NoGyro.zip",platform:"V5",language:"cpp"},{projectName:"Speedbot (Drivetrain 4-motor, No Gyro)",description:"Blank Pre-Configured V5 Speedbot 4-motor Drivetrain Project",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Speedbot"],zipName:"Speed_bot_fourDT.zip",platform:"V5",language:"cpp"},{projectName:"Speedbot (Motors)",description:"Blank Pre-Configured V5 Speedbot Project",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Speedbot"],zipName:"Speedbot_Motors.zip",platform:"V5",language:"cpp"},{projectName:"Claw and Arm",description:"Use the claw and arm to transport an object",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Claw"],zipName:"Claw_And_Arm.zip",platform:"V5",language:"cpp"},{projectName:"Using The Arm (degrees)",description:"Raise and lower the arm to specific positions",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Claw"],zipName:"Using_The_Arm.zip",platform:"V5",language:"cpp"},{projectName:"Using The Claw (degrees)",description:"Open and close the claw on your V5 robot",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Claw"],zipName:"Using_The_Claw.zip",platform:"V5",language:"cpp"},{projectName:"Adjusting Speed",description:"Change the speed of a drivetrain's drive and turn actions",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Drivetrain"],zipName:"Adjusting_Speed.zip",platform:"V5",language:"cpp"},{projectName:"Drivetrain with Variables",description:"Change the drive distance with variables",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Drivetrain"],zipName:"Drivetrain_With_Vars.zip",platform:"V5",language:"cpp"},{projectName:"Drivetrain Sensing",description:"This example will show all of the available commands for using the Drivetrain",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Drivetrain"],zipName:"cpp_v5_vsc_drivetrain_sensing.zip",platform:"V5",language:"cpp"},{projectName:"Moving Backwards (inches)",description:"Drives the robot in reverse for 6 inches",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Drivetrain"],zipName:"Moving_Backwards_In.zip",platform:"V5",language:"cpp"},{projectName:"Moving Backwards (mm)",description:"Drives the robot in reverse for 150 millimeters",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Drivetrain"],zipName:"Moving_Backwards_Mm.zip",platform:"V5",language:"cpp"},{projectName:"Moving Forward (inches)",description:"Drives the robot forward for 6 inches",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Drivetrain"],zipName:"Moving_Forward_In.zip",platform:"V5",language:"cpp"},{projectName:"Moving Forward (mm)",description:"Drives the robot forward for 150 millimeters",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Drivetrain"],zipName:"Moving_Forward_Mm.zip",platform:"V5",language:"cpp"},{projectName:"Turning Left (degrees)",description:"Turns the robot left 90 degrees",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["V5","Drivetrain"],zipName:"Turn_Left_Degrees.zip",platform:"V5",language:"cpp"},{projectName:"Turning Right (degrees)",description:"Turns the robot right 90 degrees",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Drivetrain"],zipName:"Turn_Right_Degrees.zip",platform:"V5",language:"cpp"},{projectName:"Electromagnet Actions",description:"Use the electromagnet to pick up and drop magnetic objects",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Magnet"],zipName:"Electromagnet_Actions.zip",platform:"V5",language:"cpp"},{projectName:"Electromagnet Actions",description:"Use the electromagnet to pick up and drop magnetic objects",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Magnet"],zipName:"Electromagnet_Actions.zip",platform:"V5",language:"cpp"},{projectName:"Arm Display Position",description:"Displays the current position of the arm on the brain's screen",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Workcell"],zipName:"ArmDisplayPosition.zip",platform:"V5",language:"cpp"},{projectName:"Arm Install",description:"Setup the potentiometers for your V5 Workcell arm",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Workcell"],zipName:"ArmInstall.zip",platform:"V5",language:"cpp"},{projectName:"Arm Jogging",description:"Control the Workcell Arm by pressing buttons on the screen of the V5 Brain",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Workcell"],zipName:"ArmJogging.zip",platform:"V5",language:"cpp"},{projectName:"Arm Manual Movement",description:"Displays the current position of the arm on the V5 Brain's screen and move the arm around manually",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Workcell"],zipName:"ArmManualMovement.zip",platform:"V5",language:"cpp"},{projectName:"Arm Mastering",description:"Helps you to find the mastering values for your Workcell Arm",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Workcell"],zipName:"ArmMastering.zip",platform:"V5",language:"cpp"},{projectName:"Arm UI Panel",description:"Configure the Workcell Arm and display a basic UI on the V5 Brain's screen that you can configure",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Workcell"],zipName:"ArmUIPanel.zip",platform:"V5",language:"cpp"},{projectName:"Arm Workcell-No Sensors",description:"Get started with the V5 Workcell without sensors",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Workcell"],zipName:"ArmWorkcellNoSensors.zip",platform:"V5",language:"cpp"},{projectName:"Arm Workcell-With Sensors",description:"Get started with the V5 Workcell with sensors",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Workcell"],zipName:"ArmWorkcellSensors.zip",platform:"V5",language:"cpp"},{projectName:"Drawing Shapes",description:"Learn to draw shapes and lines on the V5 Brain's Screen.",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Looks"],zipName:"Drawing_Shapes.zip",platform:"V5",language:"cpp"},{projectName:"Printing Text",description:"Print text to the V5 Brain's Screen",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Looks"],zipName:"Printing_Text.zip",platform:"V5",language:"cpp"},{projectName:"Comparing Values",description:"Print text based on the value of a number",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Control"],zipName:"Comparing_Values.zip",platform:"V5",language:"cpp"},{projectName:"Creating a Start Button",description:"Press the Brain's Screen to start your program",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Control"],zipName:"Create_Start_Button.zip",platform:"V5",language:"cpp"},{projectName:"Floor Sweeper",description:"Use random numbers to calculate turns",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Control"],zipName:"Floor_Sweeper.zip",platform:"V5",language:"cpp"},{projectName:"Functions (Returns)",description:"Use a function to add ten to an integer",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Control"],zipName:"Functions_Returns.zip",platform:"V5",language:"cpp"},{projectName:"Functions (No Returns)",description:"Use a function to print messages on empty rows",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Control"],zipName:"Functions_NoReturn.zip",platform:"V5",language:"cpp"},{projectName:"Making Decisions",description:"Use the range finder to make a decision",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Control"],zipName:"Making_Decisions.zip",platform:"V5",language:"cpp"},{projectName:"Multitasking (Tasks)",description:"Use tasks to run multiple functions at the same time.",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Control"],zipName:"Multitasking_Tasks.zip",platform:"V5",language:"cpp"},{projectName:"Multithreading (Threads)",description:"Use threads to run multiple functions at the same time.",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Control"],zipName:"Multithreading_Threads.zip",platform:"V5",language:"cpp"},{projectName:"Repeating Actions",description:"Use a loop to repeat robot movements",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Control"],zipName:"Repeating_Actions.zip",platform:"V5",language:"cpp"},{projectName:"Repeating Actions (Clawbot)",description:"Use a loop to repeat robot movements",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Control"],zipName:"Repeating_ActionClaw.zip",platform:"V5",language:"cpp"},{projectName:"Repeating Actions (No Gyro)",description:"Use a loop to repeat robot movements",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Control"],zipName:"Repeating_ActionNoGy.zip",platform:"V5",language:"cpp"},{projectName:"Accurate Turns",description:"Use the Gyro to turn 90 degrees",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"Accurate_turns.zip",platform:"V5",language:"cpp"},{projectName:"Accurate Turns (Inertial Sensor)",description:"Use the Inertial Sensor to turn 90 degrees",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"Accurate_turns_inert.zip",platform:"V5",language:"cpp"},{projectName:"Clawbot Control",description:"Use events to drive the clawbot",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing","Clawbot"],zipName:"Clawbot_Control.zip",platform:"V5",language:"cpp"},{projectName:"Controller Buttons",description:"Using the V5 Controller Buttons",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"Controller_Buttons.zip",platform:"V5",language:"cpp"},{projectName:"Detect Collisions",description:"Use the accelerometer to detect collisions",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"Detect_Collisions.zip",platform:"V5",language:"cpp"},{projectName:"Detecting Distances",description:"Use the Range Finder to detect distance",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"Detecting_Distances.zip",platform:"V5",language:"cpp"},{projectName:"Detecting Light",description:"Use the Light Sensor to detect the lighting of the room",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"Detecting_Light.zip",platform:"V5",language:"cpp"},{projectName:"Detecting Objects (Vision)",description:"Use the Vision Sensor to detect three colors",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"Detecting_Objects.zip",platform:"V5",language:"cpp"},{projectName:"Detecting Walls (Bumper)",description:"Stops the robot when the Bumper is pressed",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"Detecting_Walls.zip",platform:"V5",language:"cpp"},{projectName:"Detecting Walls (Bumper on 3-Wire Expander)",description:"Stops the robot when the Bumper is pressed",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"3-wire_expander.zip",platform:"V5",language:"cpp"},{projectName:"Digital In Sensing",description:"Use a Digital In device to read input signals from another device",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"DigitalInSensing.zip",platform:"V5",language:"cpp"},{projectName:"Digital Out Sensing",description:"Control another device using the Digital Out device",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"DigitalOutSensing.zip",platform:"V5",language:"cpp"},{projectName:"Drive to Location (Known Starting Position)",description:"Use a GPS Sensor to drive to a field's center along the X-axis, then the Y-axis, from a known starting position",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"DriveLocationKnown.zip",platform:"V5",language:"cpp"},{projectName:"Drive to Location (Unknown Starting Position)",description:"Use a GPS Sensor to drive to a specified position from a random starting position",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"DriveLocationUnknown.zip",platform:"V5",language:"cpp"},{projectName:"Drive to Location (Using Tangents)",description:"Use a GPS Sensor to drive directly to a field's center from a random starting position",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"DriveLocationTangent.zip",platform:"V5",language:"cpp"},{projectName:"Drive to Location (Known Starting Position)",description:"This example will show how to use a GPS Sensor to navigate a V5 Moby Hero Bot to the center of a field by driving along the X-axis then the Y-axis",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"cpp_v5_vsc_drive_to_location_gps.zip",platform:"V5",language:"cpp"},{projectName:"Distance Sensing",description:"Use the Distance Sensor to get distance and size information of an object",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"Distance_Sensing.zip",platform:"V5",language:"cpp"},{projectName:"Inertial Printing Demo",description:"Prints values of the Inertial Sensor",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"Inertial_printing_demo.zip",platform:"V5",language:"cpp"},{projectName:"Left Arcade",description:"Control the V5 Clawbot with the left joystick",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"Left_Arcade.zip",platform:"V5",language:"cpp"},{projectName:"Limiting Movement",description:"Use a limit switch to stop arm movement",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"Limiting_Movement.zip",platform:"V5",language:"cpp"},{projectName:"Limit / Bumper Sensing",description:"This example will show all of the available commands for using the Limit and Bumper Sensors",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"cpp_v5_vsc_limit_bumper_sensing.zip",platform:"V5",language:"cpp"},{projectName:"Line Tracking",description:"Move a robot a long a line by tracking it",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"Line_Tracking.zip",platform:"V5",language:"cpp"},{projectName:"Optical Sensing",description:"Use an Optical Sensor to get hue and brightness values of an object",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"Optical_Sensing.zip",platform:"V5",language:"cpp"},{projectName:"Positioning Servos",description:"This program will spin the servo to different positions",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"Positioning_Servos.zip",platform:"V5",language:"cpp"},{projectName:"Reading Angles",description:"Print the potentiometer values to the V5 Brain's Screen",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"Reading_Angles.zip",platform:"V5",language:"cpp"},{projectName:"Right Arcade",description:"Print the potentiometer values to the V5 Brain's Screen",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"Reading_Angles.zip",platform:"V5",language:"cpp"},{projectName:"Right Arcade Control",description:"This example will use the right X/Y Controller axis to control the Clawbot.",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"cpp_v5_vsc_right_arcade_control.zip",platform:"V5",language:"cpp"},{projectName:"Rotation Sensing",description:"Use a Rotation Sensor to get angular and positional data of an axle",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"Rotation_Sensing.zip",platform:"V5",language:"cpp"},{projectName:"Split Arcade",description:"Control the V5 Clawbot with both joysticks.",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"Split_Arcade.zip",platform:"V5",language:"cpp"},{projectName:"Tank Drive",description:"Control the V5 Clawbot with both joysticks.",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"Tank_Drive.zip",platform:"V5",language:"cpp"},{projectName:"Using 393s",description:"Using 393s with your V5 robot",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"Using_393s.zip",platform:"V5",language:"cpp"},{projectName:"Using LEDs",description:"Turn LEDs on and off",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"Using_LEDS.zip",platform:"V5",language:"cpp"},{projectName:"Using Quad Encoders",description:"Use Quad Encoders to track the rotation of a shaft",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"Using_Quad_Encoders.zip",platform:"V5",language:"cpp"},{projectName:"2D Arrays",description:"Use nested for loops to print values of a 2D Array.",iconUri:D.Uri.file("v5cpp.png"),id:"",tags:["Sensing"],zipName:"2D_Arrays.zip",platform:"V5",language:"cpp"}],ks=[{projectName:"EXP Empty Template Project",description:"This is a template for a simple EXP project",iconUri:D.Uri.file("expcpp.png"),id:"",tags:["Empty"],zipName:"cpp_exp_vsc_empty.zip",platform:"EXP",language:"cpp"},{projectName:"ClawBot Controller With Events",description:"The Left up/down Controller Axis (3) will control the speed of the left motor. The Right up/down Controller Axis (2) will control the speed of the right motor. The Left up/down Controller Buttons will control the Arm. The Right up/down Controller Buttons will control the Claw.",iconUri:D.Uri.file("expcpp.png"),id:"",tags:["Clawbot"],zipName:"cpp_exp_vsc_clawbot_controller_tank.zip",platform:"EXP",language:"cpp"},{projectName:"Drivetrain Sensing",description:"This example will print Drivetrain-related information to the EXP Brain's Screen",iconUri:D.Uri.file("expcpp.png"),id:"",tags:["Sensing"],zipName:"cpp_exp_vsc_drivetrain_sensing.zip",platform:"EXP",language:"cpp"},{projectName:"Right Arcade",description:"The Right up/down Controller Axis (2) will drive the robot forward and backwards. The Right left/right Controller Axis (1) will turn the robot left and right. The deadband variable prevents drift when the Controller's joystick is released.",iconUri:D.Uri.file("expcpp.png"),id:"",tags:["Clawbot"],zipName:"cpp_exp_vsc_right_arcade_control.zip",platform:"EXP",language:"cpp"},{projectName:"Split Arcade",description:"The Left up/down Controller Axis (3) will drive the robot forward and backwards. The Right left/right Controller Axis (1) will turn the robot left and right. The deadband variable prevents drift when the Controller's joystick is released.",iconUri:D.Uri.file("expcpp.png"),id:"",tags:["Clawbot"],zipName:"cpp_exp_vsc_split_arcade_control.zip",platform:"EXP",language:"cpp"},{projectName:"Using Threads",description:"This example will show how to run multiple threads (tasks) in a project at the same time",iconUri:D.Uri.file("expcpp.png"),id:"",tags:["Control"],zipName:"cpp_exp_vsc_using_threads.zip",platform:"EXP",language:"cpp"}],Rs=[{projectName:"IQ 2nd Generation Empty Project",description:"This is a template for a simple IQ2 project",iconUri:D.Uri.file("iqcpp.png"),id:"",tags:["Empty"],zipName:"cpp_iq2_vsc_empty.zip",platform:"IQ2",language:"cpp"},{projectName:"IQ2 Clawbot Project",description:"This is an IQ2 python Clawbot project",iconUri:D.Uri.file("iqcpp.png"),id:"",tags:["Clawbot"],zipName:"cpp_iq2_vsc_clawbot_controller.zip",platform:"IQ2",language:"cpp"},{projectName:"Base Robot With Sensors",description:"Base IQ Gen 2 robot with controls and with sensors",iconUri:D.Uri.file("iqcpp.png"),id:"",tags:["Basebot"],zipName:"cpp_iq2_vsc_basebot_with_sensors.zip",platform:"IQ2",language:"cpp"},{projectName:"Controlling Fling",description:"This program shows how to control Fling's motors with the controller events and the drivetrain with the configured controller. The Left up/down controller buttons will control the Intake Motor. The Right up/down controller buttons will control the Catapult Motor. The Joysticks are configured for Tank control",iconUri:D.Uri.file("iqcpp.png"),id:"",tags:["Herobot"],zipName:"cpp_iq2_vsc_herobot_fling_controller.zip",platform:"IQ2",language:"cpp"},{projectName:"PLTW Template",description:"An empty project for the Project Lead The Way chassis",iconUri:D.Uri.file("iqcpp.png"),id:"",tags:["PLTW"],zipName:"cpp_iq2_vsc_pltw_chassis.zip",platform:"IQ2",language:"cpp"},{projectName:"Split Arcade",description:"The Left up/down Controller Axis (A) will drive the robot forward and backwards. The Right left/right Controller Axis (C) will turn the robot left and right. The deadband variable prevents drift when the Controller's joystick is released.",iconUri:D.Uri.file("iqcpp.png"),id:"",tags:["Clawbot"],zipName:"cpp_iq2_vsc_split_arcade.zip",platform:"IQ2",language:"cpp"},{projectName:"Split Arcade",description:"The Left up/down Controller Axis (A) will drive the robot forward and backwards. The Right left/right Controller Axis (C) will turn the robot left and right. The deadband variable prevents drift when the Controller's joystick is released.",iconUri:D.Uri.file("iqcpp.png"),id:"",tags:["Control"],zipName:"cpp_iq2_vsc_thread_example.zip",platform:"IQ2",language:"cpp"}],Ms=[],kt=Ms.concat($s,ks,Rs,Vs,Ns,Ts);var es=O(require("os")),ho=require("fs"),Ls=require("path"),te=class{static async Show(e){if(console.log("resolve Webview"),te._isRunning)return this._panel.reveal(this._panel.viewColumn),{event:"isRunning",projectPath:"",projectIndex:-1,vexSettings:{extension:{version:"",json:1},project:{sdkVersion:"",creationDate:"",description:"",language:void 0,name:"",platform:void 0,slot:1}},zipName:""};te._extensionUri=e,te._isRunning=!0,te._projectOptionsList=kt;let t=W.window.activeTextEditor?W.window.activeTextEditor.viewColumn:void 0,o=W.window.createWebviewPanel(te.viewType,"Create New Project",t||W.ViewColumn.One);return console.log("resolve Webview"),await te.resolveWebviewView(o)}static async resolveWebviewView(e){console.log("resolve Webview"),this._panel=e;let t=!1;console.log("resolve Webview");let o={event:"create",projectPath:"",projectIndex:-1,vexSettings:{extension:{version:"",json:1},project:{sdkVersion:"",creationDate:"",description:"",language:void 0,name:"",platform:void 0,slot:1}},zipName:""};for(e.webview.options={enableScripts:!0,localResourceRoots:[W.Uri.joinPath(te._extensionUri,"resources","icons"),W.Uri.joinPath(te._extensionUri,"resources","webviews"),W.Uri.joinPath(te._extensionUri,"dist","webviews","views"),W.Uri.joinPath(te._extensionUri,"node_modules","@vscode","webview-ui-toolkit","dist"),W.Uri.joinPath(te._extensionUri,"node_modules","@vscode","codicons","dist"),W.Uri.joinPath(te._extensionUri,"resources","webviews","libs")]},e.webview.html=te._getHtmlForWebview(e.webview),e.webview.onDidReceiveMessage(s=>{if(console.log("Provider Recieved",s),!!s)switch(s.type){case"cancelBtn":{te._isRunning=!1,o.event="cancel",o.projectIndex=-1,o.zipName="",o.vexSettings=void 0,e.dispose();break}case"browseBtn":{console.log("browse btn clicked");let r={defaultUri:W.Uri.file(W.workspace.getConfiguration().get(i.Extension.Settings.projectHomeID,W.ConfigurationTarget.Global).toString()),canSelectFolders:!0,canSelectFiles:!1,canSelectMany:!1};W.window.showOpenDialog(r).then(n=>{if(!n){console.log("undefined file uri");return}console.log(n[0]),this._panel.webview.postMessage({type:s.type,path:n[0].fsPath})});break}case"updateAndCheckFolderListAtPathFinal":case"updateAndCheckFolderListAtPath":case"updateFolderListAtPath":{if(!(0,ho.existsSync)(s.path)){this._panel.webview.postMessage({type:s.type,paths:[]});break}console.log("Updated Folder List",s),W.workspace.fs.readDirectory(W.Uri.file(s.path)).then(a=>{let r=[];console.log("Folder List",a),a.forEach(n=>{n[1]===W.FileType.Directory&&r.push(n[0])}),console.log("Folder String List",r),this._panel.webview.postMessage({type:s.type,paths:r}),console.log("Updated Folder List Finished ",s)});break}case"createProject":{let a=te._languageOptionsList[s.simple_project_settings.language_index].language,r=te._platformOptionsList[s.simple_project_settings.platform_index].platform,n=te._projectOptionsList.filter(d=>d.language===a&&d.platform===r?1:0),c,l;a==="cpp"?c={extension:{version:i.Extension.version(),json:1},project:{name:s.simple_project_settings.name,description:s.simple_project_settings.description,creationDate:i.Utils.getDateString(),platform:n[s.simple_project_settings.project_index].platform,language:n[s.simple_project_settings.project_index].language,slot:1,sdkVersion:"",cpp:{includePath:[]}}}:a==="python"&&(c={extension:{version:i.Extension.version(),json:1},project:{name:s.simple_project_settings.name,description:s.simple_project_settings.description,creationDate:i.Utils.getDateString(),platform:n[s.simple_project_settings.project_index].platform,language:n[s.simple_project_settings.project_index].language,slot:1,sdkVersion:"",python:{main:"src/main.py"}}}),o.event="create",o.projectPath=W.Uri.file(s.simple_project_settings.projectPath).fsPath,o.projectIndex=s.simple_project_settings.project_index,o.zipName=n[s.simple_project_settings.project_index].zipName,o.vexSettings=c,te._isRunning=!1,e.dispose();break}case"sdkOptions":{let a=te._platformOptionsList[s.platform_index].platform,r=te._languageOptionsList[s.language_index].language,n,c;switch(r){case"python":c=W.Uri.file(W.workspace.getConfiguration().get(i.Extension.Settings.sdkPythonHomeID,W.ConfigurationTarget.Global).toString());break;case"cpp":c=W.Uri.file(W.workspace.getConfiguration().get(i.Extension.Settings.sdkCPPHomeID,W.ConfigurationTarget.Global).toString());break}console.log("Language",r),n=async()=>i.Extension.ResourceManager.getSDKVersion(a,r,c),console.log("sdkOptions",s),n().then(l=>{let d="",v=[],V=JSON.parse(l.json);V.online.catalog.forEach(U=>{V.local.catalog.some(P=>U===P)?(console.log(U),v.push({version:U,type:"local"}),V.local.catalog=V.local.catalog.filter(P=>P!==U)):v.push({version:U,type:"online"})}),V.local.catalog.forEach(U=>{v.push({version:U,type:"local"})}),v.sort((U,P)=>U.version>P.version?-1:U.version<P.version?1:0),v.forEach(U=>{U.type==="online"?d+=`<vscode-option><div><span slot="start" class="codicon codicon-globe"></span>${U.version}</div></vscode-option>`:d+=`<vscode-option><div><span slot="start" class="codicon codicon-folder"></span>${U.version}</div></vscode-option>`}),console.log("optionsList",d),this._panel.webview.postMessage({type:s.type,sdkOptions:d})});break}case"projectHomePath":{let a=W.Uri.file(W.workspace.getConfiguration().get(i.Extension.Settings.projectHomeID,W.ConfigurationTarget.Global).toString());console.log("projectHomePath",a.fsPath),this._panel.webview.postMessage({type:s.type,projectHomePath:a.fsPath});break}case"getLanguageList":{let a=e.webview.asWebviewUri(W.Uri.joinPath(this._extensionUri,"resources","icons","python-logo.png")),r=e.webview.asWebviewUri(W.Uri.joinPath(this._extensionUri,"resources","icons","cpp-logo.png"));te._languageOptionsList=[{languageTitle:"Python",language:"python",iconUri:a,id:"0"},{languageTitle:"C/C++",language:"cpp",iconUri:r,id:"1"}];let n=Ct.getObjsFromOptionList(te._languageOptionsList);this._panel.webview.postMessage({type:s.type,html:Ct.html(n)});break}case"getPlatformList":{let a=e.webview.asWebviewUri(W.Uri.joinPath(this._extensionUri,"resources","icons","vexcodeEXP.png")),r=e.webview.asWebviewUri(W.Uri.joinPath(this._extensionUri,"resources","icons","vexcodeIQGEN2.png")),n=e.webview.asWebviewUri(W.Uri.joinPath(this._extensionUri,"resources","icons","vexcodeV5.png"));te._platformOptionsList=[{platformName:"IQ 2nd Generation",iconUri:r,id:"0",platform:"IQ2"},{platformName:"EXP",iconUri:a,id:"1",platform:"EXP"},{platformName:"V5",iconUri:n,id:"2",platform:"V5"}];let c=Pt.getObjsFromOptionList(te._platformOptionsList);this._panel.webview.postMessage({type:s.type,html:Pt.html(c)});break}case"getProjectList":{let a=e.webview.asWebviewUri(W.Uri.joinPath(this._extensionUri,"resources","icons","vexcodeEXP.png")),r=e.webview.asWebviewUri(W.Uri.joinPath(this._extensionUri,"resources","icons","vexcodeIQGEN2.png")),n=e.webview.asWebviewUri(W.Uri.joinPath(this._extensionUri,"resources","icons","vexcodeV5.png")),c=0;console.log(te._languageOptionsList[s.language_index].language,te._platformOptionsList[s.platform_index].platform);let l=kt.filter(v=>v.language===te._languageOptionsList[s.language_index].language&&v.platform===te._platformOptionsList[s.platform_index].platform?1:0);te._projectOptionsList=[],l.forEach(v=>{let V={description:v.description,iconUri:v.iconUri,language:v.language,platform:v.platform,projectName:v.projectName,tags:v.tags,zipName:v.zipName,id:c.toString()};if(c++,V.iconUri){let U=W.Uri.joinPath(this._extensionUri,"resources","icons",V.iconUri.fsPath);(0,ho.existsSync)(Ls.resolve(U.fsPath))?V.iconUri=e.webview.asWebviewUri(U):V.iconUri=void 0}v.iconUri===void 0&&(V.platform==="EXP"&&(V.iconUri=a),V.platform==="IQ2"&&(V.iconUri=r),V.platform==="V5"&&(V.iconUri=n)),te._projectOptionsList.push(V)});let d=mt.getObjsFromOptionList(te._projectOptionsList);this._panel.webview.postMessage({type:s.type,html:mt.html(d)});break}case"getProjectHtml":{let a=te._projectOptionsList.filter(n=>n.language===te._languageOptionsList[s.language_index].language&&n.platform===te._platformOptionsList[s.platform_index].platform?1:0),r=mt.getObjsFromOptionList([a[s.project_index]]);this._panel.webview.postMessage({type:s.type,html:r[0].html,language:te._languageOptionsList[s.language_index].language});break}case"getOSType":{this._panel.webview.postMessage({type:s.type,osType:es.type()});break}case"folderPath":{let a=W.workspace.getConfiguration().get(i.Extension.Settings.projectHomeID,W.ConfigurationTarget.Global).toString();this._panel.webview.postMessage({type:s.type,path:a})}}}),e.onDidDispose(()=>{te._isRunning&&(console.log("Disposed"),o.event="disposed"),t=!0,te._isRunning=!1});!t;)await new Promise(s=>setTimeout(s,500));return console.log("Create Project DONE"),o}static _getHtmlForWebview(e){let t=e.asWebviewUri(W.Uri.joinPath(this._extensionUri,"dist","webviews","views","newProject.js")),o=e.asWebviewUri(W.Uri.joinPath(this._extensionUri,"resources","webviews","libs","jquery","jquery.js")),s=e.asWebviewUri(W.Uri.joinPath(this._extensionUri,"resources","webviews","style","reset.css")),a=e.asWebviewUri(W.Uri.joinPath(this._extensionUri,"resources","webviews","style","vscode.css")),r=e.asWebviewUri(W.Uri.joinPath(this._extensionUri,"resources","webviews","style","main.css")),n=e.asWebviewUri(W.Uri.joinPath(this._extensionUri,"node_modules","@vscode","webview-ui-toolkit","dist","toolkit.js")),c=e.asWebviewUri(W.Uri.joinPath(this._extensionUri,"node_modules","@vscode","codicons","dist","codicon.css")),l=e.asWebviewUri(W.Uri.joinPath(this._extensionUri,"node_modules","@vscode","codicons","dist","codicon.svg")),d=Bs();return`<!DOCTYPE html>
			<html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <!--
                        Use a content security policy to only allow loading images from https or from our extension directory,
                        and only allow scripts that have a specific nonce.
                    -->
					<!--
                    <meta http-equiv="Content-Security-Policy" content="default-src 'none'; style-src ${e.cspSource}; script-src 'nonce-${d}';">
					--> 
					<meta name="viewport" content="width=device-width, initial-scale=1.0">

            
                    <link href="${s}" rel="stylesheet">
                    <link href="${r}"  rel="stylesheet">
					<link href="${r}"  rel="stylesheet">
					<link href="${c}"     rel="stylesheet">
					
                    <script nonce="${d}" src="${o}"><\/script>
					<script nonce="${d}" type="module" src="${n}"><\/script>
                    <script nonce="${d}" src="${t}"><\/script>


                    <title>Create new vex project</title>
                </head>
                <body>
					<div id="mainForm" class="main-section noselect">
						<div id="popUpWindow" class="main-popup-window">
							<section  class="strectch-row">
								<h2 id="contentTitle" class="h2-title">Create a New VEX Project</h2>
								<section  class="top-strectch-row">
								</section>
								<vscode-button id="cancelBtn" appearance="icon" aria-label="Close">
									<i class="btnIcon codicon codicon-close"></i>
								</vscode-button>							
							</section>

							<div class="component-container align-center">
								<h3 id="contentInstruction" class="instruction-text">Select a Project Platform</h3>
							</div>
							<div id="search">
								<section class="header-row">
									<vscode-text-field id="searchInput" placeHolder="Search">
										<span slot="start" class="codicon codicon-search"></span>
									</vscode-text-field>
								</section>
							</div>
							<div id="contentWindow"  class="component-container project-list">
							</div>
							<section  class="strectch-column">
							</section>
							<section  class="button-row">
								<section  class="button-row">
									<vscode-button id="createBtn" class="createBtn" appearance="primary"  aria-label="Create">
										Create
									</vscode-button>

								</section>
								<section  class="strectch-row">
								</section>
								<vscode-button id="backBtn" appearance="icon"  aria-label="Back">
								<i class="btnIcon codicon codicon-arrow-left"></i>
							</vscode-button>
							</section>
						</div>
					</div>
				</body>
			</html>`}},It=te;It.viewType="project.createNew",It._isRunning=!1;function Bs(){let f="",e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";for(let t=0;t<32;t++)f+=e.charAt(Math.floor(Math.random()*e.length));return f}var q=O(require("vscode"));var ts=O(require("os")),os=require("fs"),ve=class{static async Show(e,t){if(ve._isRunning){let a=q.window.activeTextEditor?q.window.activeTextEditor.viewColumn:void 0;return this._view.reveal(a||q.ViewColumn.One),{event:"isRunning",projectPath:"",vexSettings:{extension:{version:"",json:1},project:{sdkVersion:"",creationDate:"",description:"",language:void 0,name:"",platform:void 0,slot:1}}}}ve._isRunning=!0,ve._extensionUri=e;let o=q.window.activeTextEditor?q.window.activeTextEditor.viewColumn:void 0,s=q.window.createWebviewPanel(ve.viewType,ve._type,o||q.ViewColumn.One);return await ve.resolveWebviewView(s,t)}static async Reset(){ve._isRunning=!1,ve._eventDataRecieved=!0}static async resolveWebviewView(e,t){this._view=e;let o={event:"disposed",vexSettings:t,projectPath:""};for(e.webview.options={enableScripts:!0,localResourceRoots:[q.Uri.joinPath(ve._extensionUri,"resources","icons"),q.Uri.joinPath(ve._extensionUri,"resources","webviews"),q.Uri.joinPath(ve._extensionUri,"dist","webviews","views"),q.Uri.joinPath(ve._extensionUri,"node_modules","@vscode","webview-ui-toolkit","dist"),q.Uri.joinPath(ve._extensionUri,"node_modules","@vscode","codicons","dist"),q.Uri.joinPath(ve._extensionUri,"resources","webviews","libs"),q.Uri.joinPath(ve._extensionUri,"resources","webviews","style")]},e.webview.html=await ve._getHtmlForWebview(e.webview,t),e.webview.onDidReceiveMessage(s=>{switch(s.type){case"cancelBtn":{o.event="cancel",o.vexSettings=void 0,e.dispose();break}case"browseBtn":{console.log("browse btn clicked");let r={defaultUri:q.Uri.file(q.env.appHost),canSelectFolders:!0,canSelectFiles:!1,canSelectMany:!1};q.window.showOpenDialog(r).then(n=>{if(console.log(n[0]),n[0]===void 0){console.log("undefined file uri");return}this._view.webview.postMessage({type:s.type,path:n[0].fsPath})});break}case"createProject":{console.log(s.simple_project_settings),o.event="create",o.vexSettings.project.name=s.simple_project_settings.name,o.vexSettings.project.description=s.simple_project_settings.description,o.vexSettings.project.sdkVersion=s.simple_project_settings.sdkVersion,o.projectPath=q.Uri.joinPath(q.Uri.file(s.simple_project_settings.projectPath),t.project.name).fsPath,o.vexSettings.extension.version=i.Extension.version(),o.vexSettings.project.creationDate=new Date().toUTCString(),e.dispose();break}case"getOSType":{this._view.webview.postMessage({type:s.type,osType:ts.type()});break}case"updateAndCheckFolderListAtPathFinal":case"updateAndCheckFolderListAtPath":case"updateFolderListAtPath":{if(!(0,os.existsSync)(s.path)){this._view.webview.postMessage({type:s.type,paths:[]});break}console.log("Updated Folder List",s),q.workspace.fs.readDirectory(q.Uri.file(s.path)).then(a=>{let r=[];console.log("Folder List",a),a.forEach(n=>{n[1]===q.FileType.Directory&&r.push(n[0])}),console.log("Folder String List",r),this._view.webview.postMessage({type:s.type,paths:r}),console.log("Updated Folder List Finished ",s)});break}case"folderPath":{let a=q.workspace.getConfiguration().get(i.Extension.Settings.projectHomeID,q.ConfigurationTarget.Global).toString();this._view.webview.postMessage({type:s.type,path:a})}}}),e.onDidDispose(()=>{ve._eventDataRecieved=!0});!ve._eventDataRecieved;)await new Promise(s=>setTimeout(s,500));return ve._eventDataRecieved=!1,ve._isRunning=!1,o}static async _getHtmlForWebview(e,t){let o=e.asWebviewUri(q.Uri.joinPath(this._extensionUri,"dist","webviews","views","projectSettings.js")),s=e.asWebviewUri(q.Uri.joinPath(this._extensionUri,"resources","webviews","libs","jquery","jquery.js")),a=e.asWebviewUri(q.Uri.joinPath(this._extensionUri,"resources","webviews","style","reset.css")),r=e.asWebviewUri(q.Uri.joinPath(this._extensionUri,"resources","webviews","style","vscode.css")),n=e.asWebviewUri(q.Uri.joinPath(this._extensionUri,"resources","webviews","style","main.css")),c=e.asWebviewUri(q.Uri.joinPath(this._extensionUri,"node_modules","@vscode","webview-ui-toolkit","dist","toolkit.js")),l=e.asWebviewUri(q.Uri.joinPath(this._extensionUri,"node_modules","@vscode","codicons","dist","codicon.css")),d=q.Uri.file(q.workspace.getConfiguration().get(i.Extension.Settings.projectHomeID,q.ConfigurationTarget.Global).toString()),v=q.Uri.file(q.workspace.getConfiguration().get(i.Extension.Settings.sdkCPPHomeID,q.ConfigurationTarget.Global).toString()),V=q.Uri.file(q.workspace.getConfiguration().get(i.Extension.Settings.sdkPythonHomeID,q.ConfigurationTarget.Global).toString()),U=q.Uri.joinPath(d,t.project.name,"bin"),P;t.project.language==="python"&&(P=await i.Extension.ResourceManager.getSDKVersion(t.project.platform,t.project.language,V)),t.project.language==="cpp"&&(P=await i.Extension.ResourceManager.getSDKVersion(t.project.platform,t.project.language,v));let R=JSON.parse(P.json);console.log(R);let E=[],H="",k="";ve._type,k="Save",R.online.catalog.forEach(J=>{R.local.catalog.some(T=>J===T)?(console.log(J),J===t.project.sdkVersion?E.unshift({version:J,type:"local"}):E.push({version:J,type:"local"}),R.local.catalog=R.local.catalog.filter(T=>T!==J)):J===t.project.sdkVersion?E.unshift({version:J,type:"online"}):E.push({version:J,type:"online"})}),R.local.catalog.forEach(J=>{E.push({version:J,type:"local"})}),E.forEach(J=>{J.type==="online"?H+=`<vscode-option><div><span slot="start" class="codicon codicon-globe"></span>${J.version}</div></vscode-option>`:H+=`<vscode-option><div><span slot="start" class="codicon codicon-folder"></span>${J.version}</div></vscode-option>`});let y=Os();return`<!DOCTYPE html>
			<html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <!--
                        Use a content security policy to only allow loading images from https or from our extension directory,
                        and only allow scripts that have a specific nonce.
                    -->
					<!--
                    <meta http-equiv="Content-Security-Policy" content="default-src 'none'; style-src ${e.cspSource}; script-src 'nonce-${y}';">
					--> 
					<meta name="viewport" content="width=device-width, initial-scale=1.0">

            
                    <link href="${a}" rel="stylesheet">
                    <link href="${n}"  rel="stylesheet">
					<link href="${n}"  rel="stylesheet">
					<link href="${l}"     rel="stylesheet">
                    <script nonce="${y}" src="${s}"><\/script>
					<script nonce="${y}" type="module" src="${c}"><\/script>
                    <script nonce="${y}" src="${o}"><\/script>


                    <title>${ve._type}</title>
                </head>
                <body>
					<div id="mainForm" class="main-section noselect">
					<div id="popUpWindow" class="main-popup-window">
						<section  class="strectch-row">
							<h2 id="contentTitle" class="h2-title">VEX ${t.project.platform} Project ${ve._type}</h2>
							<section  class="strectch-row">
							</section>
							<vscode-button id="cancelBtn" appearance="icon" aria-label="Close">
								<i class="btnIcon codicon codicon-close"></i>
							</vscode-button>							
						</section>
						<div id="contentWindow"  class="component-container project-list">
						<section class="component-container">
						<div>Project Name</div>
						<vscode-text-field id="projectNameInput" class="custom-textfield" placeHolder="myProjectName" value="${t.project.name}"></vscode-text-field>
						<i id="projectName-infoText" > </i>
				
						</section>
						<section class="component-container"> 
							<div>Description</div>
							<vscode-text-area id="projectDescriptionInput" class="custom-textarea" placeHolder="Write your project description here . . ." value="${t.project.description}"></vscode-text-field>
					
						</section>
						<section class="component-container">
							<p>SDK Version</p>
							<vscode-dropdown position="below" id="sdkDD">
								${H}
							</vscode-dropdown>    
						</section>
						</div>
						<section  class="strectch-column">
						</section>
						<section  class="button-row">
							<section  class="button-row">
								<vscode-button id="createBtn" class="createBtn" appearance="primary"  aria-label="Create">
									${k}
								</vscode-button>

							</section>
							<section  class="strectch-row">
							</section>

						</section>
					</div>
					</div>
				</body>
			</html>`}},ze=ve;ze.viewType="project.createNew",ze._type="Settings",ze._isRunning=!1,ze._eventDataRecieved=!1;function Os(){let f="",e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";for(let t=0;t<32;t++)f+=e.charAt(Math.floor(Math.random()*e.length));return f}var Y=O(require("vscode"));var ss=O(require("os")),is=require("fs"),Pe=class{static get isRunning(){return Pe._isRunning}static async Show(e,t,o=!0){if(Pe._isRunning)return this._panel.reveal(this._panel.viewColumn),{event:"isRunning",projectPath:"",vexSettings:{extension:{version:"",json:1},project:{sdkVersion:"",creationDate:"",description:"",language:void 0,name:"",platform:void 0,slot:1}}};Pe._isRunning=!0,Pe._showProjectPathBrowser=o,Pe._extensionUri=e;let s=Y.window.activeTextEditor?Y.window.activeTextEditor.viewColumn:void 0,a=Y.window.createWebviewPanel(Pe.viewType,Pe._type,s||Y.ViewColumn.One);return await Pe.resolveWebviewView(a,t)}static async resolveWebviewView(e,t){this._panel=e;let o=!1,s={event:"disposed",vexSettings:t,projectPath:""};for(e.webview.options={enableScripts:!0,localResourceRoots:[Y.Uri.joinPath(Pe._extensionUri,"resources","icons"),Y.Uri.joinPath(Pe._extensionUri,"resources","webviews"),Y.Uri.joinPath(Pe._extensionUri,"dist","webviews","views"),Y.Uri.joinPath(Pe._extensionUri,"node_modules","@vscode","webview-ui-toolkit","dist"),Y.Uri.joinPath(Pe._extensionUri,"node_modules","@vscode","codicons","dist"),Y.Uri.joinPath(Pe._extensionUri,"resources","webviews","libs"),Y.Uri.joinPath(Pe._extensionUri,"resources","webviews","style")]},e.webview.html=await Pe._getHtmlForWebview(e.webview,t),e.webview.onDidReceiveMessage(a=>{switch(a.type){case"cancelBtn":{s.event="cancel",s.vexSettings=void 0,e.dispose();break}case"browseBtn":{console.log("browse btn clicked");let n={defaultUri:Y.Uri.file(Y.env.appHost),canSelectFolders:!0,canSelectFiles:!1,canSelectMany:!1};Y.window.showOpenDialog(n).then(c=>{if(console.log(c[0]),c[0]===void 0){console.log("undefined file uri");return}this._panel.webview.postMessage({type:a.type,path:c[0].fsPath})});break}case"createProject":{console.log(a.simple_project_settings),s.event="create",s.vexSettings.project.name=a.simple_project_settings.name,s.vexSettings.project.description=a.simple_project_settings.description,s.vexSettings.project.sdkVersion=a.simple_project_settings.sdkVersion,s.projectPath=Y.Uri.joinPath(Y.Uri.file(a.simple_project_settings.projectPath),t.project.name).fsPath,s.vexSettings.extension.version=i.Extension.version(),s.vexSettings.project.creationDate=new Date().toUTCString(),e.dispose();break}case"getOSType":{this._panel.webview.postMessage({type:a.type,osType:ss.type()});break}case"updateAndCheckFolderListAtPathFinal":case"updateAndCheckFolderListAtPath":case"updateFolderListAtPath":{if(!(0,is.existsSync)(a.path)){this._panel.webview.postMessage({type:a.type,paths:[]});break}console.log("Updated Folder List",a),Y.workspace.fs.readDirectory(Y.Uri.file(a.path)).then(r=>{let n=[];console.log("Folder List",r),r.forEach(c=>{c[1]===Y.FileType.Directory&&n.push(c[0])}),console.log("Folder String List",n),this._panel.webview.postMessage({type:a.type,paths:n}),console.log("Updated Folder List Finished ",a)});break}case"folderPath":{let r=Y.workspace.getConfiguration().get(i.Extension.Settings.projectHomeID,Y.ConfigurationTarget.Global).toString();this._panel.webview.postMessage({type:a.type,path:r})}}}),e.onDidDispose(()=>{o=!0});!o;)await new Promise(a=>setTimeout(a,500));return o=!1,Pe._isRunning=!1,s}static async _getHtmlForWebview(e,t){let o=e.asWebviewUri(Y.Uri.joinPath(this._extensionUri,"dist","webviews","views","importProject.js")),s=e.asWebviewUri(Y.Uri.joinPath(this._extensionUri,"resources","webviews","libs","jquery","jquery.js")),a=e.asWebviewUri(Y.Uri.joinPath(this._extensionUri,"resources","webviews","style","reset.css")),r=e.asWebviewUri(Y.Uri.joinPath(this._extensionUri,"resources","webviews","style","vscode.css")),n=e.asWebviewUri(Y.Uri.joinPath(this._extensionUri,"resources","webviews","style","main.css")),c=e.asWebviewUri(Y.Uri.joinPath(this._extensionUri,"node_modules","@vscode","webview-ui-toolkit","dist","toolkit.js")),l=e.asWebviewUri(Y.Uri.joinPath(this._extensionUri,"node_modules","@vscode","codicons","dist","codicon.css")),d=Y.Uri.file(Y.workspace.getConfiguration().get(i.Extension.Settings.projectHomeID,Y.ConfigurationTarget.Global).toString()),v=Y.Uri.file(Y.workspace.getConfiguration().get(i.Extension.Settings.sdkCPPHomeID,Y.ConfigurationTarget.Global).toString()),V=Y.Uri.file(Y.workspace.getConfiguration().get(i.Extension.Settings.sdkPythonHomeID,Y.ConfigurationTarget.Global).toString()),U,P=t.project.platform===i.Platform.IQ2?"IQ 2nd Generation":t.project.platform;t.project.language==="python"&&(U=await i.Extension.ResourceManager.getSDKVersion(t.project.platform,t.project.language,V)),t.project.language==="cpp"&&(U=await i.Extension.ResourceManager.getSDKVersion(t.project.platform,t.project.language,v));let R="";Pe._type==="Import"&&(R="Import");let E=Fs(),H="";return Pe._showProjectPathBrowser&&(H=`
			<div>Location</div>
			<section class="project-path-row">
				<vscode-text-field id="projectHomePathInput" class="custom-textfield" placeHolder="Path to my project" value="${d.fsPath}"></vscode-text-field>
				<vscode-button id="browseProjectPathBtn" class="space-left"  appearance="secondary">Browse</vscode-button>
			</section>
			`),`<!DOCTYPE html>
			<html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <!--
                        Use a content security policy to only allow loading images from https or from our extension directory,
                        and only allow scripts that have a specific nonce.
                    -->
					<!--
                    <meta http-equiv="Content-Security-Policy" content="default-src 'none'; style-src ${e.cspSource}; script-src 'nonce-${E}';">
					--> 
					<meta name="viewport" content="width=device-width, initial-scale=1.0">

            
                    <link href="${a}" rel="stylesheet">
					<link href="${n}"  rel="stylesheet">
					<link href="${l}"     rel="stylesheet">
                    <script nonce="${E}" src="${s}"><\/script>
					<script nonce="${E}" type="module" src="${c}"><\/script>
                    <script nonce="${E}" src="${o}"><\/script>


                    <title>Import</title>
                </head>
                <body>
					<div id="mainForm" class="main-section noselect">
					<div id="popUpWindow" class="main-popup-window">
						<section  class="strectch-row">
							<h2 id="contentTitle" class="h2-title">VEX ${P} Project Import</h2>
							<section  class="strectch-row">
							</section>
							<vscode-button id="cancelBtn" appearance="icon" aria-label="Close">
								<i class="btnIcon codicon codicon-close"></i>
							</vscode-button>							
						</section>
						<div id="contentWindow"  class="component-container project-list">
						<section class="component-container">
						<div>Project Name</div>
						<vscode-text-field id="projectNameInput" class="custom-textfield" placeHolder="myProjectName" value="${t.project.name}"></vscode-text-field>
						<i id="projectName-infoText" > </i>
				
						</section>
						<section class="component-container"> 
							<div>Description</div>
							<vscode-text-area id="projectDescriptionInput" class="custom-textarea" placeHolder="Write your project description here . . ." value="${t.project.description}"></vscode-text-field>
					
						</section>
                        <section class="component-container">
						${H}
                        <div id="infoText-projecHomePath" ></div>
                        </section>						
                        </div>
						<section  class="strectch-column">
						</section>
						<section  class="button-row">
							<section  class="button-row">
								<vscode-button id="createBtn" class="createBtn" appearance="primary"  aria-label="Create">
									${R}
								</vscode-button>

							</section>
							<section  class="strectch-row">
							</section>

						</section>
					</div>
					</div>
				</body>
			</html>`}},ot=Pe;ot.viewType="project.createNew",ot._type="Import",ot._isRunning=!1;function Fs(){let f="",e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";for(let t=0;t<32;t++)f+=e.charAt(Math.floor(Math.random()*e.length));return f}var Xs=!1,ns=new Map([["280-7125",i.Platform.EXP],["276-4810",i.Platform.V5],["228-6480",i.Platform.IQ2]]),As=new Map([["Windows_NT_x32","toolchain_win32"],["Windows_NT_x64","toolchain_win32"],["Darwin_x32","toolchain_osx64"],["Darwin_x64","toolchain_osx64"],["Darwin_arm64","toolchain_osxarm64"],["Linux_x32","toolchain_linux64"],["Linux_x64","toolchain_linux64"]]),I=class{constructor(e,t){this._projectList=[];this._processEnv={};I._context=e,this.On("Log",t),I._logHandler("Starting")}async setup(){this._isBuilding=!1,this._cppIntellisenseTemplateUri=j.Uri.joinPath(I._context.extensionUri,"resources","templates","settings","c_cpp_properties.json"),this._pythonIntellisenseTemplateUri=j.Uri.joinPath(I._context.extensionUri,"resources","templates","settings","settings.json"),this._setOSSpecificProps(),await this._setDefaultUserSettings(),console.log(I._context.extensionUri),this.checkToolchain();let e=j.workspace.getConfiguration().get(i.Extension.Settings.projectHomeID,j.ConfigurationTarget.Global).toString();I._logHandler(`Project Home Path: ${e}`),I._logHandler(`Toolchain Home:    ${this._cppToolchainHomeUri.fsPath}`),I._logHandler(`Toolchain Path:    ${this._cppToolchainUri.fsPath}`),I._logHandler(`Sdk CPP    Home:   ${this._cppSdkHomeUri.fsPath}`),I._logHandler(`Sdk Python Home:   ${this._pythonSdkHomeUri.fsPath}`),this.searchForProjectsInWorkspace(),I._context.subscriptions.push(j.workspace.onDidChangeWorkspaceFolders(t=>{this._folderChange(t)}))}static getErrorMessageFromCode(e){return I.buildErrorCodesDetails.get(e)}async build(){return this._currentAction="Build",this._runMake()}async clean(){return this._currentAction="Clean",this._runMake()}async rebuild(){let e=await this.clean();return e!==0||(e=await this.build(),console.log(e)),e}async newProject(){return I._logHandler("New Project"),It.Show(I._context.extensionUri).then(async e=>{switch(console.log("New Project Response",e),e.event){case"cancel":case"disposed":console.log("Create Project Canceled",e),new Error("Create Project Canceled");break;case"isRunning":return"Create Project is Open Already";case"create":console.log("Create Project On Create",e),I._logHandler(`Template Zip:        ${e.zipName}`),I._logHandler(`New Project Path: ${e.projectPath}`),I._logHandler(`Project Settings: ${JSON.stringify(e.vexSettings)}`);let t=j.Uri.joinPath(j.Uri.file(e.projectPath),e.vexSettings.project.name),o=j.Uri.joinPath(I._context.extensionUri,"resources","templates","projects",e.vexSettings.project.platform,e.zipName),s=JSON.parse((await i.Extension.ResourceManager.getSDKVersion(e.vexSettings.project.platform,e.vexSettings.project.language,this._pythonSdkHomeUri)).json);s.online.latest!==""?e.vexSettings.project.sdkVersion=s.online.latest:e.vexSettings.project.sdkVersion=s.local.latest,ce.existsSync(t.fsPath)||await j.workspace.fs.createDirectory(t),await i.Utils.unzipFile(o,t);let a="";switch(e.vexSettings.project.language){case"python":a="py";break;case"cpp":a="cpp";let l=(await j.workspace.fs.readDirectory(t)).filter(v=>v[1]===j.FileType.File&&v[0].includes(".v5code"));l.length&&await j.workspace.fs.delete(j.Uri.joinPath(t,l[0][0]));let d=this.getMakeEnvFile(t);if(d<"2022_06_26_01"||d===""){let v=j.Uri.joinPath(t,"vex","mkenv.mk");await j.workspace.fs.delete(v,{recursive:!1,useTrash:!1});let V=j.Uri.joinPath(I._context.extensionUri,"resources","templates","mk",e.vexSettings.project.platform,"mkenv_2022_06_26_01.mk");await j.workspace.fs.copy(V,v,{overwrite:!0})}break}let r=j.Uri.joinPath(t,"src",`main.${a}`),n=ce.readFileSync(r.fsPath,"utf8");ce.writeFileSync(r.fsPath,this._expandCommentHeaderData(n,r,e.vexSettings)),await Qe.writeProjectSettings(e.vexSettings,t),await this._createOrModifyGitIgnoreFile(t,e.vexSettings),await this._downloadSdkIfNotLocal(e.vexSettings),j.commands.executeCommand("vscode.openFolder",t);break}})}async importProject(){if(ot.isRunning){await ot.Show(I._context.extensionUri,void 0);return}let e=j.workspace.getConfiguration().get(i.Extension.Settings.projectHomeID,j.ConfigurationTarget.Global),t=j.Uri.file(e.toString()),o={title:"Import Project",defaultUri:t,canSelectFolders:!1,canSelectFiles:!0,canSelectMany:!1,filters:{vexcode:I.importExtensions}},s=await j.window.showOpenDialog(o);if(console.log(s),!s?.length)return"No File Selected";let a=s[0],r=j.Uri.file(je.dirname(a.fsPath)),n=je.basename(a.fsPath).split(".")[1];if(!ce.existsSync(a.fsPath))throw new Error("Project file does not exist");if(n==="zip"){let P=je.basename(a.fsPath,".zip"),R=j.Uri.joinPath(I._context.extensionUri,"temp",P);await i.Utils.unzipFile(a,R),(await j.workspace.fs.readDirectory(R)).forEach(E=>{if(E[1]===j.FileType.File){let H=E[0].split(".")[1],k=E[0]==="zip";I.importExtensions.includes(H)&&!k&&(a=j.Uri.joinPath(R,E[0]),n=H)}})}let c=[void 0,""],l=!1,d=!0;switch(n){case"v5code":c[0]=this._v5code2ProjectSettings(a),c[1]="",d=!1;break;case"v5cpp":c=this._v5cppToProjectSettings(a);break;case"v5python":c=this._v5pythonToProjectSettings(a);break;case"iqcpp":c=this._iq2cppToProjectSettings(a);break;case"iqpython":c=this._iq2pythonToProjectSettings(a);break;case"expcpp":c=this._expcppToProjectSettings(a);break;case"exppython":c=this._exppythonToProjectSettings(a);break;default:throw new Error(`Project ${je.basename(a.fsPath)}, not supported! `)}let v=await ot.Show(I._context.extensionUri,c[0],d);if(v.event!=="create")return v.event;let V=j.Uri.file(je.dirname(a.fsPath)),U=j.Uri.file(v.projectPath);if(n.includes("code")){let P=JSON.parse((await i.Extension.ResourceManager.getSDKVersion(v.vexSettings.project.platform,v.vexSettings.project.language,this._cppSdkHomeUri)).json);P.online.latest!==""?v.vexSettings.project.sdkVersion=P.online.latest:v.vexSettings.project.sdkVersion=P.local.latest,U=V;let R=this.getMakeEnvFile(U);if(R<"2022_06_26_01"||R===""){let H=j.Uri.joinPath(U,"vex","mkenv.mk");await j.workspace.fs.delete(H,{recursive:!1,useTrash:!1});let k=j.Uri.joinPath(I._context.extensionUri,"resources","templates","mk",v.vexSettings.project.platform,"mkenv_2022_06_26_01.mk");await j.workspace.fs.copy(k,H,{overwrite:!0})}(await j.workspace.fs.readDirectory(U)).forEach(H=>{H[1]===j.FileType.File&&H[0].includes("compile_commands.json")&&ce.rmSync(j.Uri.joinPath(U,H[0]).fsPath,{force:!0}),H[1]===j.FileType.Directory&&H[0].includes("build")&&ce.rmSync(j.Uri.joinPath(U,H[0]).fsPath,{recursive:!0,force:!0})})}else if(n.includes("python")){let P=JSON.parse((await i.Extension.ResourceManager.getSDKVersion(v.vexSettings.project.platform,v.vexSettings.project.language,this._pythonSdkHomeUri)).json);P.online.latest!==""?v.vexSettings.project.sdkVersion=P.online.latest:v.vexSettings.project.sdkVersion=P.local.latest;let R=j.Uri.joinPath(I._context.extensionUri,"resources","templates","projects",v.vexSettings.project.platform,`py_${v.vexSettings.project.platform.toLowerCase()}_vsc_empty.zip`);console.log("Unzip Result: ",await i.Utils.unzipFile(R,U));let E=j.Uri.joinPath(j.Uri.file(v.projectPath),"src","main.py");await j.workspace.fs.delete(E),await j.workspace.fs.writeFile(E,new Ee.TextEncoder().encode(c[1]))}else if(n.includes("cpp")){I._logHandler("Get SDK Info");let P=JSON.parse((await i.Extension.ResourceManager.getSDKVersion(v.vexSettings.project.platform,v.vexSettings.project.language,this._cppSdkHomeUri)).json);P.online.latest!==""?v.vexSettings.project.sdkVersion=P.online.latest:v.vexSettings.project.sdkVersion=P.local.latest,I._logHandler("Unzip empty project");let R=j.Uri.joinPath(I._context.extensionUri,"resources","templates","projects",v.vexSettings.project.platform,`cpp_${v.vexSettings.project.platform.toLowerCase()}_vsc_empty.zip`);await i.Utils.unzipFile(R,U),I._logHandler("Delete template main.cpp");let E=j.Uri.joinPath(j.Uri.file(v.projectPath),"src","main.cpp");await j.workspace.fs.delete(E),I._logHandler("Write project text content to main.cpp"),await j.workspace.fs.writeFile(E,new Ee.TextEncoder().encode(c[1]))}await Qe.writeProjectSettings(v.vexSettings,U),await this._createOrModifyGitIgnoreFile(U,v.vexSettings),await this._downloadSdkIfNotLocal(v.vexSettings),await j.commands.executeCommand("vscode.openFolder",U)}async showSettingsUI(){if(!this._selectedProject)throw new Error("No Project Selected");let e=this._selectedProject.lastProjectSettingsWrite;try{this._selectedProject.readProjectSettings()}catch(r){I._logHandler(`Invalid Project Settings: Project ${this._selectedProject.name} @ ${this._selectedProject.settingsFileUri.fsPath}`),I._logHandler(`Error: ${r.message}`),I._logHandler(""),I._logHandler("Trying to recreate . . . "),j.window.showWarningMessage(`Invalid Project Settings: Project ${this._selectedProject.name}, Recovering Settings`)}let t=await ze.Show(I._context.extensionUri,e);if(t.event!=="create")return;let o=this.getSDKHomeUriFromLanguage(t.vexSettings.project.language);if(!o)throw new Error(`Invalid Language: ${t.vexSettings.project.language}`);let s=await i.Extension.ResourceManager.getSDKVersion(t.vexSettings.project.platform,t.vexSettings.project.language,o);JSON.parse(s.json).local.catalog.includes(t.vexSettings.project.sdkVersion)||await i.Extension.ResourceManager.downloadSDK(t.vexSettings.project.platform,t.vexSettings.project.language,t.vexSettings.project.sdkVersion,o),await this._selectedProject.writeProjectSettings(t.vexSettings),this._updateProjectIntellesense(this._selectedProject)}On(e,t){switch(e){case"Build-Data":this._buildDataCB=t;break;case"Build-Errors":this._buildErrorCB=t;break;case"Build-Exit":this._buildExitCB=t;break;case"Log":I._logCB=t;break}}get projectList(){return this._projectList}get selectedProject(){return this._selectedProject}set selectedProject(e){this.projectList.includes(e)&&(j.commands.executeCommand("setContext",`${i.Extension.name}.vexProjectSettingsFolderArr`,[]).then(()=>{j.commands.executeCommand("setContext",`${i.Extension.name}.vexProjectSettingsFolderArr`,[this._selectedProject.settingsFileUri])}),I._logHandler(`Selected Project: ${e.name}`),this._selectedProject=e,this._updateProjectIntellesense(this._selectedProject))}get isBuilding(){return this._isBuilding}getMakeEnvFile(e){let t=j.Uri.joinPath(e,"vex","mkenv.mk"),o=new Ee.TextDecoder().decode(ce.readFileSync(t.fsPath)),s=new RegExp(/(?<=\s*VEXcode\s*mkenv.mk\s*)\d{4}_\d{2}_\d{2}_\d{2}/);return s.test(o)?s.exec(o)[0]:""}async checkCppSdk(e){I._logHandler("Checking for latest SDK-------------");let t=e.readProjectSettings(),o=await i.Extension.ResourceManager.getSDKVersion(t.project.platform,t.project.language,this._cppSdkHomeUri);I._logHandler("SDK Versions Recieved");let s=JSON.parse(o.json),a=s.online.latest!=="",r=s.local.latest!=="";s.online.catalog.forEach(v=>{I._logHandler(`Online SDK: ${v}`)}),s.local.catalog.forEach(v=>{I._logHandler(`Local SDK : ${v}`)});let n="";if(a||r)if(t.project.sdkVersion==="")n=`Project ${e.name}: No SDK selected in project settings, would you like project settings?`;else{if(!s.local.catalog.includes(t.project.sdkVersion)&&t.project.sdkVersion===s.online.latest&&a)return n=`Project ${e.name}: SDK ${t.project.sdkVersion} does not exist, Downloading SDK ${s.online.latest} `,I._logHandler(`SDK Check Result: ${n}`),await this._downloadSdkIfNotLocal(e.readProjectSettings()),n;if(!s.local.catalog.includes(s.online.latest)&&a&&s.local.latest<t.project.sdkVersion)n=`Project ${e.name}: New SDK ${s.online.latest} available online, would you like to update project settings?`;else if(s.local.latest>t.project.sdkVersion)n=`Project ${e.name}: New SDK ${s.local.latest} available locally, would you like to update project settings?`;else if(!s.local.catalog.includes(t.project.sdkVersion)&&a)n=`Project ${e.name}: SDK ${t.project.sdkVersion} does not exist, New SDK ${s.online.latest} available online, would you like to update project settings?`;else if(!s.local.catalog.includes(t.project.sdkVersion)&&!a)n=`Project ${e.name}: SDK ${t.project.sdkVersion} does not exist, New SDK ${s.local.latest} available locally, would you like to update project settings?`;else return I._logHandler(`SDK Found @: ${this._cppSdkHomeUri.fsPath} ver:${t.project.sdkVersion}`),I._logHandler("SDK - Up To Date"),"SDK up to date"}else throw new Error("No Internet connection and no sdk availiable at current home directory");I._logHandler(`SDK Check Result: ${n}`);let c=await j.window.showInformationMessage(n,"Settings","Cancel");switch(I._logHandler(`Project Settings Popup Click: ${c}`),c){case"Settings":break;case"Cancel":throw new Error("Cancel Clicked");case void 0:throw new Error("Cancel Clicked or Timedout");default:break}let l=await ze.Show(I._context.extensionUri,t),d=l.vexSettings;switch(l.event){case"isRunning":throw new Error("Create Project is Open Already");case"cancel":case"disposed":throw new Error("Cancel Clicked");case"create":await e.writeProjectSettings(d),await this._downloadSdkIfNotLocal(d);break}}async _createOrModifyGitIgnoreFile(e,t){let s=(await j.workspace.fs.readDirectory(e)).filter(a=>a[0].includes(".gitignore")&&a[1]===j.FileType.File);if(s.length){console.log(s[0]);let a=j.Uri.joinPath(e,s[0][0]),r=ce.readFileSync(a.fsPath),n=new Ee.TextDecoder().decode(r),c=new RegExp(/(\\|\/|\s*|).vscode\s*/gi);c.test(n)&&(console.log(c.exec(n)),n=n.replace(c,""),ce.writeFileSync(a.fsPath,n,{encoding:"utf-8"}))}else{let a=j.Uri.joinPath(e,".gitignore"),r="";t.project.language===i.Language.cpp&&(r+=`/bin
`,r+=`/build
`,r+=`compile_commands.json
`),ce.writeFileSync(a.fsPath,r,{encoding:"utf-8"})}}_updateProjectIntellesense(e){switch(e.language){case"python":e.updateIntellesenseJSON(this._pythonIntellisenseTemplateUri);break;case"cpp":e.updateIntellesenseJSON(this._cppIntellisenseTemplateUri);break}}async _downloadSdkIfNotLocal(e){let t=this.getSDKHomeUriFromLanguage(e.project.language);if(!t)throw new Error(`Invalid Language: ${e.project.language}`);let o=await i.Extension.ResourceManager.getSDKVersion(e.project.platform,e.project.language,t);if(!JSON.parse(o.json).local.catalog.includes(e.project.sdkVersion)){let a=await i.Extension.ResourceManager.downloadSDK(e.project.platform,e.project.language,e.project.sdkVersion,t);if(a.statusCode===200)I._logHandler("Download SDK Finish");else throw new Error(`Download Error - StatusCode:${a.statusCode} Details:${a.details}`)}}async checkPythonSdk(e){I._logHandler("Checking for latest Stubs-------------");let t=e.readProjectSettings(),o=await i.Extension.ResourceManager.getSDKVersion(t.project.platform,t.project.language,this._pythonSdkHomeUri);I._logHandler("Stubs Versions Recieved");let s=JSON.parse(o.json),a=s.online.latest!=="",r=s.local.latest!=="";s.online.catalog.forEach(v=>{I._logHandler(`Online Stubs: ${v}`)}),s.local.catalog.forEach(v=>{I._logHandler(`Local Stubs : ${v}`)});let n="";if(a||r)if(t.project.sdkVersion==="")n=`Project ${e.name}: No Stubs selected in project settings, would you like project settings?`;else{if(!s.local.catalog.includes(t.project.sdkVersion)&&t.project.sdkVersion===s.online.latest&&a)return n=`Project ${e.name}: Sdk ${t.project.sdkVersion} does not exist, Downloading SDK ${s.online.latest} `,I._logHandler(`SDK Check Result: ${n}`),await this._downloadSdkIfNotLocal(e.readProjectSettings()),n;if(!s.local.catalog.includes(s.online.latest)&&a&&s.local.latest<t.project.sdkVersion)n=`Project ${e.name}: New Sdk ${s.online.latest} available online, would you like to update project settings?`;else if(s.local.latest>t.project.sdkVersion)n=`Project ${e.name}: New Sdk ${s.local.latest} available locally, would you like to update project settings?`;else if(!s.local.catalog.includes(t.project.sdkVersion)&&a)n=`Project ${e.name}: Sdk ${t.project.sdkVersion} does not exist, New SDK ${s.online.latest} available online, would you like to update project settings?`;else if(!s.local.catalog.includes(t.project.sdkVersion)&&!a)n=`Project ${e.name}: Sdk ${t.project.sdkVersion} does not exist, New SDK ${s.local.latest} available locally, would you like to update project settings?`;else return I._logHandler(`Stubs Found @: ${this._pythonSdkHomeUri.fsPath} ver:${t.project.sdkVersion}`),I._logHandler("Stubs - Up To Date"),"SDK up to date"}else throw new Error("No Internet connection and no Stubs availiable at current home directory");I._logHandler(`SDK Check Result: ${n}`);let c=await j.window.showInformationMessage(n,"Settings","Cancel");switch(I._logHandler(`Project Settings Popup Click: ${c}`),c){case"Settings":break;case"Cancel":throw new Error("Cancel Clicked");case void 0:throw new Error("Cancel Clicked or Timedout");default:break}let l=await ze.Show(I._context.extensionUri,t),d=l.vexSettings;switch(l.event){case"isRunning":throw new Error("Create Project is Open Already");case"cancel":case"disposed":throw new Error("Cancel Clicked");case"create":await e.writeProjectSettings(d);break}if(!s.local.catalog.includes(d.project.sdkVersion))if(I._logHandler("Downloading Stubs"),o=await i.Extension.ResourceManager.downloadSDK(d.project.platform,d.project.language,d.project.sdkVersion,this._pythonSdkHomeUri),o.statusCode===0)I._logHandler("Download Stubs Finish");else throw new Error(`Download Error - StatusCode:${o.statusCode} Details:${o.details}`)}checkToolchain(e=!1){I._logHandler("Checking if toolchain exist-------------"),!ce.existsSync(this._cppToolchainUri.fsPath)||e?(I._logHandler(`Toolchain Not Found @: ${this._cppToolchainUri.fsPath}`),I._logHandler(`Download Toolchain @: ${this._cppToolchainUri.fsPath}`),i.Extension.ResourceManager.downloadToolchain(this._cppToolchainHomeUri).then(t=>{I._logHandler(`Download Toolchain Finish: ${t.statusCode}`)})):I._logHandler(`Toolchain Found @: ${this._cppToolchainUri.fsPath}`)}async _runMake(){I._logHandler(`${this._selectedProject.name}: Save All`),await j.workspace.saveAll(),this._selectedProject.updateProjectSettings();let e=this._getBuildArgs(),t=this._setUpBuildEnv();if(this._isBuilding=!0,t!==0){let s=`${I.buildErrorCodesDetails.get(t)} - ErrorCode: ${t}`,a=`${I.buildErrorCodesDetails.get(t)}`;throw this._buildErrorHandler(t,s),this._buildExitHandler(t),this._isBuilding=!1,new Error(a)}Xs&&(this._buildDataHandler(`\r
Build Args`),this._buildDataHandler(""),this._buildDataHandler(`OS:           ${Se.type()}`),this._buildDataHandler(`Project Name: ${this.selectedProject.name}`),this._buildDataHandler(`Project Path: ${this.selectedProject.projectUri.fsPath}`),this._buildDataHandler(`SDK:          ${this._cppSdkPathUri.fsPath}`),this._buildDataHandler(`Toochain:     ${this._cppToolchainUri.fsPath}`),this._buildDataHandler(`Make:         ${this._makeUri.fsPath}`),this._buildDataHandler(`GCC:          ${this._gccUri.fsPath}`),this._buildDataHandler(`Clang:        ${this._clangUri.fsPath}`),this._buildDataHandler(`CWD:          ${this._envOptions.cwd}`),this._buildDataHandler(`Build Args:   ${e}`),this._buildDataHandler("")),I._logHandler(`${this._selectedProject.name}: Build Type: ${this._currentAction}`),I._logHandler(`${this._selectedProject.name}: Spawning Make Process`);let o=rs.spawn(this._makeUri.fsPath,e,{shell:!1,env:this._envOptions.env,cwd:this._envOptions.cwd});for(console.log("Process Started"),o.stdout.on("data",s=>{this._buildDataHandler(s)}),o.stderr.on("data",s=>{this._buildErrorHandler(I.BuildErrorCodes.COMPILER_ERROR,s)}),o.on("exit",s=>{this._buildExitHandler(s)});o.exitCode===null;)console.log(o.exitCode),await new Promise(s=>setTimeout(s,500));return this._isBuilding=!1,console.log(`EXIT CODE: ${o.exitCode}`),I._logHandler(`${this._selectedProject.name}: Make Process EXIT CODE: ${o.exitCode}`),o.exitCode}_setUpBuildEnv(){if(!this._selectedProject)return I.BuildErrorCodes.NO_PROJECT_SELECTED;I._logHandler(`${this._selectedProject.name}: Setup Build Env`);let e=this._selectedProject.readProjectSettings(),t=je.delimiter;if(this._makeUri=j.Uri.joinPath(this._cppToolchainUri,"tools","bin",this._makeName),this._gccUri=j.Uri.joinPath(this._cppToolchainUri,"gcc","bin"),this._clangUri=j.Uri.joinPath(this._cppToolchainUri,"clang","bin"),this._cppSdkPathUri=j.Uri.joinPath(this._cppSdkHomeUri,e.project.platform,e.project.sdkVersion),this._isBuilding)return I.BuildErrorCodes.BUILD_ACTION_IN_PROCESS;if(!j.workspace.workspaceFolders.length)return I.BuildErrorCodes.NO_WORKSPACE_OPEN;if(!this._selectedProject.projectUri)return I.BuildErrorCodes.NOT_DEFINED_PROJECT;if(!ce.existsSync(this._selectedProject.projectUri.fsPath))return console.log(this._selectedProject.projectUri.fsPath),I.BuildErrorCodes.PROJECT_PATH_DOES_NOT_EXIST;if(I._logHandler(`${this._selectedProject.name}: Project Path: ${this._selectedProject.projectUri.fsPath}`),!this._cppToolchainUri)return I.BuildErrorCodes.NOT_DEFINED_TOOLCHAIN;if(!ce.existsSync(this._cppToolchainHomeUri.fsPath))return I.BuildErrorCodes.TOOLCHAIN_DOES_NOT_EXIST;if(I._logHandler(`${this._selectedProject.name}: Toolchain Path: ${this._cppToolchainHomeUri.fsPath}`),!this._cppSdkPathUri&&e.project.language==="cpp"||e.project.sdkVersion==="")return I.BuildErrorCodes.NOT_DEFINED_SDK;if(!ce.existsSync(this._cppSdkPathUri.fsPath)&&e.project.language==="cpp")return I.BuildErrorCodes.MISSING_SDK;if(I._logHandler(`${this.selectedProject.name}: SDK NAME: ${e.project.sdkVersion} SDK Path: ${this._cppSdkPathUri.fsPath}`),!ce.existsSync(this._makeUri.fsPath))return I.BuildErrorCodes.MAKE_DOES_NOT_EXIST;I._logHandler(`${this._selectedProject.name}: Make Path: ${this._makeUri.fsPath}`),this._processEnv.PATH="";let o=new RegExp(/\$\{\s*workspaceFolder\s*\}/),s=new RegExp(/\$\{\s*workspaceFolderBasename\s*\}/),a=new RegExp(/\$\{\s*userHome\s*\}/),r=new RegExp(/\$\{\s*pathSeparator\s*\}/);return this._selectedProject?.includeEnvUris?.length&&this._selectedProject.includeEnvUris.forEach(n=>{let c=n;o.test(c)&&(c=c.replace(o,this._selectedProject.projectUri.fsPath)),s.test(c)&&(c=c.replace(s,je.basename(this._selectedProject.projectUri.fsPath))),a.test(c)&&(c=c.replace(a,this._userHomeUri.fsPath)),r.test(c)&&(c=c.replace(r,this._pathSeparator)),this._processEnv.PATH+=c+t}),this._processEnv.PATH+=this._cppSdkPathUri.fsPath+t,this._processEnv.PATH+=this._gccUri.fsPath+t,this._processEnv.PATH+=this._clangUri.fsPath+t,this._processEnv.PATH+=process.env.PATH,this._envOptions={cwd:this._selectedProject.projectUri.fsPath,env:this._processEnv},I._logHandler(`${this._selectedProject.name}: EnvOptions: ${JSON.stringify(this._envOptions)}`),I.BuildErrorCodes.NO_ERROR}_getBuildArgs(){let e=this._selectedProject.readProjectSettings().project,t=[];switch(this._currentAction){case"Build":t=[`P=${this._selectedProject.name.replace(" ","_")}`,`T=${j.Uri.joinPath(this._cppSdkHomeUri,e.platform,e.sdkVersion).fsPath}`,`OS=${Se.type()}`];break;case"Clean":t=["clean",`P=${this._selectedProject.name.replace(" ","_")}`,`T=${j.Uri.joinPath(this._cppSdkHomeUri,e.platform,e.sdkVersion).fsPath}`,`OS=${Se.type()}`];break;case"Rebuild":break}return I._logHandler(`${this._selectedProject.name}: Build Args: ${t}`),t}getSDKHomeUriFromLanguage(e){let t;switch(e){case"cpp":t=this._cppSdkHomeUri;break;case"python":t=this._pythonSdkHomeUri;break;default:}return t}_setOSSpecificProps(){let e=new Ee.TextDecoder;Se.type()==="Windows_NT"?(this._osEndLine=e.decode(new Uint8Array([13,10]).buffer),this._makeName="make.exe",this._compilerName="clang.exe",this._userHomeUri=j.Uri.file(process.env.USERPROFILE),this._pathSeparator="\\"):Se.type()==="Darwin"?(this._osEndLine=e.decode(new Uint8Array([13]).buffer),this._makeName="make",this._compilerName="clang",this._userHomeUri=j.Uri.file(process.env.HOME),this._pathSeparator="/"):(console.log(I._classType,new Error(`OS Not Recongnized: ${Se.type()}`)),I._logHandler(`OS Not Supported: ${Se.type()}`),this._osEndLine=e.decode(new Uint8Array([13]).buffer),this._makeName="make",this._compilerName="clang",this._userHomeUri=j.Uri.file(process.env.HOME),this._pathSeparator="/"),I._logHandler(`Platform: ${Se.type()}`),I._logHandler(`Arch: ${Se.arch()}`),I._logHandler(`OS Endline: ${new Ee.TextEncoder().encode(this._osEndLine)}`),I._logHandler(`Make  Type: ${this._makeName}`),I._logHandler(`Clang Type: ${this._compilerName}`)}async _setDefaultUserSettings(){I._logHandler("Setting Default User Settings");let e,t=j.workspace.getConfiguration().get(i.Extension.Settings.projectHomeID,j.ConfigurationTarget.Global).toString();console.log(I._classType,"Home Configuration",`${t}`),Se.type()==="Darwin"?this._userName=process.env.USER:Se.type()==="Linux"?this._userName=process.env.USER:this._userName=process.env.USERNAME,t===""&&(I._logHandler("Project Global Home Path Not Set"),Se.type()==="Windows_NT"?e=j.Uri.joinPath(j.Uri.file(process.env.USERPROFILE),"Documents","vex-vscode-projects"):Se.type()==="Darwin"?e=j.Uri.joinPath(j.Uri.file(process.env.HOME),"Documents","vex-vscode-projects"):Se.type()==="Linux"&&(e=j.Uri.joinPath(j.Uri.file(process.env.HOME),"Documents","vex-vscode-projects")),console.log("OS Home URI",e),t=e.fsPath,await j.workspace.getConfiguration().update(i.Extension.Settings.projectHomeID,e.fsPath,j.ConfigurationTarget.Global),ce.existsSync(e.path)||await j.workspace.fs.createDirectory(e));let o=`${Se.type()}_${Se.arch()}`?`${Se.type()}_${Se.arch()}`:"";this._cppToolchainHomeUri=j.Uri.joinPath(I._context.globalStorageUri,"tools","cpp"),this._cppToolchainUri=j.Uri.joinPath(this._cppToolchainHomeUri,As.get(o)),await j.workspace.getConfiguration().update(i.Extension.Settings.toolchainCPPPathID,this._cppToolchainUri.fsPath,j.ConfigurationTarget.Global),this._cppSdkHomeUri=j.Uri.joinPath(I._context.globalStorageUri,"sdk","cpp"),await j.workspace.getConfiguration().update(i.Extension.Settings.sdkCPPHomeID,this._cppSdkHomeUri.fsPath,j.ConfigurationTarget.Global),ce.existsSync(this._cppSdkHomeUri.fsPath)||await j.workspace.fs.createDirectory(this._cppSdkHomeUri),this._pythonSdkHomeUri=j.Uri.joinPath(I._context.globalStorageUri,"sdk","python"),await j.workspace.getConfiguration().update(i.Extension.Settings.sdkPythonHomeID,this._pythonSdkHomeUri.fsPath,j.ConfigurationTarget.Global),ce.existsSync(this._pythonSdkHomeUri.fsPath)||await j.workspace.fs.createDirectory(this._pythonSdkHomeUri)}_expandCommentHeaderData(e,t,o){let s=(v,V)=>{let U=V.length+(V.length-v.length);if(v==="")return V;let P=V.length>v.length?v.padEnd(U," "):v;return console.log("padHelper",P,V.length>v.length),P},a=je.basename(t.fsPath),r=s(a,"{file}"),n="{file}                ".slice(0,r.length);e=e.replace(n,r),r=s(o.project.creationDate,"{date}");let c="{date}                ".slice(0,r.length);e=e.replace(c,r),r=s(this._userName,"{author}");let l="{author}                                    ".slice(0,r.length);e=e.replace(l,r),r=s(`${o.project.platform} project`,"{description}");let d="{description}                ".slice(0,r.length);return e=e.replace(d,r),e}_v5code2ProjectSettings(e){let t=ce.readFileSync(e.fsPath),o=JSON.parse(new Ee.TextDecoder().decode(t)),s=ns.get(o.device.uid)?o.device.uid:void 0,a=je.dirname(e.fsPath),r=j.Uri.file(a),n=j.Uri.joinPath(r,"vex","mkenv.mk"),c=new Ee.TextDecoder().decode(ce.readFileSync(n.fsPath)),l=new RegExp(/(?<=PLATFORM\s*=\s*vex)(exp|v5|iq2)/),d=i.Platform.V5;l.test(c)?d=l.exec(c)[0].toUpperCase():s&&(d=ns.get(o.device.uid));let v={project:{name:o.title,slot:o.device.slot?o.device.slot:1,description:o.description?o.description:"",platform:d||i.Platform.V5,creationDate:"",language:o.language,sdkVersion:o.sdk,cpp:{includePath:[]}},extension:{version:i.Extension.version(),json:1}};if(!!v)return v}_v5cppToProjectSettings(e){let t=ce.readFileSync(e.fsPath),o=JSON.parse(new Ee.TextDecoder().decode(t)),s={project:{name:je.basename(e.fsPath,".v5cpp"),slot:o.slot?o.slot:1,description:"",platform:o.platform?o.platform:i.Platform.V5,creationDate:"",language:o.textLanguage,sdkVersion:o.sdkVersion,cpp:{includePath:[]}},extension:{version:i.Extension.version(),json:1}};if(!!s)return[s,o.textContent]}_iq2cppToProjectSettings(e){let t=ce.readFileSync(e.fsPath),o=JSON.parse(new Ee.TextDecoder().decode(t));if(o?.targetBrainGen!=="Second")throw Error(`${o.platform} ${o?.targetBrainGen} Gen Projects Not supported`);let s={project:{name:je.basename(e.fsPath,".iqcpp"),slot:o.slot?o.slot:1,description:"",platform:i.Platform.IQ2,creationDate:"",language:o.textLanguage,sdkVersion:o.sdkVersion,cpp:{includePath:[]}},extension:{version:i.Extension.version(),json:1}};if(!!s)return[s,o.textContent]}_expcppToProjectSettings(e){let t=ce.readFileSync(e.fsPath),o=JSON.parse(new Ee.TextDecoder().decode(t)),s={project:{name:je.basename(e.fsPath,".expcpp"),slot:o.slot?o.slot:1,description:"",platform:o.platform?o.platform:i.Platform.EXP,creationDate:"",language:o.textLanguage,sdkVersion:o.sdkVersion,cpp:{includePath:[]}},extension:{version:i.Extension.version(),json:1}};if(!!s)return[s,o.textContent]}_v5pythonToProjectSettings(e){let t=ce.readFileSync(e.fsPath),o;try{o=JSON.parse(new Ee.TextDecoder().decode(t))}catch(a){throw a}let s={project:{name:je.basename(e.fsPath,".v5python"),slot:o.slot?o.slot:1,description:"",platform:o.platform?o.platform:i.Platform.V5,creationDate:"",language:o.textLanguage,python:{main:j.Uri.joinPath(j.Uri.file("src"),"main.py").fsPath},sdkVersion:o.sdkVersion},extension:{version:i.Extension.version(),json:1}};if(!!s)return[s,o.textContent]}_iq2pythonToProjectSettings(e){let t=ce.readFileSync(e.fsPath),o=JSON.parse(new Ee.TextDecoder().decode(t));if(o?.targetBrainGen!=="Second")throw Error(`Import Failed: ${o.platform} ${o?.targetBrainGen} Gen Projects Not supported`);let s={project:{name:je.basename(e.fsPath,".iqpython"),slot:o.slot?o.slot:1,description:"",platform:i.Platform.IQ2,creationDate:"",language:o.textLanguage,python:{main:j.Uri.joinPath(j.Uri.file("src"),"main.py").fsPath},sdkVersion:o.sdkVersion},extension:{version:"",json:1}};if(!!s)return[s,o.textContent]}_exppythonToProjectSettings(e){let t=ce.readFileSync(e.fsPath),o=JSON.parse(new Ee.TextDecoder().decode(t)),s={project:{name:je.basename(e.fsPath,".exppython"),slot:o.slot?o.slot:1,description:"",platform:o.platform?o.platform:i.Platform.EXP,creationDate:"",language:o.textLanguage,sdkVersion:o.sdkVersion,python:{main:j.Uri.joinPath(j.Uri.file("src"),"main.py").fsPath}},extension:{version:i.Extension.version(),json:1}};if(!!s)return[s,o.textContent]}searchForProjectsInWorkspace(){I._logHandler(""),I._logHandler("Looking for Projects in workspace ----------------");let e=j.workspace.workspaceFolders?j.workspace.workspaceFolders:[];if(this._projectList=[],e.forEach(t=>{try{let o=j.Uri.joinPath(t.uri,".vscode",Qe.vexProjectSettingsName);if(!ce.existsSync(o.fsPath)){I._logHandler(`WS Folder is not a VEX Project: ${t}`);return}let s=Qe.readProjectSettings(o);if(s){let a=new Qe(t.uri,s);this._projectList.push(a),I._logHandler(`Project found: ${a.name}`)}}catch(o){console.log(I._classType,"Invalid Project Settings Error",t.name,t.uri,o),I._logHandler(`Error adding project: ${t.name}, ${o}`)}}),this._projectList.length){this._selectedProject=this._selectedProject?this._selectedProject:this._projectList[0],j.commands.executeCommand("setContext",`${i.Extension.name}.vexProjectSettingsFolderArr`,[]).then(()=>{j.commands.executeCommand("setContext",`${i.Extension.name}.vexProjectSettingsFolderArr`,[this._selectedProject.settingsFileUri])}),this._updateProjectIntellesense(this._selectedProject);let t=this._selectedProject.readProjectSettings();t.project.language==="python"?this.checkPythonSdk(this._selectedProject):t.project.language==="cpp"&&this.checkCppSdk(this._selectedProject)}else I._logHandler("No VEX Projects found in workspace")}_buildDataHandler(e){let t;console.log("Build Data CB",this._buildDataCB),typeof e=="string"?t=new Ee.TextEncoder().encode(e+this._osEndLine):t=e,this._buildDataCB&&this._buildDataCB(t)}_buildErrorHandler(e,t){let o;typeof t=="string"?o=new Ee.TextEncoder().encode(t+this._osEndLine):o=t,this._buildErrorCB&&this._buildErrorCB(e,o)}_buildExitHandler(e){this._buildExitCB&&this._buildExitCB(e,this._currentAction)}static _logHandler(e){let t=`${I._classType} ${e}`;I._logCB&&I._logCB(t)}_folderChange(e){console.log(I._classType,"Worspace Folder Change------------------------",e),this.searchForProjectsInWorkspace()}},Ne=I;Ne._classType="Project Manager: ",Ne.importExtensions=["v5code","v5cpp","iqcpp","expcpp","iqpython","v5python","exppython","zip"];(o=>{let f;(E=>(E[E.NO_ERROR=0]="NO_ERROR",E[E.NO_WORKSPACE_OPEN=-10]="NO_WORKSPACE_OPEN",E[E.MISSING_SDK=-11]="MISSING_SDK",E[E.NOT_DEFINED_PROJECT=-12]="NOT_DEFINED_PROJECT",E[E.NOT_DEFINED_TOOLCHAIN=-13]="NOT_DEFINED_TOOLCHAIN",E[E.NOT_DEFINED_SDK=-14]="NOT_DEFINED_SDK",E[E.PROJECT_PATH_DOES_NOT_EXIST=-15]="PROJECT_PATH_DOES_NOT_EXIST",E[E.BUILD_ACTION_IN_PROCESS=-16]="BUILD_ACTION_IN_PROCESS",E[E.MAKE_DOES_NOT_EXIST=-17]="MAKE_DOES_NOT_EXIST",E[E.TOOLCHAIN_DOES_NOT_EXIST=-18]="TOOLCHAIN_DOES_NOT_EXIST",E[E.NO_PROJECT_SELECTED=-19]="NO_PROJECT_SELECTED",E[E.COMPILER_ERROR=-20]="COMPILER_ERROR"))(f=o.BuildErrorCodes||(o.BuildErrorCodes={})),o.buildErrorCodesDetails=new Map([[-10,"No Workspace Folder is open"],[-11,"SDK not found"],[-12,"Project Folder not defined"],[-13,"Toolchain Folder not defined"],[-14,"SDK Path not defined"],[-15,"No Workspace Folder is open"],[-16,"Build action in progress"],[-17,"make.exe utillity doesn't not exist"],[-18,"toolchain does not exist"],[-19,"No Project Selected"],[-20,"Compiler Error"]]);let t=!0})(Ne||(Ne={}));var B=O(require("vscode")),xo=O(require("https")),$e=O(require("fs")),Oe=O(require("os")),Yt=O(require("unzipper")),cs=O(require("etl")),Ie=O(require("path")),ut=require("util"),Kt=require("child_process"),Ze=new Map([[100,"Continue"],[201,"Switching Protocols"],[202,"Processing"],[203,"Early Hints"],[200,"OK"],[201,"Created"],[203,"Non-Authoritative Information"],[204,"No Content"],[205,"Reset Content"],[206,"Partial Content"],[207,"Multi-Status"],[208,"Already Reported"],[226,"IM Used"],[300,"Multiple Choice"],[301,"Moved Permanently"],[302,"Found"],[303,"See Other"],[304,"Not Modified"],[305,"Use Proxy"],[306,"unused"],[307,"Temporary Redirect"],[308,"Permanent Redirect"],[400,"Bad Request"],[401,"Unauthorized"],[402,"Payment Required"],[403,"Forbidden"],[404,"Not Found"],[405,"Method Not Allowed"],[406,"Not Acceptable"],[407,"Proxy Authentication Required"],[408,"Request Timeout"],[409,"Conflict"],[410,"Gone"],[411,"Length Required"],[412,"Precondition Failed"],[413,"Payload To Large"],[414,"URI Too Long"],[415,"Unsupported Media Type"],[416,"Range Not Satisfiable"],[417,"Expectation Failed"],[418,"I'm a teapot"],[421,"Misdirected Request"],[422,"Unprocessable Entity"],[423,"Locked"],[424,"Failed Dependency"],[425,"Too Early"],[426,"Upgrade Required"],[428,"Precondition Required"],[429,"Too Many Requests"],[431,"Request Header Fields Too Large"],[451,"Unavailable For Lega Reasons"],[500,"Internal Server Error"],[501,"Not Implemented"],[502,"Bad Gateway"],[503,"Service Unavailable"],[504,"Gateway Timeout"],[505,"Http Version Not Supported"],[506,"Variant Also Negotiates"],[507,"Insufficient Storage"],[508,"Loop Detected"],[510,"Not Extended"],[511,"Network Authentication Required"]]),Qt="catalog.txt",ls="manifest.json",fo=f=>`https://content.vexrobotics.com/vexos/public/${f}/`,Hs=(f,e)=>`https://content.vexrobotics.com/vexos/public/${f}/vscode/sdk/${e}`,zs=(f,e)=>`https://content.vexrobotics.com/vexos/public/${f}/vscode/sdk/${e}/${ls}`,Ws=(f,e,t)=>`https://content.vexrobotics.com/vexos/public/${f}/toolchain/${e}/${t}`,Gs=(f,e)=>`https://content.vexrobotics.com/vexcode/drivers/${f}/${e}`,as=new Map([["Windows_NT_x32",["win","toolchain_win32.zip"]],["Windows_NT_x64",["win","toolchain_win32.zip"]],["Darwin_x32",["osx","toolchain_osx32.zip"]],["Darwin_x64",["osx","toolchain_osx64.zip"]],["Darwin_arm64",["osx","toolchain_osxarm64.zip"]],["Linux_x32",["linux","toolchain_linux64.zip"]],["Linux_x64",["linux","toolchain_linux64.zip"]]]),$=class{constructor(e,t){this.On("Log",t),$._logHandler("Start"),this._context=e,this._showUiInfo=!0,this._defaultSDKPath,this._defaultToolchainPath}async downloadToolChain(e){$._logHandler("Download Toolchain");let t,o=e||B.Uri.joinPath(this._context.globalStorageUri,"tools","cpp"),s=as.get(`${Oe.type()}_${Oe.arch()}`)?as.get(`${Oe.type()}_${Oe.arch()}`):[Oe.type(),`toolchain_${Oe.type()}${Oe.arch()}.zip`],a=Ws($.ContentFolders.vscode,s[0],s[1]),r=B.Uri.joinPath(o,s[1]),n=B.Uri.joinPath(o,Ie.basename(r.fsPath,".zip"));$._logHandler(`Info:${Oe.type()}_${Oe.arch()}, ${s}`);let c=async(l,d)=>{if($e.existsSync(n.fsPath)){$._logHandler(`Deleting old toolchain @ ${n.fsPath}`);let U=await B.workspace.fs.delete(n,{recursive:!0,useTrash:!1});$._logHandler(`Deleting Result: ${U}}`)}let v=await this._downloadHttpsFile(o,a,l,d);if(console.log(`${v}: ${Ze.get(v)}`),v!==200)return $._logHandler(`Download Error: ${v}`),B.window.showErrorMessage(`Download Error: ${v}`),v;let V=await $._unzipFile(r,void 0,l,d);return await B.workspace.fs.delete(r,{recursive:!0,useTrash:!1}),V?(B.window.showErrorMessage(`Unzip Error: ${v}`),v):(this.installToolchain(n),0)};if(this._showUiInfo){let l=B.window.withProgress({location:B.ProgressLocation.Notification,title:"",cancellable:!0},async(d,v)=>{t=c(d,v),await t})}else t=c()}async installToolchain(e,t,o){let s=a=>{$._logHandler(a),t&&t.report({message:a})};if(s("Installing Toolchain"),Oe.type()==="Darwin"||Oe.type()==="Linux"){console.log("toolchain URi",e);let a=B.Uri.joinPath(e,"clang","bin"),r=B.Uri.joinPath(e,"gcc","bin"),n=B.Uri.joinPath(e,"tools","bin");console.log("Path EXIST",$e.existsSync(a.fsPath),$e.existsSync(r.fsPath),$e.existsSync(n.fsPath)),(await B.workspace.fs.readDirectory(a)).forEach(c=>{$._logHandler(`File: ${c[0]}`),console.log(`File: ${c[0]}`),console.log(new ut.TextDecoder().decode((0,Kt.spawnSync)(`chmod +x ${c[0]}`,{env:process.env,cwd:a.fsPath,shell:!0}).stderr))}),(await B.workspace.fs.readDirectory(n)).forEach(c=>{$._logHandler(`File: ${c[0]}`),console.log(`File: ${c[0]}`),console.log(new ut.TextDecoder().decode((0,Kt.spawnSync)(`chmod +x ${c[0]}`,{env:process.env,cwd:n.fsPath,shell:!0}).stderr))}),(await B.workspace.fs.readDirectory(r)).forEach(c=>{$._logHandler(`File: ${c[0]}`),console.log(`File: ${c[0]}`),console.log(new ut.TextDecoder().decode((0,Kt.spawnSync)(`chmod +x ${c[0]}`,{env:process.env,cwd:r.fsPath,shell:!0}).stderr))})}else Oe.type();s("Installing Finished")}async downloadVEXosFile(e,t){$._logHandler("Download VEXOS");let o=t||B.Uri.joinPath(this._context.globalStorageUri,"vexos",e),s=fo(e),a,r=async(n,c)=>{let l=await this._downloadHttpsFile(o,`${fo(e)}${Qt}`);if(console.log(`${l}: ${Ze.get(l)}`),l!==200)return l;let d=B.Uri.joinPath(o,Qt),v=await B.workspace.fs.readFile(d),V=new ut.TextDecoder("UTF-8").decode(v);if(V+=".vexos",B.workspace.fs.delete(d,{recursive:!0,useTrash:!1}),l=await this._downloadHttpsFile(o,`${s}/${V}`,n,c),console.log(`${l}: ${Ze.get(l)}`),l!==200)return l};if(this._showUiInfo){let n=B.window.withProgress({location:B.ProgressLocation.Notification,title:"Downloading VEXOS",cancellable:!0},async(c,l)=>{a=r(c,l),await a})}else a=r();return a}async getLatestVEXosManifest(e,t){$._logHandler(""),$._logHandler("GET VEXOS Manifest");let o=e||$.ContentFolders.exp,s={local:{latest:"",catalog:[]},online:{latest:""}},a={version:"",build:"",bootloader:{version:"",file:""},ctrl:{radio:{version:"",file:""},cdc:{version:"",file:""}}},r={version:"",build:"",vision:{version:""},golden:!0},n="";switch(e){case $.ContentFolders.v5:return s.local=await this._getVEXOSVersionLocal(o,t),n=await this._getVEXOSManaifestLocal(o,t,s.local.latest),$._logHandler(`${s.local.latest} Manifest: ${n}`),JSON.parse(n);case $.ContentFolders.exp:case $.ContentFolders.iq2:return s.local=await this._getVEXOSVersionLocal(o,t),n=await this._getVEXOSManaifestLocal(o,t,s.local.latest),$._logHandler(`${s.local.latest} Manifest: ${n}`),JSON.parse(n);default:return JSON.parse("{}")}return $._logHandler(`Online: ${JSON.stringify(s.online)}`),$._logHandler(`Local : ${JSON.stringify(s.local)}`),s||{local:{latest:"",catalog:[]},online:{latest:""}}}async getVEXosVersions(e,t){$._logHandler(""),$._logHandler("GET VEXOS VERSIONS");let o=e||$.ContentFolders.exp,s={local:{latest:"",catalog:[]},online:{latest:""}};return s.online.latest=await this._getVEXOSVersionOnline(o),s.local=await this._getVEXOSVersionLocal(o,t),$._logHandler(`Online: ${JSON.stringify(s.online)}`),$._logHandler(`Local : ${JSON.stringify(s.local)}`),s||{local:{latest:"",catalog:[]},online:{latest:""}}}async downloadSDK(e,t,o,s){$._logHandler("Download SDK");let a=s?B.Uri.joinPath(s,e):B.Uri.joinPath(this._context.globalStorageUri,"sdk",t),r=Hs(e,t),n,c=async(l,d)=>{$._logHandler(`Platform: ${e}`),$._logHandler(`Version: ${o}`),$._logHandler(`Location: ${s}`);let v=o||(await this._getManifestVersionOnline(e,t)).latest,V=B.Uri.joinPath(a,`${v}.zip`),U=await this._downloadHttpsFile(a,`${r}/${v}.zip`,l,d);return console.log(`${U}: ${Ze.get(U)}`),U!==200?(B.window.showErrorMessage(`${U}: ${Ze.get(U)}`),await B.workspace.fs.delete(V,{recursive:!0,useTrash:!1}),U):await $._unzipFile(V,void 0,l,d)?(B.window.showErrorMessage(`Unzip Error: ${U}`),U):(await B.workspace.fs.delete(V,{recursive:!0,useTrash:!1}),$e.existsSync(B.Uri.joinPath(a,"__MACOSX").fsPath)&&await B.workspace.fs.delete(B.Uri.joinPath(a,"__MACOSX"),{recursive:!0,useTrash:!1}),U)};if(this._showUiInfo){let l=B.window.withProgress({location:B.ProgressLocation.Notification,title:"",cancellable:!0},async(d,v)=>{n=c(d,v),await n})}else n=c();return n}async getSDKVersions(e,t,o){$._logHandler("Get SDK Versions");let s=e||$.ContentFolders.exp,a={local:{latest:"",catalog:[]},online:{latest:"",catalog:[]}};return a.online=await this._getManifestVersionOnline(s,t),a.local=await this._getManifestVersionLocal(s,$.ManifestType.sdk,o),$._logHandler(`SDK Online: ${JSON.stringify(a.online)}`),$._logHandler(`SDK Local: ${JSON.stringify(a.local)}`),a||{local:{latest:"",catalog:[]},online:{latest:"",catalog:[]}}}async downloadDriverInstaller(e,t){$._logHandler("Download Driver Installer");let o=t?B.Uri.joinPath(t):B.Uri.joinPath(this._context.globalStorageUri,"drivers"),s=e||" ",a=Gs(s,"VEX Devices Driver Installer.exe"),r,n=async(c,l)=>{$._logHandler(`Location: ${o.fsPath}`);let d=B.Uri.joinPath(o,s),v=await this._downloadHttpsFile(o,`${a}`,c,l);return console.log(`${v}: ${Ze.get(v)}`),v!==200&&(B.window.showErrorMessage(`${v}: ${Ze.get(v)}`),await B.workspace.fs.delete(d,{recursive:!0,useTrash:!1})),v};if(this._showUiInfo){let c=B.window.withProgress({location:B.ProgressLocation.Notification,title:"",cancellable:!0},async(l,d)=>{r=n(l,d),await r})}else r=n();return r}async _getManifestVersionLocal(e,t,o){$._logHandler(`Get ${t} Manifest Versions Local`),$._logHandler(`Platform: ${e}`),$._logHandler(`Search Location: ${o.fsPath}`),console.log("Local Uri",o);let s=B.Uri.joinPath(this._context.extensionUri,"resources","build",t,e),a=o?B.Uri.joinPath(o,e):s,r=[];$e.existsSync(a.fsPath)&&(r=await B.workspace.fs.readDirectory(a));let n={latest:"",catalog:[]},c=r.filter(l=>l[0].includes(e)&&l[1]===B.FileType.Directory);return console.log("Local Filtered",r,c,e),c.forEach(l=>{n.catalog.push(l[0])}),n.catalog.sort($._sortSDKListCB),n.latest=n.catalog[0]?n.catalog[0]:"",n}async _getManifestVersionOnline(e,t){$._logHandler(`Get ${t} SDK Version Online`),$._logHandler(`Platform: ${e}`);let o=B.Uri.joinPath(this._context.extensionUri,"resources","build","sdk",t,e),s=B.Uri.joinPath(o,ls),a=zs(e,t),r={latest:"",catalog:[]},n=await this._readHttpsFile(a);return $._logHandler(`${n.httpsCode}: ${Ze.get(n.httpsCode)}`),n.httpsCode!==200?r:(r=JSON.parse(new ut.TextDecoder("UTF-8").decode(n.buf)),console.log(r),r.catalog.sort($._sortSDKListCB),r||{latest:"",catalog:[""]})}static _sortSDKListCB(e,t){var o=e.toUpperCase(),s=t.toUpperCase();return o>s?-1:o<s?1:0}async _getVEXOSManaifestLocal(e,t,o){$._logHandler(`VEXOS Platform: ${e}`),$._logHandler(`VEXOS Search Location: ${t.fsPath}`);let s=B.Uri.joinPath(t,e,o+".vexos"),a=async()=>{let n,c=!1;for($e.createReadStream(s.fsPath).on("error",l=>{console.log(l),c=!0}).pipe(Yt.Parse()).pipe(cs.map(async l=>{l.path.includes("manifest.json")?l.buffer().then(d=>{console.log(d),n=d,c=!0}):l.autodrain()}));!c;)await new Promise(l=>setTimeout(l,500));return n};return new ut.TextDecoder().decode(await a())}async _getVEXOSVersionLocal(e,t){$._logHandler(`VEXOS Platform: ${e}`),$._logHandler(`VEXOS Search Location: ${t.fsPath}`);let o=B.Uri.joinPath(this._context.extensionUri,"resources","vexos",e),s=t?B.Uri.joinPath(t,e):o,a=[];$e.existsSync(s.fsPath)&&(a=await B.workspace.fs.readDirectory(s));let r={latest:"",catalog:[]};return a.filter(c=>c[0].includes(e)&&c[0].includes(".vexos")&&c[1]===B.FileType.File).forEach(c=>{r.catalog.push(Ie.basename(c[0],".vexos"))}),r.catalog.sort($._sortVEXOSListCB),r.latest=r.catalog[0]?r.catalog[0]:"",r}async _getVEXOSVersionOnline(e){let t=B.Uri.joinPath(this._context.extensionUri,"resources","vexos",e),o=B.Uri.joinPath(t,Qt),s=fo(e),a=await this._readHttpsFile(`${s}${Qt}`);if(a.httpsCode!==200)return"";let r=new ut.TextDecoder("UTF-8").decode(a.buf);return r||""}static _sortVEXOSListCB(e,t){var o=e.toUpperCase(),s=t.toUpperCase();let a=o.split("_"),r=s.split("_"),n={major:Number(a[2]),minor:Number(a[3]),build:Number(a[4]),beta:Number(a[5])},c={major:Number(r[2]),minor:Number(r[3]),build:Number(r[4]),beta:Number(r[5])};return n.major>c.major?-1:n.major<c.major?1:n.minor>c.minor?-1:n.minor<c.minor?1:n.build>c.build?-1:n.build<c.build?1:n.beta>c.beta?c.beta===0?1:-1:n.beta<c.beta?n.beta===0?-1:1:0}static async _unzipFile(e,t,o,s){let a=t?t.fsPath:Ie.dirname(e.fsPath),r=B.Uri.joinPath(B.Uri.file(a),Ie.basename(e.fsPath,".zip")),n=Ie.basename(e.fsPath),c=!1,l=!1;console.log(`zip folder: ${r.fsPath}`),console.log(`File Uri DIR: ${Ie.dirname(e.fsPath)}`),console.log(`PathToUnzip: ${Ie.dirname(a)}`),$._logHandler(`Zip folder: ${r.fsPath}`),$._logHandler(`File Uri DIR: ${Ie.dirname(e.fsPath)}`),$._logHandler(`File Uri BASE: ${Ie.basename(e.fsPath)}`),$._logHandler(`PathToUnzip: ${Ie.dirname(a)}`);let d=P=>{console.log(P),o&&(o.report({message:P}),$._logHandler(`Unzip: ${P}`))};d(`${n}: Starting Unzip`),$e.createReadStream(`${e.fsPath}`).pipe(Yt.Extract({path:`${a}`})).on("close",()=>{console.log("Unzipper Close"),c=!0}).on("error",P=>{d(`${n}: Error - ${P}`),c=!0,l=!0});let V=`${n}: Unziping File`,U=V;for(;!c;)await new Promise(P=>setTimeout(P,500)),d(U),U+=" .",U===`${n}: Unziping File . . . .`&&(U=V);return d(`${n}: Unzip Finished`),await new Promise(P=>setTimeout(P,1e3)),l}async _downloadHttpsFile(e,t,o,s){$._logHandler("Https Download Start");let a=B.Uri.joinPath(e,Ie.basename(t));$._logHandler(`URL: ${t}`),$._logHandler(`Destination: ${a.fsPath}`),$e.existsSync(e.fsPath)||(console.log("Creating Directory",e),await B.workspace.fs.createDirectory(e));let r=$e.createWriteStream(a.fsPath),n=0,c=!1,l,d=new Date,v=E=>Number(new Date)-Number(E),V=0,U=new URL(t);console.log(U);let P={timeout:2e3,method:"GET",hostname:U.hostname,path:U.pathname},R=xo.get(P,function(E){console.log(E);let H=$._bytesToMBytes(Number(E.headers["content-length"]));E.on("data",k=>{l=E.statusCode;let y=$._bytesToMBytes(k.length);n+=y;let J=n/H*100;o!==void 0&&o.report({increment:y/H*100,message:`Downloading ${Ie.basename(t)}:(${n.toFixed(1)}MB/${H.toFixed(1)}MB) ${J.toFixed(1)}%`});let T=`Downloading ${Ie.basename(t)}:(${n.toFixed(2)}MB/${H.toFixed(2)}MB) ${J.toFixed(2)}%`,ee=`Downloading ${Ie.basename(t)}:(${n}MB/${H}MB) ${J.toFixed(2)}%`;V.toFixed(0)!==J.toFixed(0)&&(V=J,$._logHandler(`${ee}`)),l===200&&r.write(k)}),E.on("error",k=>{console.log(`Error ${k}`),c=!0,B.window.showErrorMessage("Download Failed"),$._logHandler(`Download Error: ${k}`)}),E.on("end",()=>{console.log("Response Recieved"),c=!0,this._showUiInfo&&(B.window.showInformationMessage("Download Complete"),$._logHandler("Download Complete"))})});for(R.on("error",E=>{R.destroy(),E.errno===-3008&&(l=408),console.log(l),c=!0}),s!==void 0&&s.onCancellationRequested(()=>{B.window.showErrorMessage("Download Canceled"),console.log("User canceled the long running operation"),c=!0,B.window.showErrorMessage("Download Canceled"),R.destroy(),r.destroy(),$e.rmSync(a.fsPath)});!c;)await new Promise(E=>setTimeout(E,100));return $._logHandler(`Https Download Result:${l}: ${Ze.get(l)}`),r.close(),l}async _readHttpsFile(e,t,o){$._logHandler("Https Read Start"),$._logHandler(`URL: ${e}`);let s=Buffer.alloc(0),a=0,r=!1,n,c=new Date,l=P=>Number(new Date)-Number(P),d=0,v=new URL(e);console.log(v);let V={timeout:2e3,method:"GET",hostname:v.hostname,path:v.pathname},U=xo.get(V,function(P){console.log(P);let R=$._bytesToMBytes(Number(P.headers["content-length"]));P.on("data",E=>{n=P.statusCode;let H=$._bytesToMBytes(E.length);a+=H;let k=a/R*100;t!==void 0&&t.report({increment:H/R*100,message:`Downloading ${Ie.basename(e)}:(${a.toFixed(1)}MB/${R.toFixed(1)}MB) ${k.toFixed(1)}%`});let y=`Downloading ${Ie.basename(e)}:(${a.toFixed(2)}MB/${R.toFixed(2)}MB) ${k.toFixed(2)}%`,J=`Downloading ${Ie.basename(e)}:(${a}MB/${R}MB) ${k.toFixed(2)}%`;d.toFixed(0)!==k.toFixed(0)&&(d=k,$._logHandler(`${J}`)),n===200&&(s=Buffer.concat([s,E],s.length+E.length))}),P.on("error",E=>{console.log(`Error ${E}`),r=!0,B.window.showErrorMessage("Download Failed"),$._logHandler(`Download Error: ${E}`)}),P.on("end",()=>{console.log("Response Recieved"),r=!0,this._showUiInfo&&(B.window.showInformationMessage("Download Complete"),$._logHandler("Download Complete"))})});for(U.on("error",P=>{U.destroy(),P.errno===-3008&&(n=408),console.log(n),r=!0}),o!==void 0&&o.onCancellationRequested(()=>{B.window.showErrorMessage("Download Canceled"),console.log("User canceled the long running operation"),r=!0,B.window.showErrorMessage("Download Canceled"),U.destroy()});!r;)await new Promise(P=>setTimeout(P,100));return $._logHandler(`Https Download Result:${n}: ${Ze.get(n)}`),{httpsCode:n,buf:s}}On(e,t){switch(e){case"Log":$._logCB=t;break}}static _logHandler(e){let t=`${$._classType} ${e}`;$._logCB&&$._logCB(t)}static _bytesToMBytes(e){return typeof e=="number"?e?e/1024/1024:0:e instanceof Buffer&&e.length?e.length/1024/1024:0}},gt=$;gt._classType="Resource Manager: ";(t=>{let f;(n=>(n.v5="V5",n.exp="EXP",n.iq2="IQ2",n.vscode="vscode"))(f=t.ContentFolders||(t.ContentFolders={}));let e;(a=>(a.sdk="sdk",a.stubs="stubs"))(e=t.ManifestType||(t.ManifestType={}))})(gt||(gt={}));var ge=O(require("vscode"));var ds=O(require("path")),st=class{constructor(e){this._deviceListButton=ge.window.createStatusBarItem(ge.StatusBarAlignment.Left,6),this._deviceListButton.command=st.listDevicesCmdId,this._deviceListButton.text="",this._deviceListButton.tooltip="List VEX Devices",this._selectSlotButton=ge.window.createStatusBarItem(ge.StatusBarAlignment.Left,5),this._selectSlotButton.command=st.slotCmdId,this._selectSlotButton.text="$(vex-slot) Slot 1",this._selectSlotButton.tooltip="Select Slot",this._buildButton=ge.window.createStatusBarItem(ge.StatusBarAlignment.Left,4),this._buildButton.command=st.buildCmdId,this._buildButton.text="$(vex-build)",this._buildButton.tooltip="Build Project",this._playButton=ge.window.createStatusBarItem(ge.StatusBarAlignment.Left,3),this._playButton.command=st.playCmdId,this._playButton.text="$(vex-play)",this._playButton.tooltip="Play User Program",this._stopButton=ge.window.createStatusBarItem(ge.StatusBarAlignment.Left,2),this._stopButton.command=st.stopCmdId,this._stopButton.text="$(vex-stop)",this._stopButton.tooltip="Stop User Program",this._selectProjectButton=ge.window.createStatusBarItem(ge.StatusBarAlignment.Left,1),this._selectProjectButton.command=st.selectProjectCmdId,this._selectProjectButton.text="No Project Selected",this._selectProjectButton.tooltip="Select Active Project",this._pythonFileButton=ge.window.createStatusBarItem(ge.StatusBarAlignment.Left,0),this._pythonFileButton.command=st.selectPythonCmdId,this._pythonFileButton.text=".py",this._pythonFileButton.tooltip="Select Python File"}async selectSlot(){let e="Select Slot",t=["$(vex-slot) Slot 1","$(vex-slot) Slot 2","$(vex-slot) Slot 3","$(vex-slot) Slot 4","$(vex-slot) Slot 5","$(vex-slot) Slot 6","$(vex-slot) Slot 7","$(vex-slot) Slot 8"],o=await ge.window.showQuickPick(t,{placeHolder:e,onDidSelectItem:()=>{}}),s=1;return o?s=Number(o.split(" ")[2]):s=Number(this._selectSlotButton.text.split(" ")[2]),this._selectSlotButton.text=`$(vex-slot) Slot ${s}`,s}async selectProject(e){let t="Select Project",o=[],s=1,a;e.searchForProjectsInWorkspace(),e.projectList.forEach(n=>{n.updateProjectSettings(),n.projectUri.fsPath===e.selectedProject.projectUri.fsPath?a=n:o.push({label:n.name,description:n.language,detail:n.projectUri.fsPath}),s++}),o.unshift({label:`$(star-full)${a.name}`,description:a.language,detail:a.projectUri.fsPath}),ge.window.showInputBox();let r=await ge.window.showQuickPick(o,{placeHolder:t,onDidSelectItem:()=>{},canPickMany:!1});if(!!r)return e.projectList.filter(n=>n.projectUri.fsPath===r.detail)[0]}async pickPythonFile(e){let t="Select Python File",o=[],s=1;e.selectedProject.updateProjectSettings();let a=new ge.RelativePattern(e.selectedProject.projectUri,"**/*.py"),r=new ge.RelativePattern(e.selectedProject.projectUri,"**/build/**");(await ge.workspace.findFiles(a,r)).forEach(c=>{let l={description:ge.workspace.asRelativePath(c,!1),label:`$(python-qp)${ds.basename(c.fsPath)}`};o.push(l)});let n=await ge.window.showQuickPick(o,{placeHolder:t,onDidSelectItem:()=>{},canPickMany:!1});if(!!n)return n}get buildBtn(){return this._buildButton}get playBtn(){return this._playButton}get stopBtn(){return this._stopButton}get deviceListBtn(){return this._deviceListButton}get selectSlotBtn(){return this._selectSlotButton}get selectProjectBtn(){return this._selectProjectButton}get selectPythonFileBtn(){return this._pythonFileButton}},Ce=st;Ce.playCmdId=`${i.Extension.name}.statusbar.play`,Ce.stopCmdId=`${i.Extension.name}.statusbar.stop`,Ce.buildCmdId=`${i.Extension.name}.statusbar.build`,Ce.listDevicesCmdId=`${i.Extension.name}.statusbar.listDevices`,Ce.slotCmdId=`${i.Extension.name}.statusbar.pickSlot`,Ce.selectProjectCmdId=`${i.Extension.name}.statusbar.pickProject`,Ce.selectPythonCmdId=`${i.Extension.name}.statusbar.pickPythonFile`;var We=O(require("fs")),Zt=O(require("os")),vt=O(require("vscode")),Z;(r=>{function f(c,l){}r.splitTerminal=f;let e;(H=>(H.black="\x1B[30m",H.red="\x1B[31m",H.green="\x1B[32m",H.yellow="\x1B[33m",H.blue="\x1B[34m",H.magenta="\x1B[35m",H.cyan="\x1B[36m",H.white="\x1B[37m",H.reset="\x1B[0m"))(e=r.TextColors||(r.TextColors={}));let t;(k=>(k.arrowUp="\x1B[A",k.arrowDown="\x1B[B",k.arrowRight="\x1B[C",k.arrowLeft="\x1B[D",k.insert="\x1B[@",k.delete="\x1B[P",k.clearScreen="'\x1B[2J\x1B[3J\x1B[;H'",k.clearLineToEnd="\x1B[0K",k.clearLineToStart="\x1B[1K",k.clearLineEntire="\x1B[2K"))(t=r.AnsiEscapeCodes||(r.AnsiEscapeCodes={}));function o(c,l){return`${l}${c}${"\x1B[0m"}`}r.colorText=o;class s{constructor(l){this._line=[],this._writeEmitter=new vt.EventEmitter,this._position=0,this._cmdIndex=0,this._previousCmds=[],this._recieveInputDataCB=this.defaultTerminalInputHandler;let d={onDidWrite:this._writeEmitter.event,open:()=>this._writeEmitter.fire(`Interactive Terminal\r
\r
`),close:()=>{},handleInput:V=>{this._recieveInputDataCB(this,V)}},v={parentTerminal:l};this._terminal=vt.window.createTerminal({name:"Interactive Terminal",location:v,pty:d})}write(l,d){let v="";l instanceof Uint8Array?l.forEach(U=>{v+=String.fromCharCode(U)}):v=l;let V=d?r.colorText(v,d):v;this._writeEmitter.fire(V)}writeLine(l,d){this.write(l+`\r
`,d)}clear(){this._writeEmitter.fire("\x1B[2J\x1B[3J\x1B[;H")}registerCB(l,d){switch(l){case"Input":this._onDataRecievedCB=d;break}}defaultTerminalInputHandler(l,d){this._onDataRecievedCB&&this._onDataRecievedCB(d)}get terminal(){return this._terminal}}r.Interactive=s;let n=class{static setBuildLogFileHome(l){We.existsSync(l.fsPath)||We.mkdirSync(l.fsPath),l&&(n._LogHomeUri=vt.Uri.joinPath(l,n._LogFile))}static writeToTempLog(l){!n._LogHomeUri||We.appendFileSync(n._LogHomeUri.fsPath,l,{encoding:"utf-8"})}static read(){return!n._LogHomeUri||!We.existsSync(n._LogHomeUri.fsPath)?"":We.readFileSync(n._LogHomeUri.fsPath,{encoding:"utf-8"})}static clearTempLog(){!n._LogHomeUri||We.existsSync(n._LogHomeUri.fsPath)&&We.rmSync(n._LogHomeUri.fsPath,{force:!0})}constructor(l){this._regexError=new RegExp(/(error:|Error \d)/),this._regexWarning=new RegExp(/(warning:|Warning \d)/),this._regexCodeLineOrCaret=new RegExp(/(\^|\;|\)\;|\w;|\w\(|\w\[|\]\;)/),this._regexWarningErrorText=new RegExp(/\d\s(warning|warnings|error|errors)\s/),this._writeEmitter=new vt.EventEmitter,this._msg="";let d="",v={onDidWrite:this._writeEmitter.event,open:()=>this._writeEmitter.fire(`Log\r
`),close:()=>{},handleInput:U=>{if(U==="\r"){d.includes("clear")||d.includes("cls")?this.clear():this.write(`\r
`),d="";return}if(U==="\x7F"){if(d.length===0)return;d=d.substr(0,d.length-1),this._writeEmitter.fire("\x1B[D"),this._writeEmitter.fire("\x1B[P");return}d+=U,this.write(U)}},V={parentTerminal:l};this._terminal=vt.window.createTerminal({name:"Log",location:V,pty:v})}write(l,d){if(typeof l=="string"){let v=d?r.colorText(l,d):l;n.writeToTempLog(v),this._writeEmitter.fire(v);return}else if(typeof l!="string"){let v=d?r.colorText(l.toString(),d):l.toString();n.writeToTempLog(v),this._writeEmitter.fire(v);return}}writeLogText(l,d){let v=d?r.colorText(l,d):l;this._writeEmitter.fire(l)}writeBuildText(l){if(l instanceof Uint8Array){this.parseBuildText(l,"\x1B[37m",!1);return}}writeBuildErrorText(l){if(l instanceof Uint8Array){this.parseBuildText(l,"\x1B[31m",!0);return}}clear(){r.Log.clearTempLog(),this._writeEmitter.fire("\x1B[2J\x1B[3J\x1B[;H")}parseBuildText(l,d,v=!1){let V=[],U="",P=!1;if(l.forEach(k=>{U+=k.toString(16)+" ",Zt.type()==="Linux"&&(k===10?(this._msg+=String.fromCharCode(13),this._msg+=String.fromCharCode(k),V.push(this._msg),this._previousChar=0,this._msg="",P=!0,U=""):this._msg+=String.fromCharCode(k)),Zt.type()==="Darwin"&&(k===10?(this._msg+=String.fromCharCode(13),this._msg+=String.fromCharCode(k),V.push(this._msg),this._previousChar=0,this._msg="",P=!0,U=""):this._msg+=String.fromCharCode(k)),Zt.type()==="Windows_NT"&&(k===13?(this._msg+=String.fromCharCode(k),this._previousChar=k):this._previousChar!==13&&k===10?(this._msg+=String.fromCharCode(k),this._msg+=String.fromCharCode(13),V.push(this._msg),this._previousChar=0,this._msg="",P=!0):this._previousChar===13&&k===10?(this._msg+=String.fromCharCode(k),V.push(this._msg),this._previousChar=0,this._msg="",P=!0):this._msg+=String.fromCharCode(k))}),!P||V.length===0)return;if(!v){V.forEach(k=>this.write(k,d));return}let R=this._previousTextColor?this._previousTextColor:d,E="",H=!1;V.forEach(k=>{this._regexWarning.test(k)?(R="\x1B[33m",E+=k,this._previousTextColor="\x1B[33m"):this._regexError.test(k)?(R="\x1B[31m",E+=k,this._previousTextColor="\x1B[31m"):this._regexCodeLineOrCaret.test(k)?E+=o(`${k}`,R):this._regexWarningErrorText.test(k)?(E+=o(`${k}`,"\x1B[36m"),E+=`\r
`,H=!0):E+=k}),this._previousTextColor=R,this.write(E,R),H?this._previousTextColor=d:this._previousTextColor=R}get terminal(){return this._terminal}},a=n;a._LogFile="tempBuildLog.txt",r.Log=a})(Z||(Z={}));var bo=O(require("ws"));var be=class{constructor(e,t){this._deviceURL=`${i.Extension.name}/device`;this._vscodeURL=`${i.Extension.name}/vscode-command`;this._websocketServer=void 0;this._websocketDeviceList=[];this._websocketVSCodeCommand=[];this._wssConfig={};this._isRunning=!1;this._DEFAULT_PORT=7071;this._DEFAULT_HOST="0.0.0.0";this._PORT_MIN=1;this._PORT_MAX=65535;this._wssConfig=e||{port:this._DEFAULT_PORT,host:this._DEFAULT_HOST},this.on("Log",t),be._logHandler("VEX Websocket Server Initialized")}start(e){this._isRunning||(this._isRunning=!0,this._wssConfig=e||this._wssConfig,be._logHandler(`Starting Websocket Server on Host:${this._wssConfig.host} Port:${this._wssConfig.port}`),this._setupWebsocketServer())}stop(){!this._isRunning||(this._websocketDeviceList.forEach(e=>{e[0].close(be.ExitCode.CLOSE_GOING_AWAY,"Vex websocket server closing, server disabled")}),this._websocketDeviceList=[],this._websocketVSCodeCommand.forEach(e=>{e[0].close(be.ExitCode.CLOSE_GOING_AWAY,"Vex websocket server closing, server disabled")}),this._websocketVSCodeCommand=[],be._logHandler(`Stoping Websocket Server on Host:${this._wssConfig.host} Port:${this._wssConfig.port}`),this._websocketServer.close())}_setupWebsocketServer(){let e=this.validateServerConfig(this._wssConfig);if(e!==be.ValidateErrorCodes.VALID_CONFIG){this._isRunning=!0,be._logHandler(`Invalid Server Config: ${e}`);return}this.websocketServer&&this._websocketServer.removeAllListeners(),this._websocketServer=new bo.Server(this._wssConfig),this._websocketServer.on("error",t=>this._eventWSSError(t)),this._websocketServer.on("close",()=>this._eventWSSClose()),this._websocketServer.on("connection",(t,o)=>this._eventWSSConnection(t,o))}_eventWSSConnection(e,t){let o=this.uuidv4(),s=Math.floor(Math.random()*360),a={id:o,color:s};console.log(o,s),console.log(e),console.log(t),t.url.includes(this._deviceURL)?(console.log(t.socket.remoteAddress),console.log(t.socket.localAddress),this._websocketDeviceList.push([e,t,o])):t.url.includes(this._vscodeURL)?this._websocketVSCodeCommand.push([e,t,o]):e.close(be.ExitCode.CLOSE_PROTOCOL_ERROR,`Vex websocket server error, URL: ${t.url}, not accepted.
  Try "ws://${t.socket.localAddress}:${t.socket.localPort}/${this._deviceURL}
" to access user port stream and try ""ws://${t.socket.localAddress}:${t.socket.localPort}/${this._vscodeURL}"`),e.on("close",()=>{this._websocketDeviceList.pop()}),e.on("",()=>{}),this._onConnectionHandler(e,t)}_eventWSSError(e){be._logHandler(`Error: ${e}`),this._isRunning=!1}_eventWSSClose(){this._isRunning=!1}uuidv4(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=Math.random()*16|0,o=e==="x"?t:t&3|8;return o.toString(16)})}updateServerConfig(e){this._websocketDeviceList.forEach(t=>{t[0].close(be.ExitCode.SERVICE_RESTART,"Vex websocket server restarting, server settings changed")}),this.vscodeWSList.forEach(t=>{t[0].close(be.ExitCode.SERVICE_RESTART,"Vex websocket server restarting, server settings changed")}),this._websocketServer.close(),this._websocketServer=new bo.Server(e)}validateServerConfig(e){if(e.port<=this._PORT_MIN&&e.port>=this._PORT_MAX)return be.ValidateErrorCodes.INVALID_PORT;let t=/.*\..*\..*\..*/,o=/[0-255]\.[0-255]\.[0-255]\.[0-255]/,s=/.*\:.*\:.*\:.*\:.*\:.*\:.*\:.*/,a=/[0-9a-fA-F]{4}\:[0-9a-fA-F]{4}\:[0-9a-fA-F]{4}\:[0-9a-fA-F]{4}\:[0-9a-fA-F]{4}\:[0-9a-fA-F]{4}\:[0-9a-fA-F]{4}\:[0-9a-fA-F]{4}/,r=/[A-Za-z\-]*/;if(t.test(e.host)){if(console.log(o.test(e.host)),!o.test(e.host))return be.ValidateErrorCodes.INVALID_IPV4}else if(s.test(e.host)){if(!a.test(e.host))return be.ValidateErrorCodes.INVALID_IPV6}else if(!r.test(e.host))return be.ValidateErrorCodes.INVALID_HOSTNAME;return be.ValidateErrorCodes.VALID_CONFIG}get websocketServer(){return this._websocketServer}get deviceWSList(){return this._websocketDeviceList}get vscodeWSList(){return this._websocketVSCodeCommand}get deviceURL(){return this._deviceURL}get vscodeURL(){return this._vscodeURL}get host(){return this._wssConfig.host}get port(){return this._wssConfig.port}on(e,t){switch(e){case"Log":be._logCB=t;break;case"connection":this._connectionCB=t;break}}static _logHandler(e){let t=`${be._classType} ${e}`;console.log(t),be._logCB&&be._logCB(t)}_onConnectionHandler(e,t){this._connectionCB&&this._connectionCB(e,t)}},ht=be;ht._classType="VEX Websocket Server: ";(t=>{let f;(y=>(y[y.CLOSE_NORMAL=1e3]="CLOSE_NORMAL",y[y.CLOSE_GOING_AWAY=1001]="CLOSE_GOING_AWAY",y[y.CLOSE_PROTOCOL_ERROR=1002]="CLOSE_PROTOCOL_ERROR",y[y.CLOSE_UNSUPPORTED=1003]="CLOSE_UNSUPPORTED",y[y.RESERVED=1004]="RESERVED",y[y.CLOSED_NO_STATUS=1005]="CLOSED_NO_STATUS",y[y.CLOSE_ABNORMAL=1006]="CLOSE_ABNORMAL",y[y.UNSUPPORTED_PAYLOAD=1007]="UNSUPPORTED_PAYLOAD",y[y.POLICY_V=1008]="POLICY_V",y[y.CLOSE_TOO_LARGE=1009]="CLOSE_TOO_LARGE",y[y.MANDATORY_EXTENSION=1010]="MANDATORY_EXTENSION",y[y.SERVER=1011]="SERVER",y[y.SERVICE_RESTART=1012]="SERVICE_RESTART",y[y.TRY_AGAIN_LATER=1013]="TRY_AGAIN_LATER",y[y.BAD_GATEWAY=1014]="BAD_GATEWAY",y[y.TLS_HANDSHAKE_FAIL=1015]="TLS_HANDSHAKE_FAIL"))(f=t.ExitCode||(t.ExitCode={}));let e;(c=>(c[c.VALID_CONFIG=0]="VALID_CONFIG",c[c.INVALID_PORT=-1]="INVALID_PORT",c[c.INVALID_IPV4=-2]="INVALID_IPV4",c[c.INVALID_IPV6=-3]="INVALID_IPV6",c[c.INVALID_HOSTNAME=-4]="INVALID_HOSTNAME"))(e=t.ValidateErrorCodes||(t.ValidateErrorCodes={}))})(ht||(ht={}));var eo;(e=>{function f(t){let o=new Te(t,"VEX Resource Manager","vex.resourceManager.debuglog"),s=r=>o.appendLine(`${r}`),a=new gt(t,s);t.subscriptions.push(ft.commands.registerCommand(i.Extension.ResourceManager.downloadToolchainID,async r=>{let n={command:i.Extension.ResourceManager.downloadToolchainID,details:"",statusCode:0,json:""};return await a.downloadToolChain(r)})),t.subscriptions.push(ft.commands.registerCommand(i.Extension.ResourceManager.downloadSDKID,async(r,n,c,l)=>{console.log(r,c);let d={command:i.Extension.ResourceManager.downloadSDKID,details:"",statusCode:0,json:""};return d.statusCode=await a.downloadSDK(r,n,c,l),d.details="",d.json="",console.log("Response Base",d),d})),t.subscriptions.push(ft.commands.registerCommand(i.Extension.ResourceManager.getSDKVersionID,async(r,n,c)=>{let l={command:i.Extension.ResourceManager.getSDKVersionID,details:"",statusCode:0,json:""},d=await a.getSDKVersions(r,n,c);return console.log("Response Base",d),l.json=JSON.stringify(d),console.log("Response Base",l),l})),t.subscriptions.push(ft.commands.registerCommand(i.Extension.ResourceManager.downloadVexosID,async(r,n)=>{let c=await a.downloadVEXosFile(r,n);return{command:i.Extension.ResourceManager.downloadVexosID,details:"",statusCode:c,json:""}})),t.subscriptions.push(ft.commands.registerCommand(i.Extension.ResourceManager.getVexosVersionID,async(r,n)=>{let c={command:i.Extension.ResourceManager.getVexosVersionID,details:"",statusCode:0,json:""},l=await a.getVEXosVersions(r,n);return console.log("Response Base",l),c.json=JSON.stringify(l),console.log("Response Base",c),c})),t.subscriptions.push(ft.commands.registerCommand(i.Extension.ResourceManager.getVexosManifestID,async(r,n)=>{let c={command:i.Extension.ResourceManager.getVexosManifestID,details:"",statusCode:0,json:""},l=await a.getLatestVEXosManifest(r,n);return console.log("Response Base",l),c.json=JSON.stringify(l),console.log("Response Base",c),c})),t.subscriptions.push(ft.commands.registerCommand(i.Extension.ResourceManager.downloadDriverInstallerID,async(r,n)=>{let c={command:i.Extension.ResourceManager.downloadDriverInstallerID,details:"",statusCode:0,json:""},l=await a.downloadDriverInstaller(r,n);return console.log("Response Base",l),console.log("Response Base",c),c.statusCode=l,c}))}e.setup=f})(eo||(eo={}));var p=O(require("vscode"));var u=O(require("vscode")),to=O(require("path"));var oo=O(require("os"));var so=class{constructor(e){this._onDidChangeTreeData=new u.EventEmitter;this.onDidChangeTreeData=this._onDidChangeTreeData.event;this.systemInfo=[];this._deviceInfo={};this._getDeviceType=(e,t)=>{if(t===i.Platform.V5)switch(e){case 2:return"Motor";case 3:return"LED";case 4:return"Rotation";case 5:return"Motor";case 6:return"Inertial";case 7:return"Distance";case 8:return"Radio";case 9:return"Controller";case 10:return"Brain";case 11:return"Vision";case 12:return"3wire";case 13:return"Partner";case 14:return"Battery";case 15:return"Solenoid";case 16:return"Optical";case 17:return"Magnet";case 22:return"Radio - Internal";case-127:return"Generic";default:return e.toString()}else if(t===i.Platform.EXP)switch(e){case 2:return"Motor";case 3:return"LED";case 4:return"Rotation";case 5:return"Motor";case 6:return"Inertial";case 7:return"Distance";case 8:return"Radio";case 9:return"Controller";case 10:return"Brain";case 11:return"Vision";case 12:return"3wire";case 13:return"Partner";case 14:return"Battery";case 15:return"Solenoid";case 16:return"Optical";case 17:return"Magnet";case 22:return"Radio - Internal";case-127:return"Generic";default:return e.toString()}else if(t===i.Platform.IQ2)switch(e){case 2:return"Motor";case 3:return"Touchled";case 4:return"Color";case 5:return"Bumper";case 6:return"Gyro";case 7:return"Sonar";case 8:return"Radio";case 11:return"Vision";case 16:return"Optical";case 19:return"Distance";case-127:return"Generic";default:return e.toString()}};this.context=e,this._cautionIcon=new u.ThemeIcon("warning",new u.ThemeColor("list.warningForeground")),this._errorIcon=new u.ThemeIcon("error",new u.ThemeColor("list.errorForeground"))}async getSystemInfo(){this.systemInfo=[],await this.pickSystemToParse(this._device)}async pickSystemToParse(e){if(e instanceof A){let t=[],o=this._parseAppParentNode(e);if(o&&t.push(o),e instanceof Ke){o.items=this._parseV5Brain(e),this.systemInfo=t;return}if(e instanceof Xe){o.items=this._parseV5Controller(e),this.systemInfo=t;return}if(e instanceof Je){e.bootMode===x.BootMode.app&&(o.items=this._parseIQ2Brain(e)),(e.bootMode===x.BootMode.rom||e.bootMode===x.BootMode.ram)&&(o.items=this._parseBootloaderIQ2Brain(e)),this.systemInfo=t;return}if(e instanceof Ve){o.items=this._parseIQ2Controller(e),this.systemInfo=t;return}if(e instanceof qe){e.bootMode===x.BootMode.app&&(o.items=this._parseEXPBrain(e)),(e.bootMode===x.BootMode.rom||e.bootMode===x.BootMode.ram)&&(o.items=this._parseBootloaderEXPBrain(e)),this.systemInfo=t;return}if(e instanceof Be){o.items=this._parseEXPController(e),this.systemInfo=t;return}}else if(e instanceof De){let t=[],o=this._parseDFUParentNode(e);if(o&&t.push(o),e instanceof lt||e instanceof ct){o.items=this._parseBootloaderBrain(e),this.systemInfo=t;return}if(e instanceof pt||e instanceof dt){o.items=this._parseBootloaderController(e),this.systemInfo=t;return}}else this.systemInfo=[]}_parseAppParentNode(e){let t=!1,o=!1,s=e.bootMode===x.BootMode.app?`( ${e.robotName} )`:`( ${e.bootMode} )`;e.device===i.Device.Brain?s=e.bootMode===x.BootMode.app?`( ${e.robotName} )`:`( ${e.bootMode} )`:e.device===i.Device.Controller?(s=e.bootMode===x.BootMode.app?`( ${e.robotName} )`:`( ${e.bootMode} )`,s=s==="(  )"?"":s):s=e.bootMode===x.BootMode.app?`( ${e.robotName} )`:`( ${e.bootMode} )`,e.needsVexosUpdate&&e.bootMode===x.BootMode.app||e.device===i.Device.Brain&&(e.bootMode===x.BootMode.rom||e.bootMode===x.BootMode.ram)?t=!0:(e.device===i.Device.Controller&&e.bootMode===x.BootMode.rom||e.bootMode===x.BootMode.dfu)&&(o=!0);let a=e.platform==="IQ2"?"IQ 2nd Generation":e.platform,r={items:[],name:"",type:u.TreeItemCollapsibleState.None};return o?r={icon:new u.ThemeIcon(`vex-${e.platform}-${e.device}`,new u.ThemeColor("list.errorForeground")),name:`${a} ${e.device} ${s}`,type:u.TreeItemCollapsibleState.Expanded,tag:`${a} ${e.device}`,items:[]}:t?r={icon:new u.ThemeIcon(`vex-${e.platform}-${e.device}`,new u.ThemeColor("list.warningForeground")),name:`${a} ${e.device} ${s}`,type:u.TreeItemCollapsibleState.Expanded,tag:`${a} ${e.device}`,items:[]}:r={icon:new u.ThemeIcon(`vex-${e.platform}-${e.device}`,new u.ThemeColor("charts.green")),name:`${a} ${e.device} ${s}`,type:u.TreeItemCollapsibleState.Expanded,tag:`${a} ${e.device}`,items:[]},r}_parseDFUParentNode(e){let t=!1,o=!1,s=`( ${e.bootMode} )`;e.bootMode===x.BootMode.dfu&&(o=!0);let a=e.platform==="IQ2"?"IQ 2nd Generation":e.platform,r={items:[],name:"",type:u.TreeItemCollapsibleState.Expanded};return o?r={icon:new u.ThemeIcon(`vex-${e.platform}-${e.device}`,new u.ThemeColor("list.errorForeground")),name:`${a} ${e.device} ${s}`,type:u.TreeItemCollapsibleState.Expanded,tag:`${a} ${e.device} ${e.bootMode}`,items:[]}:t?r={icon:new u.ThemeIcon(`vex-${e.platform}-${e.device}`,new u.ThemeColor("list.warningForeground")),name:`${a} ${e.device} ${s}`,type:u.TreeItemCollapsibleState.Expanded,tag:`${a} ${e.device} ${e.bootMode}`,items:[]}:r={icon:new u.ThemeIcon(`vex-${e.platform}-${e.device}`,new u.ThemeColor("charts.green")),name:`${a} ${e.device} ${s}`,type:u.TreeItemCollapsibleState.Expanded,tag:`${a} ${e.device} ${e.bootMode}`,items:[]},r}_parseV5Brain(e){this.systemInfo=[];let t=0,o=1,s=2,a=3;if(e.json==="{}"||e.json==="")return;let r=e.vexComSystemInfo,n={items:[],name:"",type:u.TreeItemCollapsibleState.None},c={items:[],name:"",type:u.TreeItemCollapsibleState.None};if(r?.brain?.name){e.needsVexosUpdate?n={icon:this.getVEXThemeIcon(e.platform,e.device,"list.warningForeground"),name:" Brain",type:u.TreeItemCollapsibleState.Expanded,tag:"vexos-update",items:[]}:n={icon:this.getVEXThemeIcon(e.platform,e.device,""),name:" Brain",type:u.TreeItemCollapsibleState.Expanded,items:[]};let l=n.items;l.push({name:"system",type:u.TreeItemCollapsibleState.Expanded,items:[]}),l.push({name:"serial port",type:u.TreeItemCollapsibleState.Expanded,items:[]}),l.push({name:"programs",type:u.TreeItemCollapsibleState.Expanded,items:[]}),l.push({name:"devices",type:u.TreeItemCollapsibleState.Expanded,items:[]});let d=l[t].items;e.needsVexosUpdate?d.push({icon:this._cautionIcon,name:"VEXos	 : "+i.Utils.vexos.toVersion(r.brain.vexos),type:u.TreeItemCollapsibleState.None,tag:"",items:[]}):d.push({name:"VEXos	 : "+i.Utils.vexos.toVersion(r.brain.vexos),type:u.TreeItemCollapsibleState.None,tag:"vexos-good",items:[]}),d.push({name:"name	 : "+r.brain.name,type:u.TreeItemCollapsibleState.None,items:[],tag:"name"}),d.push({name:"team	 : "+r.brain.team,type:u.TreeItemCollapsibleState.None,items:[],tag:"team"}),d.push({name:"id		 : "+r.brain.ssn.substring(2),type:u.TreeItemCollapsibleState.None,items:[]}),r.vms&&r.vms.count>0&&d.push({name:"python	 : "+i.Utils.vexos.toVersion(r.vms.items[0].version)+" ("+r.vms.items[0].crc32+")",type:u.TreeItemCollapsibleState.None,items:[],data:0}),l[o].items=this._getSerialNode(e),l[s].items=this._getProgramsTree(r),l[a].items=this._getDeviceNode(r,e.platform)}return r?.system?.radio_linked?c={icon:this.getVEXThemeIcon(e.platform,i.Device.Controller,""),name:" Controller - linked",type:u.TreeItemCollapsibleState.None,items:[]}:r?.system?.controller_tethered?c={icon:this.getVEXThemeIcon(e.platform,i.Device.Controller,""),name:" Controller - tethered",type:u.TreeItemCollapsibleState.None,items:[]}:c={icon:this.getVEXThemeIcon(e.platform,i.Device.Controller,""),name:" Controller - not linked",type:u.TreeItemCollapsibleState.None,items:[]},[n,c]}_parseV5Controller(e){this.systemInfo=[];let t=0,o=1,s=2,a=3;if(e.json==="{}"||e.json==="")return;let r=e.vexComSystemInfo,n={items:[],name:"",type:u.TreeItemCollapsibleState.None},c={items:[],name:"",type:u.TreeItemCollapsibleState.None};if(r?.brain?.name){e.needsVexosUpdate?n={icon:this.getVEXThemeIcon(e.platform,i.Device.Brain,"list.warningForeground"),name:" Brain",type:u.TreeItemCollapsibleState.Expanded,tag:"vexos-update",items:[]}:n={icon:this.getVEXThemeIcon(e.platform,i.Device.Brain,""),name:" Brain",type:u.TreeItemCollapsibleState.Expanded,items:[]};let l=n.items;l.push({name:"system",type:u.TreeItemCollapsibleState.Expanded,items:[]}),l.push({name:"serial port",type:u.TreeItemCollapsibleState.Expanded,items:[]}),l.push({name:"programs",type:u.TreeItemCollapsibleState.Expanded,items:[]}),l.push({name:"devices",type:u.TreeItemCollapsibleState.Expanded,items:[]});let d=l[t].items;e.needsVexosUpdate?d.push({icon:this._cautionIcon,name:"VEXos	 : "+i.Utils.vexos.toVersion(r.brain.vexos),type:u.TreeItemCollapsibleState.None,tag:"",items:[]}):d.push({name:"VEXos	 : "+i.Utils.vexos.toVersion(r.brain.vexos),type:u.TreeItemCollapsibleState.None,tag:"vexos-good",items:[]}),d.push({name:"name	 : "+r.brain.name,type:u.TreeItemCollapsibleState.None,items:[],tag:"name"}),d.push({name:"team	 : "+r.brain.team,type:u.TreeItemCollapsibleState.None,items:[],tag:"team"}),d.push({name:"id		 : "+r.brain.ssn.substring(2),type:u.TreeItemCollapsibleState.None,items:[]}),r.vms&&r.vms.count>0&&d.push({name:"python	 : "+i.Utils.vexos.toVersion(r.vms.items[0].version)+" ("+r.vms.items[0].crc32+")",type:u.TreeItemCollapsibleState.None,items:[],data:0}),l[o].items=this._getSerialNode(e),l[s].items=this._getProgramsTree(r),l[a].items=this._getDeviceNode(r,e.platform)}else n={icon:this.getVEXThemeIcon(e.platform,i.Device.Brain,"list.warningForeground"),name:" Brain - not linked",type:u.TreeItemCollapsibleState.None,items:[]};if(r?.controller&&(this._device instanceof Ve||this._device instanceof Xe)){c={icon:this.getVEXThemeIcon(e.platform,i.Device.Controller,""),name:" Controller",type:u.TreeItemCollapsibleState.Expanded,tag:"controller",items:[]};let l=c.items;l.push({name:"radio		: "+i.Utils.vexos.toVersion(r.controller.radio),type:u.TreeItemCollapsibleState.None,items:[]}),l.push({name:"usb			: "+i.Utils.vexos.toVersion(r.controller.version),type:u.TreeItemCollapsibleState.None,items:[]})}return[n,c]}_parseBootloaderIQ2Brain(e){this.systemInfo=[];let t=0,o=1,s=2,a=3;if(e.json==="{}"||e.json==="")return;let r=e.vexComSystemInfo,n={items:[],name:"",type:u.TreeItemCollapsibleState.None},c={items:[],name:"",type:u.TreeItemCollapsibleState.None};if(r?.brain?.bootloader){n={icon:this.getVEXThemeIcon(e.platform,e.device,"list.warningForeground"),name:" Brain",type:u.TreeItemCollapsibleState.Expanded,tag:"vexos-update",items:[]};let l=n.items;l.push({name:"system",type:u.TreeItemCollapsibleState.Expanded,items:[]}),l.push({name:"serial port",type:u.TreeItemCollapsibleState.Expanded,items:[]});let d=l[t].items;d.push({icon:this._cautionIcon,name:"VEXos		 : 0.0.0.0",type:u.TreeItemCollapsibleState.None,items:[]}),d.push({name:"bootloader	 : "+r.brain.bootloader,type:u.TreeItemCollapsibleState.None,items:[]}),d.push({name:"version		 : "+i.Utils.vexos.toVersion(r.brain.version),type:u.TreeItemCollapsibleState.None,items:[]}),d=l[o].items,d.push({name:"communication	 : "+e.communication,type:u.TreeItemCollapsibleState.None,items:[]});let v=oo.type()==="Windows_NT"?"user				 : ":"user			 : ";d.push({name:v+e.user,type:u.TreeItemCollapsibleState.None,items:[]})}return r?.system?.radio_linked?c={icon:this.getVEXThemeIcon(e.platform,i.Device.Controller,""),name:" Controller - linked",type:u.TreeItemCollapsibleState.None,items:[]}:r?.system?.controller_tethered?c={icon:this.getVEXThemeIcon(e.platform,i.Device.Controller,""),name:" Controller - tethered",type:u.TreeItemCollapsibleState.None,items:[]}:c={icon:this.getVEXThemeIcon(e.platform,i.Device.Controller,""),name:" Controller - not linked",type:u.TreeItemCollapsibleState.None,items:[]},[n,c]}_parseIQ2Brain(e){this.systemInfo=[];let t=0,o=1,s=2,a=3;if(e.json==="{}"||e.json==="")return;let r=e.vexComSystemInfo,n={items:[],name:"",type:u.TreeItemCollapsibleState.None},c={items:[],name:"",type:u.TreeItemCollapsibleState.None};if(r?.brain?.name){e.needsVexosUpdate?n={icon:this.getVEXThemeIcon(e.platform,e.device,"list.warningForeground"),name:" Brain",type:u.TreeItemCollapsibleState.Expanded,tag:"vexos-update",items:[]}:n={icon:this.getVEXThemeIcon(e.platform,e.device,""),name:" Brain",type:u.TreeItemCollapsibleState.Expanded,tag:"brain",items:[]};let l=n.items;l.push({name:"system",type:u.TreeItemCollapsibleState.Expanded,items:[]}),l.push({name:"serial port",type:u.TreeItemCollapsibleState.Expanded,items:[]}),l.push({name:"programs",type:u.TreeItemCollapsibleState.Expanded,items:[]}),l.push({name:"devices",type:u.TreeItemCollapsibleState.Expanded,items:[]});let d=l[t].items;e.needsVexosUpdate?d.push({icon:this._cautionIcon,name:"VEXos	 : "+i.Utils.vexos.toVersion(r.brain.vexos),type:u.TreeItemCollapsibleState.None,tag:"",items:[]}):d.push({name:"VEXos	 : "+i.Utils.vexos.toVersion(r.brain.vexos),type:u.TreeItemCollapsibleState.None,tag:"vexos-good",items:[]}),d.push({name:"name	 : "+r.brain.name,type:u.TreeItemCollapsibleState.None,items:[],tag:"name"}),d.push({name:"team	 : "+r.brain.team,type:u.TreeItemCollapsibleState.None,items:[],tag:"team"}),d.push({name:"id		 : "+r.brain.ssn.substring(2),type:u.TreeItemCollapsibleState.None,items:[]}),r.vms&&r.vms.count>0&&d.push({name:"python	 : "+i.Utils.vexos.toVersion(r.vms.items[0].version)+" ("+r.vms.items[0].crc32+")",type:u.TreeItemCollapsibleState.None,items:[],data:0}),l[o].items=this._getSerialNode(e),l[s].items=this._getProgramsTree(r),l[a].items=this._getDeviceNode(r,e.platform)}return r?.system?.radio_linked?c={icon:this.getVEXThemeIcon(e.platform,i.Device.Controller,""),name:" Controller - linked",type:u.TreeItemCollapsibleState.None,items:[]}:r?.system?.controller_tethered?c={icon:this.getVEXThemeIcon(e.platform,i.Device.Controller,""),name:" Controller - tethered",type:u.TreeItemCollapsibleState.None,items:[]}:c={icon:this.getVEXThemeIcon(e.platform,i.Device.Controller,""),name:" Controller - not linked",type:u.TreeItemCollapsibleState.None,items:[]},[n,c]}_parseIQ2Controller(e){this.systemInfo=[];let r=e.vexComSystemInfo,n={items:[],name:"",type:u.TreeItemCollapsibleState.None},c={items:[],name:"",type:u.TreeItemCollapsibleState.None};if(r?.brain?.name){n={icon:this.getVEXThemeIcon(e.platform,e.device,""),name:" Brain",type:u.TreeItemCollapsibleState.Expanded,items:[]};let l=n.items;l.push({name:"system",type:u.TreeItemCollapsibleState.Expanded,items:[]}),l.push({name:"serial port",type:u.TreeItemCollapsibleState.Expanded,items:[]}),l.push({name:"programs",type:u.TreeItemCollapsibleState.Expanded,items:[]}),l.push({name:"devices",type:u.TreeItemCollapsibleState.Expanded,items:[]});let d=l[0].items;d.push({name:"VEXos	 : "+i.Utils.vexos.toVersion(r.brain.vexos),type:u.TreeItemCollapsibleState.None,tag:"vexos-good",items:[]}),d.push({name:"name	 : "+r.brain.name,type:u.TreeItemCollapsibleState.None,items:[],tag:"name"}),d.push({name:"team	 : "+r.brain.team,type:u.TreeItemCollapsibleState.None,items:[],tag:"team"}),d.push({name:"id		 : "+r.brain.ssn.substring(2),type:u.TreeItemCollapsibleState.None,items:[]}),r.vms&&r.vms.count>0&&d.push({name:"python	 : "+i.Utils.vexos.toVersion(r.vms.items[0].version)+" ("+r.vms.items[0].crc32+")",type:u.TreeItemCollapsibleState.None,items:[],data:0}),l[1].items=this._getSerialNode(e),l[2].items=this._getProgramsTree(r),l[3].items=this._getDeviceNode(r,e.platform)}else n={icon:this.getVEXThemeIcon(e.platform,i.Device.Brain,"list.warningForeground"),name:" Brain - not linked",type:u.TreeItemCollapsibleState.None,items:[]};if(r?.controller){e.needsRadioUpdate||e.needsUsbUpdate?c={icon:this.getVEXThemeIcon(e.platform,i.Device.Controller,"list.warningForeground"),name:" Controller",type:u.TreeItemCollapsibleState.Expanded,tag:"vexos-controller-update",items:[]}:c={icon:this.getVEXThemeIcon(e.platform,i.Device.Controller,""),name:" Controller",type:u.TreeItemCollapsibleState.Expanded,tag:"controller",items:[]};let l=c.items;e.needsRadioUpdate?l.push({icon:this._cautionIcon,name:"radio		: "+i.Utils.vexos.toVersion(r.controller.version),type:u.TreeItemCollapsibleState.None,tag:"controller-radio",items:[]}):l.push({name:"radio		: "+i.Utils.vexos.toVersion(r.controller.version),type:u.TreeItemCollapsibleState.None,tag:"controller-radio",items:[]}),e.needsUsbUpdate?l.push({icon:this._cautionIcon,name:"usb			: "+i.Utils.vexos.toVersion(r.controller.atmel),type:u.TreeItemCollapsibleState.None,tag:"controller-atmel",items:[]}):l.push({name:"usb			: "+i.Utils.vexos.toVersion(r.controller.atmel),type:u.TreeItemCollapsibleState.None,tag:"controller-atmel",items:[]})}else if(r?.controller_boot){c={icon:this.getVEXThemeIcon(e.platform,i.Device.Controller,"list.errorForeground"),name:" Controller",type:u.TreeItemCollapsibleState.Expanded,tag:"vexos-controller-update",items:[]};let l=c.items;l.push({icon:this._errorIcon,name:"radio		: 0.0.0.0",type:u.TreeItemCollapsibleState.None,tag:"controller-radio",items:[]}),e.needsUsbUpdate?l.push({icon:this._cautionIcon,name:"usb			: "+i.Utils.vexos.toVersion(r.controller_boot.atmel),type:u.TreeItemCollapsibleState.None,tag:"controller-atmel",items:[]}):l.push({name:"usb			: "+i.Utils.vexos.toVersion(r.controller_boot.atmel),type:u.TreeItemCollapsibleState.None,tag:"controller-atmel",items:[]})}return[n,c]}_parseEXPBrain(e){this.systemInfo=[];let t=0,o=1,s=2,a=3;if(e.json==="{}"||e.json==="")return;let r=e.vexComSystemInfo,n={items:[],name:"",type:u.TreeItemCollapsibleState.None},c={items:[],name:"",type:u.TreeItemCollapsibleState.None};if(r?.brain?.name){e.needsVexosUpdate?n={icon:this.getVEXThemeIcon(e.platform,e.device,"list.warningForeground"),name:" Brain",type:u.TreeItemCollapsibleState.Expanded,tag:"vexos-update",items:[]}:n={icon:this.getVEXThemeIcon(e.platform,e.device,""),name:" Brain",type:u.TreeItemCollapsibleState.Expanded,tag:"brain",items:[]};let l=n.items;l.push({name:"system",type:u.TreeItemCollapsibleState.Expanded,items:[]}),l.push({name:"serial port",type:u.TreeItemCollapsibleState.Expanded,items:[]}),l.push({name:"programs",type:u.TreeItemCollapsibleState.Expanded,items:[]}),l.push({name:"devices",type:u.TreeItemCollapsibleState.Expanded,items:[]});let d=l[t].items;e.needsVexosUpdate?d.push({icon:this._cautionIcon,name:"VEXos	 : "+i.Utils.vexos.toVersion(r.brain.vexos),type:u.TreeItemCollapsibleState.None,tag:"",items:[]}):d.push({name:"VEXos	 : "+i.Utils.vexos.toVersion(r.brain.vexos),type:u.TreeItemCollapsibleState.None,tag:"vexos-good",items:[]}),d.push({name:"name	 : "+r.brain.name,type:u.TreeItemCollapsibleState.None,items:[],tag:"name"}),d.push({name:"team	 : "+r.brain.team,type:u.TreeItemCollapsibleState.None,items:[],tag:"team"}),d.push({name:"id		 : "+r.brain.ssn.substring(2),type:u.TreeItemCollapsibleState.None,items:[]}),r.vms&&r.vms.count>0&&d.push({name:"python	 : "+i.Utils.vexos.toVersion(r.vms.items[0].version)+" ("+r.vms.items[0].crc32+")",type:u.TreeItemCollapsibleState.None,items:[],data:0}),l[o].items=this._getSerialNode(e),l[s].items=this._getProgramsTree(r),l[a].items=this._getDeviceNode(r,e.platform)}return r?.system?.radio_linked?c={icon:this.getVEXThemeIcon(e.platform,i.Device.Controller,""),name:" Controller - linked",type:u.TreeItemCollapsibleState.None,items:[]}:r?.system?.controller_tethered?c={icon:this.getVEXThemeIcon(e.platform,i.Device.Controller,""),name:" Controller - tethered",type:u.TreeItemCollapsibleState.None,items:[]}:c={icon:this.getVEXThemeIcon(e.platform,i.Device.Controller,""),name:" Controller - not linked",type:u.TreeItemCollapsibleState.None,items:[]},[n,c]}_parseBootloaderEXPBrain(e){this.systemInfo=[];let t=0,o=1,s=2,a=3;if(e.json==="{}"||e.json==="")return;let r=e.vexComSystemInfo,n={items:[],name:"",type:u.TreeItemCollapsibleState.None},c={items:[],name:"",type:u.TreeItemCollapsibleState.None};if(r?.brain?.bootloader){n={icon:this.getVEXThemeIcon(e.platform,e.device,"list.warningForeground"),name:" Brain",type:u.TreeItemCollapsibleState.Expanded,tag:"vexos-update",items:[]};let l=n.items;l.push({name:"system",type:u.TreeItemCollapsibleState.Expanded,items:[]}),l.push({name:"serial port",type:u.TreeItemCollapsibleState.Expanded,items:[]});let d=l[t].items;d.push({icon:this._cautionIcon,name:"VEXos		 : 0.0.0.0",type:u.TreeItemCollapsibleState.None,items:[]}),d.push({name:"bootloader	 : "+r.brain.bootloader,type:u.TreeItemCollapsibleState.None,items:[]}),d.push({name:"version		 : "+i.Utils.vexos.toVersion(r.brain.version),type:u.TreeItemCollapsibleState.None,items:[]}),d=l[o].items,d.push({name:"communication	 : "+e.communication,type:u.TreeItemCollapsibleState.None,items:[]});let v=oo.type()==="Windows_NT"?"user				 : ":"user			 : ";d.push({name:v+e.user,type:u.TreeItemCollapsibleState.None,items:[]})}return r?.system?.radio_linked?c={icon:this.getVEXThemeIcon(e.platform,i.Device.Controller,""),name:" Controller - linked",type:u.TreeItemCollapsibleState.None,items:[]}:r?.system?.controller_tethered?c={icon:this.getVEXThemeIcon(e.platform,i.Device.Controller,""),name:" Controller - tethered",type:u.TreeItemCollapsibleState.None,items:[]}:c={icon:this.getVEXThemeIcon(e.platform,i.Device.Controller,""),name:" Controller - not linked",type:u.TreeItemCollapsibleState.None,items:[]},[n,c]}_parseEXPController(e){this.systemInfo=[];let r=e.vexComSystemInfo,n={items:[],name:"",type:u.TreeItemCollapsibleState.None},c={items:[],name:"",type:u.TreeItemCollapsibleState.None};if(r?.brain?.name){n={icon:this.getVEXThemeIcon(e.platform,i.Device.Brain,""),name:" Brain",type:u.TreeItemCollapsibleState.Expanded,items:[]};let l=n.items;l.push({name:"system",type:u.TreeItemCollapsibleState.Expanded,items:[]}),l.push({name:"serial port",type:u.TreeItemCollapsibleState.Expanded,items:[]}),l.push({name:"programs",type:u.TreeItemCollapsibleState.Expanded,items:[]}),l.push({name:"devices",type:u.TreeItemCollapsibleState.Expanded,items:[]});let d=l[0].items;d.push({name:"VEXos	 : "+i.Utils.vexos.toVersion(r.brain.vexos),type:u.TreeItemCollapsibleState.None,tag:"vexos-good",items:[]}),d.push({name:"name	 : "+r.brain.name,type:u.TreeItemCollapsibleState.None,items:[],tag:"name"}),d.push({name:"team	 : "+r.brain.team,type:u.TreeItemCollapsibleState.None,items:[],tag:"team"}),d.push({name:"id		 : "+r.brain.ssn.substring(2),type:u.TreeItemCollapsibleState.None,items:[]}),r.vms&&r.vms.count>0&&d.push({name:"python	 : "+i.Utils.vexos.toVersion(r.vms.items[0].version)+" ("+r.vms.items[0].crc32+")",type:u.TreeItemCollapsibleState.None,items:[],data:0}),l[1].items=this._getSerialNode(e),l[2].items=this._getProgramsTree(r),l[3].items=this._getDeviceNode(r,e.platform)}else r?.system?.controller_tethered?n={icon:this.getVEXThemeIcon(e.platform,i.Device.Brain,""),name:" Brain - tethered",type:u.TreeItemCollapsibleState.None,items:[]}:n={icon:this.getVEXThemeIcon(e.platform,i.Device.Brain,"list.warningForeground"),name:" Brain - not linked",type:u.TreeItemCollapsibleState.None,items:[]};if(r?.controller){e.needsRadioUpdate||e.needsUsbUpdate?c={icon:this.getVEXThemeIcon(e.platform,i.Device.Controller,"list.warningForeground"),name:" Controller",type:u.TreeItemCollapsibleState.Expanded,tag:"vexos-controller-update",items:[]}:c={icon:this.getVEXThemeIcon(e.platform,i.Device.Controller,""),name:" Controller",type:u.TreeItemCollapsibleState.Expanded,tag:"controller",items:[]};let l=c.items;e.needsRadioUpdate?l.push({icon:this._cautionIcon,name:"radio		: "+i.Utils.vexos.toVersion(r.controller.version),type:u.TreeItemCollapsibleState.None,tag:"controller-radio",items:[]}):l.push({name:"radio		: "+i.Utils.vexos.toVersion(r.controller.version),type:u.TreeItemCollapsibleState.None,tag:"controller-radio",items:[]}),e.needsUsbUpdate?l.push({icon:this._cautionIcon,name:"usb			: "+i.Utils.vexos.toVersion(r.controller.atmel),type:u.TreeItemCollapsibleState.None,tag:"controller-atmel",items:[]}):l.push({name:"usb			: "+i.Utils.vexos.toVersion(r.controller.atmel),type:u.TreeItemCollapsibleState.None,tag:"controller-atmel",items:[]})}else if(r?.controller_boot){c={icon:this.getVEXThemeIcon(e.platform,i.Device.Controller,"list.errorForeground"),name:" Controller",type:u.TreeItemCollapsibleState.Expanded,tag:"vexos-controller-update",items:[]};let l=c.items;l.push({icon:this._errorIcon,name:"radio		: 0.0.0.0",type:u.TreeItemCollapsibleState.None,tag:"controller-radio",items:[]}),e.needsUsbUpdate?l.push({icon:this._cautionIcon,name:"usb			: "+i.Utils.vexos.toVersion(r.controller_boot.atmel),type:u.TreeItemCollapsibleState.None,tag:"controller-atmel",items:[]}):l.push({name:"usb			: "+i.Utils.vexos.toVersion(r.controller_boot.atmel),type:u.TreeItemCollapsibleState.None,tag:"controller-atmel",items:[]})}return[n,c]}_parseDFUEXPBrain(e){}_parseBootloaderBrain(e){this.systemInfo=[];let r={items:[],name:"",type:u.TreeItemCollapsibleState.None};r={icon:this.getVEXThemeIcon(e.platform,e.device,"list.errorForeground"),name:` ${e.device}`,type:u.TreeItemCollapsibleState.Expanded,tag:"vexos-update",items:[]};let n=r.items;n.push({name:"system",type:u.TreeItemCollapsibleState.Expanded,items:[]});let c=n[0].items;return c.push({icon:this._errorIcon,name:"VEXos		 : 0.0.0.0 ",type:u.TreeItemCollapsibleState.None,tag:"",items:[]}),c.push({name:"bootloader	 : "+e.bootMode,type:u.TreeItemCollapsibleState.None,items:[]}),c.push({name:"vid			 : 0x"+e.vid,type:u.TreeItemCollapsibleState.None,items:[]}),c.push({name:"pid			 : 0x"+e.pid,type:u.TreeItemCollapsibleState.None,items:[]}),[r]}_parseBootloaderController(e){this.systemInfo=[];let r={items:[],name:"",type:u.TreeItemCollapsibleState.None};r={icon:this.getVEXThemeIcon(e.platform,e.device,"list.errorForeground"),name:` ${e.device}`,type:u.TreeItemCollapsibleState.Expanded,tag:"dfu-recover",items:[]};let n=r.items;n.push({name:"system",type:u.TreeItemCollapsibleState.Expanded,items:[]});let c=n[0].items;c.push({icon:this._errorIcon,name:"radio		 : 0.0.0.0 ",type:u.TreeItemCollapsibleState.None,items:[]}),c.push({icon:this._errorIcon,name:"usb			 : 0.0.0.0 ",type:u.TreeItemCollapsibleState.None,items:[]});let l={name:"bootloader	 : "+e.bootMode,type:u.TreeItemCollapsibleState.Expanded,items:[]};return l.items.push({name:"vid	 : 0x"+e.vid,type:u.TreeItemCollapsibleState.None,items:[]}),l.items.push({name:"pid	 : 0x"+e.pid,type:u.TreeItemCollapsibleState.None,items:[]}),c.push(l),[r]}_getSerialNode(e){let t=[];t.push({name:"communication	 : "+e.communication,type:u.TreeItemCollapsibleState.None,items:[]});let o=oo.type()==="Windows_NT"?"user				 : ":"user			 : ";return t.push({name:o+e.user,type:u.TreeItemCollapsibleState.None,items:[]}),t}_getProgramsTree(e){let t=[];return e.programs.items.forEach(o=>{if(o){let s=Number(o.slot)+1,a=to.join("vex",s.toString()),r="C++",n=to.join(a,o.file+".cpp");o.type==="bina"&&(r="Python",n=to.join(a,o.file+".py"));let c={icon:u.ThemeIcon.File,name:`${s}:	 ${o.file}`,type:u.TreeItemCollapsibleState.Collapsed,items:[],data:s,tag:"program",slot:s,uri:n};c.items.push({name:"slot		: "+s,type:u.TreeItemCollapsibleState.None,items:[],data:s}),c.items.push({name:"file		: "+o.binfile,type:u.TreeItemCollapsibleState.None,items:[],data:o.binfile,tag:"binfile"}),c.items.push({name:"type		: "+r,type:u.TreeItemCollapsibleState.None,items:[],data:r}),c.items.push({name:`size		: ${(o.size/1024).toFixed(2)}kB`,type:u.TreeItemCollapsibleState.None,items:[],data:o.size}),c.items.push({name:"time		: "+o.time,type:u.TreeItemCollapsibleState.None,items:[],data:o.time}),t.push(c)}}),t.sort((o,s)=>{let a=o.slot,r=s.slot;return a<r?-1:a>r?1:0}),t}_getDeviceNode(e,t){let o=[],s=23;for(let a=0;a<e.devices.count;a++){if(e.devices.items[a].type===22&&t===i.Platform.EXP)continue;e.devices.items[a].port!==s?o.push({name:"port_"+e.devices.items[a].port+"	 ("+this._getDeviceType(e.devices.items[a].type,t)+")",type:u.TreeItemCollapsibleState.Collapsed,items:[]}):o.push({name:"Battery",type:u.TreeItemCollapsibleState.Collapsed,items:[]});let r=o[a].items;r.push({name:"type		 : "+this._getDeviceType(e.devices.items[a].type,t),type:u.TreeItemCollapsibleState.None,items:[]}),r.push({name:"version	 : "+i.Utils.vexos.toVersion(e.devices.items[a].version),type:u.TreeItemCollapsibleState.None,items:[]}),r.push({name:"boot	 : "+i.Utils.vexos.toVersion(e.devices.items[a].boot),type:u.TreeItemCollapsibleState.None,items:[]})}return o}getVEXThemeIcon(e,t,o){let s=i.Extension.Icons.getIconStr(e,t);return new u.ThemeIcon(s,new u.ThemeColor(o))}refresh(e){this._device=e,this.systemInfo=[],this.getSystemInfo().then(()=>{this._onDidChangeTreeData.fire(void 0)}).catch(t=>{console.log(t)})}clear(){this.systemInfo=[],this._onDidChangeTreeData.fire(void 0)}getTreeItem(e){var t;if(e===void 0)t=new u.TreeItem("No systemInfo",u.TreeItemCollapsibleState.None);else{if(e.name===void 0)return;t=new u.TreeItem(e.name,e.type),e.icon!==void 0&&(t.iconPath=e.icon),e.tag!==void 0&&(e.tag==="program"&&(t.contextValue="progItem"),e.tag==="EXP Brain"&&(t.contextValue="expBrainItem"),e.tag==="IQ 2nd Generation Brain"&&(t.contextValue="iq2BrainItem"),e.tag==="V5 Brain"&&(t.contextValue="v5BrainItem"),e.tag==="program-empty"&&(t.contextValue="progEmptyItem"),e.tag==="binfile"&&(t.contextValue="fileItem"),e.tag==="slot"&&(t.contextValue="slotItem"),e.tag==="name"&&(t.contextValue="brainNameItem"),e.tag==="team"&&(t.contextValue="teamNumberItem"),e.tag==="vexos-update"&&(t.contextValue="vexosUpdateItem"),e.tag==="dfu-recover"&&(t.contextValue="dfuRecoverItem"),e.tag==="vexos-controller-update"&&(t.contextValue="vexosControllerUpdateItem"),e.tag==="vexos-brain-update"&&(t.contextValue="vexosBrainUpdateItem"),e.tag==="vexos-good"&&(t.contextValue="vexosGoodItem"),e.tag==="controller-atmel"&&(t.contextValue="controllerAtmelItem"),e.tag==="controller-radio"&&(t.contextValue="controllerRadioItem"),e.tag==="controller"&&(t.contextValue="controllerItem"),e.tag==="brain"&&(t.contextValue="brainItem")),e.uri!==void 0&&(t.resourceUri=u.Uri.file(e.uri)),e.data!==void 0&&e.name.match("python")&&e.tag==="vmrefresh"&&(t.contextValue="python")}return t}getChildren(e){return this.systemInfo.length===0?(this.systemInfo.push({name:"No VEX Device Connected",type:u.TreeItemCollapsibleState.None,items:[]}),Promise.resolve(this.systemInfo)):e===void 0?Promise.resolve(this.systemInfo):Promise.resolve(e.items)}get deviceInfo(){return this._deviceInfo}};var Le=O(require("vscode"));var Rt=class{constructor(e,t){this._context=e;this._vexcomInfo=t}resolveWebviewView(e,t,o){this._view=e,e.webview.options={enableScripts:!0,localResourceRoots:[Le.Uri.joinPath(this._context.extensionUri,"resources","icons"),Le.Uri.joinPath(this._context.extensionUri,"resources","webviews"),Le.Uri.joinPath(this._context.extensionUri,"dist","webviews","views"),Le.Uri.joinPath(this._context.extensionUri,"node_modules","@vscode","webview-ui-toolkit","dist"),Le.Uri.joinPath(this._context.extensionUri,"node_modules","@vscode","codicons","dist"),Le.Uri.joinPath(this._context.extensionUri,"resources","webviews","libs"),Le.Uri.joinPath(this._context.extensionUri,"webviews","view")]},e.webview.html=this._getHtmlForWebview(e.webview),e.webview.onDidReceiveMessage(s=>{switch(s.type){case"newProjectBtn":{console.log("New Project Button Clicked"),i.Extension.Command.newProject();break}case"importProjectBtn":{console.log("Import Project Button Clicked"),i.Extension.Command.importProject();break}case"vexcomVersion":{console.log("VEXCOM VERSION Called");break}case"setContext":return i.Extension.Context.setDebug(!0)}})}_getHtmlForWebview(e){let t=e.asWebviewUri(Le.Uri.joinPath(this._context.extensionUri,"dist","webviews","views","homeView.js")),o=e.asWebviewUri(Le.Uri.joinPath(this._context.extensionUri,"resources","webviews","libs","jquery","jquery.js")),s=e.asWebviewUri(Le.Uri.joinPath(this._context.extensionUri,"resources","webviews","style","reset.css")),a=e.asWebviewUri(Le.Uri.joinPath(this._context.extensionUri,"resources","webviews","style","vscode.css")),r=e.asWebviewUri(Le.Uri.joinPath(this._context.extensionUri,"resources","webviews","style","homeView.css")),n=e.asWebviewUri(Le.Uri.joinPath(this._context.extensionUri,"node_modules","@vscode","webview-ui-toolkit","dist","toolkit.js")),c=e.asWebviewUri(Le.Uri.joinPath(this._context.extensionUri,"node_modules","@vscode","codicons","dist","codicon.css")),l=i.Extension.version(),d=qs();return`<!DOCTYPE html>
			<html lang="en">
			<head>
				<meta charset="UTF-8">
				<!--
					Use a content security policy to only allow loading images from https or from our extension directory,
					and only allow scripts that have a specific nonce.
				-->
				<!--
				<meta http-equiv="Content-Security-Policy" content="default-src 'none'; style-src ${e.cspSource}; script-src 'nonce-${d}';">
				--> 
				<meta name="viewport" content="width=device-width, initial-scale=1.0">
		
				<!--Semantic-->
				<script src="${o}"><\/script>				
				<link href="${s}" rel="stylesheet">
				<link href="${a}" rel="stylesheet">
				<link href="${s}" rel="stylesheet">
				<link href="${r}"  rel="stylesheet">
				<link href="${c}"     rel="stylesheet">
				<script nonce="${d}" src="${o}"><\/script>
				<script nonce="${d}" type="module" src="${n}"><\/script>
				<script nonce="${d}" src="${t}"><\/script>


				<title>Vex</title>
			</head>
			<body>
				<vscode-button class="strectch-row" id="newProjectBtn" appearance="primary" aria-label="New Projet" >New Project</vscode-button>
				<vscode-button class="strectch-row" id="importProjectBtn" appearance="primary" aria-label="Import Project">Import Project</vscode-button>
				<div class="strectch-column-div"></div>

				<div class="page-footer noselect">
					<h4 id="extVersion" class="version">${l}</h4>
					<h4 id="vexcomVersion" class="version">vexcom:${this._vexcomInfo.app.version}</h4>

				</div>
			</body>
			</html>`}};Rt.viewType="vex.vex-sidebar-home-webview";function qs(){let f="",e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";for(let t=0;t<32;t++)f+=e.charAt(Math.floor(Math.random()*e.length));return f}var pe=O(require("vscode"));var io=require("fs"),Js=require("path"),Qs=require("markdown-it"),ps=require("highlight.js").default,Ks=require("markdown-it-front-matter"),_e=class{constructor(e){this.v5PythonMdList=[];this.v5CppMdList=[];this.expPythonMdList=[];this.expCppMdList=[];this.iq2PythonMdList=[];this.iq2CppMdList=[];this._context=e,_e._extensionUri=e.extensionUri}async initMarkList(){this.v5CppMdList=await this.buildMDList(i.Platform.V5,i.Language.cpp),this.v5PythonMdList=await this.buildMDList(i.Platform.V5,i.Language.python),this.expCppMdList=await this.buildMDList(i.Platform.EXP,i.Language.cpp),this.expPythonMdList=await this.buildMDList(i.Platform.EXP,i.Language.python),this.iq2CppMdList=await this.buildMDList(i.Platform.IQ2,i.Language.cpp),this.iq2PythonMdList=await this.buildMDList(i.Platform.IQ2,i.Language.python)}async buildMDList(e,t){let o=_e.mdFolderNames.get(`${e}_${t}`)?_e.mdFolderNames.get(`${e}_${t}`):void 0;if(!o)return[];let s=pe.Uri.joinPath(this._context.extensionUri,"resources","md",o,"en"),a=[];return(0,io.existsSync)(s.fsPath)?((await pe.workspace.fs.readDirectory(s)).forEach(n=>{if(n[1]===pe.FileType.Directory){let c={language:t,platform:e,mdUri:pe.Uri.joinPath(s,n[0],`${n[0]}.md`),name:`${n[0]}`};a.push(c)}}),a||[]):[]}getActiveList(e,t){return e===i.Platform.EXP&&t===i.Language.cpp?this.expCppMdList:e===i.Platform.EXP&&t===i.Language.python?this.expPythonMdList:e===i.Platform.V5&&t===i.Language.cpp?this.v5CppMdList:e===i.Platform.V5&&t===i.Language.python?this.v5PythonMdList:e===i.Platform.IQ2&&t===i.Language.cpp?this.iq2CppMdList:e===i.Platform.IQ2&&t===i.Language.python?this.iq2PythonMdList:[]}async Show(e){if(console.log("resolve Webview"),_e._isRunning){this._panel.webview.html=_e._getHtmlForWebview(this._panel.webview,e),this._panel.reveal(this._panel.viewColumn);return}return this._panel=pe.window.createWebviewPanel(_e.viewType,"Vex Command Help",{viewColumn:pe.ViewColumn.Two,preserveFocus:!1}),_e._isRunning=!0,_e._projectOptionsList=kt,await _e.resolveWebviewView(this._panel,e)}static async resolveWebviewView(e,t){console.log("resolve Webview"),this._view=e;let o=!1;console.log("resolve Webview");let s={event:"create",projectPath:"",projectIndex:-1,vexSettings:{extension:{json:1,version:""},project:{sdkVersion:"",creationDate:"",description:"",language:void 0,name:"",platform:void 0,slot:1}},zipName:""};for(e.webview.options={enableScripts:!0,localResourceRoots:[pe.Uri.joinPath(_e._extensionUri,"resources","icons"),pe.Uri.joinPath(_e._extensionUri,"dist","views"),pe.Uri.joinPath(_e._extensionUri,"node_modules","@vscode","webview-ui-toolkit","dist"),pe.Uri.joinPath(_e._extensionUri,"node_modules","@vscode","codicons","dist"),pe.Uri.joinPath(_e._extensionUri,"resources","webviews","libs"),pe.Uri.joinPath(_e._extensionUri,"resources","md")]},e.webview.html=_e._getHtmlForWebview(e.webview,t),e.webview.onDidReceiveMessage(a=>{if(console.log("Provider Recieved",a),!!a)switch(a.type){case"cancelBtn":{_e._isRunning=!1,s.event="cancel",s.projectIndex=-1,s.zipName="",s.vexSettings=void 0,e.dispose();break}}}),e.onDidDispose(()=>{_e._isRunning&&(console.log("Disposed"),s.event="disposed"),o=!0,_e._isRunning=!1});!o;)await new Promise(a=>setTimeout(a,500));return console.log("Create Project DONE"),s}static _getHtmlForWebview(e,t){let o=e.asWebviewUri(pe.Uri.joinPath(this._extensionUri,"resources","webviews","libs","jquery","jquery.js")),s=e.asWebviewUri(pe.Uri.joinPath(this._extensionUri,"resources","webviews","style","highlight.css")),a=e.asWebviewUri(pe.Uri.joinPath(this._extensionUri,"resources","webviews","style","reset.css")),r=e.asWebviewUri(pe.Uri.joinPath(this._extensionUri,"resources","webviews","style","markdown.css")),n=e.asWebviewUri(pe.Uri.joinPath(this._extensionUri,"resources","webviews","style","main.css")),c=e.asWebviewUri(pe.Uri.joinPath(this._extensionUri,"resources","md","v5","sensing_vision_objects_angle.md")),l=e.asWebviewUri(pe.Uri.joinPath(this._extensionUri,"resources","md","v5","_sensing_vision_objects_angle.html")),d=e.asWebviewUri(pe.Uri.joinPath(this._extensionUri,"node_modules","@vscode","webview-ui-toolkit","dist","toolkit.js")),v=e.asWebviewUri(pe.Uri.joinPath(this._extensionUri,"node_modules","@vscode","codicons","dist","codicon.css")),V=e.asWebviewUri(pe.Uri.joinPath(this._extensionUri,"node_modules","@vscode","codicons","dist","codicon.svg")),U=ee=>{ee.core.ruler.push("source_map_data_attribute",oe=>{for(let z of oe.tokens)z.map&&z.type!=="inline"&&(z.attrSet("data-line",String(z.map[0])),z.attrJoin("class","code-line"),z.attrJoin("dir","auto"))});let ie=ee.renderer.rules.html_block;ie&&(ee.renderer.rules.html_block=(oe,z,we,ne,le)=>`<div ${le.renderAttrs(oe[z])} ></div>
`+ie(oe,z,we,ne,le));let re=e,M=ee.renderer.rules.image;ee.renderer.rules.image=(oe,z,we,ne,le)=>{let se=oe[z];se.attrJoin("class","loading");let Ue=se.attrGet("src");if(Ue){ne.containingImages?.push({src:Ue});let _t=Zs(Ue);if(se.attrSet("id",`image-hash-${_t}`),!se.attrGet("data-src")){let ye=pe.Uri.file(Js.dirname(t.fsPath)),X=re.asWebviewUri(pe.Uri.joinPath(ye,Ue));se.attrSet("src",X.toString()),se.attrSet("data-src",Ue)}}return M?M(oe,z,we,ne,le):le.renderToken(oe,z,we)}},P=Qs({html:!0,highlight:(ee,ie)=>{let re=ie;if(re==="don"&&(re="python"),ps.getLanguage(re))try{return`<div>${ps.highlight(ee,{language:ie,illegal:!0}).value}</div>`}catch{}return`<code><div>${ee}
</div></code>`}});P.linkify.set({fuzzyLink:!1});let R;Ks({block:{ruler:{before:(ee,ie,re)=>{R=re}}}},()=>{}),P.block.ruler.before("fence","front_matter",R,{alt:["paragraph","reference","blockquote","list"]});let E=(0,io.readFileSync)(t.fsPath),k=new TextDecoder().decode(E).split(`
`);k.shift(),k.shift(),k.shift(),k.shift(),k.unshift("\r"),k.unshift("\r");let y=k.join(String.fromCharCode(10)),J=P.use(U).render(y),T=Ys();return`<!DOCTYPE html>
			<html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <!--
                        Use a content security policy to only allow loading images from https or from our extension directory,
                        and only allow scripts that have a specific nonce.
                    -->
					<!--
                    <meta http-equiv="Content-Security-Policy" content="default-src 'none'; style-src ${e.cspSource}; script-src 'nonce-${T}';">
					--> 
					<meta name="viewport" content="width=device-width, initial-scale=1.0">

					

					<link href="${r}"     rel="stylesheet">
					<link href="${s}"     rel="stylesheet">
                    <script nonce="${T}" src="${o}"><\/script>
					<script nonce="${T}" type="module" src="${d}"><\/script>


                    <title>Create new vex project</title>
                </head>
                <body>
                    ${J}
				</body>
			</html>`}},it=_e;it.viewType="general.commandHelp",it._isRunning=!1;(e=>e.mdFolderNames=new Map([["V5_cpp","V5 CPP"],["V5_python","V5 Python"],["EXP_cpp","EXP CPP"],["EXP_python","EXP Python"],["IQ2_cpp","IQ CPP"],["IQ2_python","IQ Python"]]))(it||(it={}));function Ys(){let f="",e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";for(let t=0;t<32;t++)f+=e.charAt(Math.floor(Math.random()*e.length));return f}function ms(f,e){return(e<<5)-e+f|0}function Zs(f){let e=ms(149417,0);for(let t=0,o=f.length;t<o;t++)e=ms(f.charCodeAt(t),e);return e}var Et=O(require("path")),et=O(require("os")),Mt;(si=>{let f,e,t,o,s,a,r,n,c,l,d,v=!1,V=!1,U=!1,P;async function R(m,g){i.Extension.context=m,f=m,e=g;let S=await new h(i.Extension.getVexcomUri(f).fsPath,"").getVersion(),C=JSON.parse(S.stdout);e.appendLine(`VEXCOM Version:        ${C.app.version} ${C.app.date}`),e.appendLine("");let _=Q=>e.appendLine(`${Q}`);a=new so(f),r=new Rt(f,C),p.window.registerTreeDataProvider("vex-sidebar-view",a),p.window.registerWebviewViewProvider("vex-sidebar-home-webview",r),n=new it(f),n.initMarkList(),t=new ue(f,_),o=new Ne(f,_);let w=p.workspace.getConfiguration().get(i.Extension.Settings.hostNameID,p.ConfigurationTarget.Global).toString(),F=p.workspace.getConfiguration().get(i.Extension.Settings.portID,p.ConfigurationTarget.Global);if(P=new ht({port:F,host:w},_),p.workspace.getConfiguration().get(i.Extension.Settings.enableWebsocketServerID,p.ConfigurationTarget.Global).toString()==="Enable"){d?.write(`Starting VEX Websocket ${P.websocketServer.address()}`);let Q=p.workspace.getConfiguration().get(i.Extension.Settings.hostNameID,p.ConfigurationTarget.Global).toString(),K=p.workspace.getConfiguration().get(i.Extension.Settings.portID,p.ConfigurationTarget.Global);P.start({port:K,host:Q})}P.on("connection",(Q,K)=>{let ke=P.deviceWSList.concat(P.vscodeWSList);if(K.url.includes(P.deviceURL)){let Re=Z.colorText(`Device Websocket Connection: ws://${K.socket.remoteAddress}:${K.socket.remotePort}`,Z.TextColors.green);d.write(`${Re}\r
`),Q.on("message",fe=>{let rt=Z.colorText(`ws://${K.socket.remoteAddress}:${K.socket.remotePort}->`,Z.TextColors.cyan);d.write(`${rt}${fe}`)})}else if(K.url.includes(P.vscodeURL)){let Re=Z.colorText(`VEX Command Websocket Connection: ws://${K.socket.remoteAddress}:${K.socket.remotePort}`,Z.TextColors.green);d.write(`${Re}\r
`),Q.on("message",fe=>{let rt=Z.colorText(`ws://${K.socket.remoteAddress}:${K.socket.remotePort}->`,Z.TextColors.blue),tt=fe.toString().split(" "),Tt=tt.shift().toString();p.commands.executeCommand(Tt,tt).then(co=>{Q.send(JSON.stringify(co))}),d.write(`${rt}${fe}\r
`)})}Q.on("close",()=>{let Re;K.url.includes(P.deviceURL)?Re=Z.colorText(`Device Websocket Disconnected: ws://${K.socket.remoteAddress}:${K.socket.remotePort}`,Z.TextColors.red):K.url.includes(P.vscodeURL)&&(Re=Z.colorText(`VEX Command Websocket Disconnected: ws://${K.socket.remoteAddress}:${K.socket.remotePort}`,Z.TextColors.red)),d?.write(`${Re}\r
`)})}),s=new wt(f),c=new Ce(f),o.On("Build-Data",Q=>{l.writeBuildText(Q)}),o.On("Build-Errors",(Q,K)=>{switch(Q){case Ne.BuildErrorCodes.NOT_DEFINED_SDK:case Ne.BuildErrorCodes.MISSING_SDK:o.selectedProject.readProjectSettings().project.language==="cpp"?o.checkCppSdk(o.selectedProject):o.selectedProject.readProjectSettings().project.language==="python"&&o.checkPythonSdk(o.selectedProject),l.write(K);break;case Ne.BuildErrorCodes.MAKE_DOES_NOT_EXIST:case Ne.BuildErrorCodes.TOOLCHAIN_DOES_NOT_EXIST:case Ne.BuildErrorCodes.NOT_DEFINED_TOOLCHAIN:o.checkToolchain(!0),l.write(K);break;case Ne.BuildErrorCodes.COMPILER_ERROR:l.writeBuildErrorText(K);break;default:l.write(K)}}),o.On("Build-Exit",(Q,K)=>{Q===void 0||Q!==0?e.appendLine(`[Command]: ${K} Failed: make process closed with exit code : ${Q}`):e.appendLine(`[Command]: ${K} Finished: Exit Code ${Q}`),l.write(`\r
`)}),setInterval(async()=>{!t.selectedDevice||!p.window.state.focused||(t.selectedDevice instanceof Xe?a.refresh(t.selectedDevice):xt())},3e3),t.on("VEX_Device_Detected",re),t.on("VEX_Device_Disconnected",M),t.on("VEX_DFU_Device_Detected",oe),t.on("VEX_DFU_Device_Disconnected",z),t.startSearch(),f.subscriptions.push(p.commands.registerCommand(Ce.slotCmdId,le)),f.subscriptions.push(p.commands.registerCommand(Ce.playCmdId,Ue)),f.subscriptions.push(p.commands.registerCommand(Ce.stopCmdId,_t)),f.subscriptions.push(p.commands.registerCommand(Ce.buildCmdId,de)),f.subscriptions.push(p.commands.registerCommand(Ce.listDevicesCmdId,X)),f.subscriptions.push(p.commands.registerCommand(Ce.selectProjectCmdId,ne)),f.subscriptions.push(p.commands.registerCommand(Ce.selectPythonCmdId,we)),f.subscriptions.push(p.commands.registerCommand(i.Extension.Command.buildID,wo)),f.subscriptions.push(p.commands.registerCommand(i.Extension.Command.cleanID,Po)),f.subscriptions.push(p.commands.registerCommand(i.Extension.Command.rebuildID,Co)),f.subscriptions.push(p.commands.registerCommand(i.Extension.Command.newProjectID,_o)),f.subscriptions.push(p.commands.registerCommand(i.Extension.Command.importID,Uo)),f.subscriptions.push(p.commands.registerCommand(i.Extension.Command.settingUIID,yo)),f.subscriptions.push(p.commands.registerCommand(i.Extension.Command.eraseID,ye)),f.subscriptions.push(p.commands.registerCommand(i.Extension.Command.downloadID,se)),f.subscriptions.push(p.commands.registerCommand(i.Extension.Command.systemInfoID,xt)),f.subscriptions.push(p.commands.registerCommand(i.Extension.Command.screenGrabID,Do)),f.subscriptions.push(p.commands.registerCommand(i.Extension.Command.brainNameID,Io)),f.subscriptions.push(p.commands.registerCommand(i.Extension.Command.teamNumberID,Eo)),f.subscriptions.push(p.commands.registerCommand(i.Extension.Command.batteryMedicID,So)),f.subscriptions.push(p.commands.registerCommand(i.Extension.Command.systemUpdateVEXosID,Bt)),f.subscriptions.push(p.commands.registerCommand(i.Extension.Command.systemUpdatePythonVmID,To)),f.subscriptions.push(p.commands.registerCommand(i.Extension.Command.controllerUpdateFirmwareID,no)),f.subscriptions.push(p.commands.registerCommand(i.Extension.Command.dfuUpdateFirmwareID,Vt)),f.subscriptions.push(p.commands.registerCommand(i.Extension.Command.installDrivers,G)),f.subscriptions.push(p.commands.registerCommand(i.Extension.Command.vexCommandHelpID,Vo)),f.subscriptions.push(p.commands.registerCommand(i.Extension.Command.vexCommandHelpShowAllID,ro)),f.subscriptions.push(p.commands.registerCommand(i.Extension.Command.downloadSDKID,No)),f.subscriptions.push(p.commands.registerCommand(i.Extension.Command.downloadToolchainID,$o)),f.subscriptions.push(p.commands.registerCommand(i.Extension.Command.clearLogTerminalID,ko)),f.subscriptions.push(p.commands.registerCommand(i.Extension.Command.clearInterativeTerminalID,Ro)),f.subscriptions.push(p.commands.registerCommand(i.Extension.Command.createNewTerminalSetID,Mo)),f.subscriptions.push(p.commands.registerCommand(i.Extension.Command.controllerUpdateFirmwareAtmelID,hs)),f.subscriptions.push(p.commands.registerCommand(i.Extension.Command.controllerUpdateFirmwareRadioDEVID,ao)),f.subscriptions.push(p.commands.registerCommand(i.Extension.Command.controllerUpdateFirmwareDEVID,fs)),f.subscriptions.push(p.commands.registerCommand(i.Extension.Command.brainUpdateFirmwareDEVID,xs)),o.setup().then(async()=>{let Q=p.Uri.joinPath(f.globalStorageUri,"buildText");if(Z.Log.setBuildLogFileHome(Q),Z.Log.clearTempLog(),o.selectedProject){i.Extension.Context.setIsValidProject(!0),c.selectProjectBtn.text=o.selectedProject.name;let K=o.selectedProject.readProjectSettings();K.project.language===i.Language.python&&(c.selectPythonFileBtn.text=`$(python-qp)${Et.basename(K.project.python.main)}`,c.selectPythonFileBtn.show()),c.selectSlotBtn.text=`$(vex-slot) Slot ${K.project.slot}`,c.deviceListBtn.show(),c.selectSlotBtn.show(),c.buildBtn.show(),c.playBtn.show(),c.stopBtn.show(),c.selectProjectBtn.show();let ke=!1;if(p.window.terminals.forEach(fe=>{(fe.name==="Log"||fe.name==="Interactive Terminal")&&(fe.dispose(),ke=!0)}),ke&&await i.Utils.asyncSleep(500),l=new Z.Log,p.workspace.getConfiguration().get(i.Extension.Settings.enableUserTerminalID,p.ConfigurationTarget.Global).toString()==="Enable"?(d=new Z.Interactive(l.terminal),l.terminal.show(),d.terminal.show()):l.terminal.show(),!s.exist){let fe=await s.download();fe.statusCode!==200&&T(fe)}}else i.Extension.Context.setIsValidProject(!1);jo()}).catch(Q=>{e.appendLine(`${Q}`)}),p.workspace.onDidRenameFiles(Q=>{if(!o.selectedProject)return;let K=o.selectedProject.readProjectSettings();if(K.project.language!=="python")return;let ke=K.project.python.main.replace(Et.sep,"\\");ke=K.project.python.main.replace(String.fromCharCode(92),"\\"),ke=K.project.python.main.replace(String.fromCharCode(47),"\\");let Re=p.Uri.joinPath(o.selectedProject.projectUri,ke);Q.files.forEach(fe=>{fe.oldUri.fsPath===Re.fsPath&&fe.oldUri.fsPath.includes(".py")&&fe.newUri.fsPath.includes(".py")&&fe.oldUri.fsPath.includes(o.selectedProject.projectUri.fsPath)&&(K.project.python.main=p.workspace.asRelativePath(fe.newUri),o.selectedProject.writeProjectSettings(K),c.selectPythonFileBtn.text=`$(python-qp)${Et.basename(K.project.python.main)}`,o.selectedProject.writeProjectSettings(K))})}),p.workspace.onDidChangeConfiguration(k)}si.setup=R;async function E(){t.selectedDevice&&t.selectedDevice instanceof A&&t.selectedDevice.userPort.close(),P.stop()}si.shutDown=E;async function H(){}si.postExtensionSetup=H;async function k(m){i.Extension.Settings.getChangeSettingsList(m).forEach(b=>{switch(b){case i.Extension.Settings.enableUserTerminalID:y();break;case i.Extension.Settings.enableWebsocketServerID:J();break;default:break}})}async function y(){if(!o.selectedProject||!(t.selectedDevice instanceof A)||t.selectedDevice.bootMode!==x.BootMode.app)return;let g=p.workspace.getConfiguration().get(i.Extension.Settings.enableUserTerminalID,p.ConfigurationTarget.Global).toString()==="Enable";if(d&&!g){if(t.selectedDevice?.userPort?.isOpen&&t.selectedDevice.bootMode===x.BootMode.app){let b=t.selectedDevice;t.selectedDevice?.userPort?.close(S=>ie(S,b))}if(d.terminal.dispose(),d=void 0,t.selectedDevice){let b=t.selectedDevice.robotName===""?"":`(${t.selectedDevice.robotName}) ${t.selectedDevice.user}`;p.window.showInformationMessage(`Disabled Interactive Terminal Success: ${t.selectedDevice.platform} ${t.selectedDevice.device} ${b}`)}}else if(!d&&g)if(t.selectedDevice)await(async()=>{if(!(t.selectedDevice instanceof A))return;(t.selectedDevice?.userPort||t.selectedDevice.bootMode===x.BootMode.app)&&(t.selectedDevice?.userPort?.close(ie),await i.Utils.asyncSleep(1e3)),l?.terminal?.dispose(),d?.terminal?.dispose(),l=new Z.Log,d=new Z.Interactive(l.terminal);let S=Z.Log.read();if(await i.Utils.asyncSleep(500),l.writeLogText(S),l.terminal.show(),d.terminal.show(),t.selectedDevice?.userPort?.open(ee),await i.Utils.asyncSleep(1e3),!t.selectedDevice?.userPort?.isOpen){if(t.selectedDevice.platform===i.Platform.V5&&t.selectedDevice.device===i.Device.Controller){let _=`Interactive Terminal Warning: ${t.selectedDevice.platform} ${t.selectedDevice.device} not supported`;ee(new Error(_))}return}d&&(d.registerCB("Input",_=>{t.selectedDevice instanceof A&&t.selectedDevice.userPort.write(_)}),t.selectedDevice.userPort.registerCallback("OnRecieveData",_=>{_!==void 0&&(d?.write(_),P.deviceWSList.forEach(w=>w[0].send(_)))}));let C=t.selectedDevice.robotName===""?"":`(${t.selectedDevice.robotName}) ${t.selectedDevice.user}`;p.window.showInformationMessage(`Enable Interactive Terminal Success: ${t.selectedDevice.platform} ${t.selectedDevice.device} ${C}`)})().catch(async S=>{p.window.showErrorMessage(`Enable Interactive Terminal Error: ${S.message}`),await p.workspace.getConfiguration().update(i.Extension.Settings.enableUserTerminalID,"Disable",p.ConfigurationTarget.Global)});else{l?.terminal&&l?.terminal?.dispose(),l=new Z.Log,d=new Z.Interactive(l.terminal);let b=Z.Log.read();await i.Utils.asyncSleep(500),l.writeLogText(b),l.terminal.show(),d.terminal.show()}}async function J(){if(p.workspace.getConfiguration().get(i.Extension.Settings.enableWebsocketServerID,p.ConfigurationTarget.Global).toString()==="Enable"){let g=p.workspace.getConfiguration().get(i.Extension.Settings.hostNameID,p.ConfigurationTarget.Global).toString(),b=p.workspace.getConfiguration().get(i.Extension.Settings.portID,p.ConfigurationTarget.Global);d.writeLine(`VEX Websocket Server Enabled ${g} ${b}`,Z.TextColors.green),P.start({port:b,host:g})}else d.writeLine("VEX Websocket Server Disabled",Z.TextColors.yellow),P.stop()}let T=(m,g=!0)=>{let b=m.statusCode===0?Z.TextColors.magenta:Z.TextColors.red,S=m.details===""?`[Command]: ${m.command}\r
`:`[Command]: ${m.command} ${m.details}\r
`,C=m.details===""?`[Command]: ${m.command} - (${m.statusCode})`:`[Command]: ${m.command} - (${m.statusCode}) ${m.details}`;e.appendLine(C),m.statusCode!==0&&g&&p.window.showErrorMessage(`${m.details} (${m.statusCode}) - ${m.command}`,{detail:`${m.command}`})};async function ee(m,g=!0){if(!(t.selectedDevice instanceof A))return;let b="",S=Z.TextColors.red;if(m)m.message.toLowerCase().includes("warning")?(b=`${m.message}`,S=Z.TextColors.yellow,p.window.showWarningMessage(b)):(b=`${t.selectedDevice.robotName===""?`${t.selectedDevice.platform} ${t.selectedDevice.device}`:`${t.selectedDevice.platform} ${t.selectedDevice.device} (${t.selectedDevice.robotName})`} ${m}`,S=Z.TextColors.red,p.window.showErrorMessage(b));else{let C=t.selectedDevice.robotName===""?`${t.selectedDevice.platform} ${t.selectedDevice.device}`:`${t.selectedDevice.platform} ${t.selectedDevice.device} (${t.selectedDevice.robotName})`,_=t.selectedDevice instanceof Xe?t.selectedDevice.communication:t.selectedDevice.user;b=`${C} Success: Opening ${_}`,S=Z.TextColors.green,g&&p.window.showInformationMessage(b)}b+=`\r
`,e.appendLine(b),d&&d.write(b,S)}async function ie(m,g){if(!(g instanceof A))return;let b="",S=Z.TextColors.red,C=g.robotName===""?`${g.platform} ${g.device}`:`${g.platform} ${g.device} (${g.robotName})`;if(m&&!m?.message.toLowerCase().includes("port is not open"))b=`${C} ${m}`,S=Z.TextColors.red,p.window.showErrorMessage(b);else{let _=g instanceof Xe?g.communication:g.user,w=`${C} Warning: closed  ${_}`,F=Z.TextColors.yellow;d?.write(w,F)}b+=`\r
`,e.appendLine(b),d&&d?.write(b,S)}async function re(m,g){if(!t.selectedDevice||g){c.deviceListBtn.show();let S=p.workspace.getConfiguration().get(i.Extension.Settings.enableUserTerminalID,p.ConfigurationTarget.Global).toString()==="Enable",C,_="",w;if(C=Wt.createDevice(m),m.device===i.Device.Brain){if(t.selectedDevice=C,!(t.selectedDevice instanceof A))return;g&&(w=await t.selectedDevice.systemInfo(),T(w,!1)),o.selectedProject&&S&&t.selectedDevice.bootMode===x.BootMode.app&&t.selectedDevice.userPort.open(ee),_=C.vexComSystemInfo.brain.name?`( ${C.vexComSystemInfo.brain.name} )`:`( ${C.bootMode} )`,t.checkSystemVEXOS(C).then(N=>{if(t.selectedDevice instanceof A)return T(N,!1),t.selectedDevice.needsVexosUpdate=Boolean(N.statusCode),a.refresh(t.selectedDevice),N}).then(N=>(C.json&&a.refresh(t.selectedDevice),N.statusCode?p.window.showInformationMessage(N.details,"Update","Ignore"):"Ignore")).then(N=>{if(N==="Update")return Bt()}).then(N=>{!N||(m.platform===i.Platform.V5&&N.statusCode===h.ExitCode.vexSucess&&p.window.showInformationMessage("VEXos Update Complete: Power Cycle V5 Brain"),p.commands.executeCommand("setContext",`${i.Extension.name}.vexosBrainUpdateInProgress`,!1))}).catch(N=>{p.commands.executeCommand("setContext",`${i.Extension.name}.vexosBrainUpdateInProgress`,!1);let Q={command:"check vexos",details:N.message,json:"",statusCode:-1};N.message.includes("Cancel Clicked")?T(Q,!1):T(Q)})}else if(m.device===i.Device.Controller&&m.platform!==i.Platform.V5){if(t.selectedDevice=C,!(t.selectedDevice instanceof A))return;g&&(w=await t.selectedDevice.systemInfo(),T(w,!1)),o.selectedProject&&S&&t.selectedDevice.bootMode===x.BootMode.app&&t.selectedDevice.userPort.open(ee),_=C?.vexComSystemInfo?.brain?.name?`( ${C.vexComSystemInfo.brain.name} )`:"",C.platform!==i.Platform.V5&&t.checkControllerVEXOS(C).then(N=>{if(T(N,!1),t.selectedDevice){if(!(t.selectedDevice instanceof A))return;t.selectedDevice.needsVexosUpdate=Boolean(N.statusCode),a.refresh(t.selectedDevice)}else return"Ignore";return N}).then(N=>(C.json&&a.refresh(t.selectedDevice),N.statusCode?p.window.showInformationMessage(N.details,"Update","Ignore"):"Ignore")).then(N=>{if(N==="Update")return no()}).then(N=>{p.commands.executeCommand("setContext",`${i.Extension.name}.vexosControllerUpdateInProgress`,!1)}).catch(N=>{p.commands.executeCommand("setContext",`${i.Extension.name}.vexosControllerUpdateInProgress`,!1);let Q={command:"check vexos",details:N.message,json:"",statusCode:-1};N.message.includes("Cancel Clicked")?T(Q,!1):T(Q)})}else if(m.device===i.Device.Controller&&m.platform===i.Platform.V5){if(t.selectedDevice=C,!(t.selectedDevice instanceof A))return;g&&(w=await t.selectedDevice.systemInfo(),T(w,!1)),o.selectedProject&&S&&t.selectedDevice.bootMode===x.BootMode.app&&t.selectedDevice.userPort.open(ee).then(N=>{N.statusCode===h.ExitCode.vexError?T(N,!1):T(N)}),_=C?.vexComSystemInfo?.brain?.name?`( ${C.vexComSystemInfo.brain.name} )`:""}C.json&&a.refresh(t.selectedDevice),p.window.showInformationMessage(`${m.platform} ${m.device} ${_} Connected`);let F=p.workspace.getConfiguration().get(i.Extension.Settings.buildTypeID,p.ConfigurationTarget.Global).toString();if(c.buildBtn.text="$(vex-download)",c.buildBtn.tooltip=`${F} and Download`,c.deviceListBtn.text=`$(vex-${m.platform}-${m.device}) ${_}`,!o.selectedProject||!(t.selectedDevice instanceof A))return;d&&d.registerCB("Input",N=>{C.userPort.write(N)}),t.selectedDevice?.userPort&&t.selectedDevice.userPort.registerCallback("OnRecieveData",N=>{N!==void 0&&(P.deviceWSList.length&&t.selectedDevice instanceof A&&d.write(`${t.selectedDevice.platform} ${t.selectedDevice.device} ( ${t.selectedDevice.robotName} )->`,Z.TextColors.magenta),d.write(N),P.deviceWSList.forEach(Q=>Q[0].send(N)))})}}async function M(m){if(p.commands.executeCommand("setContext",`${i.Extension.name}.vexosControllerUpdateInProgress`,!1),p.commands.executeCommand("setContext",`${i.Extension.name}.vexosBrainUpdateInProgress`,!1),t.selectedDevice instanceof A&&m.communication===t.selectedDevice.communication){let g=t.selectedDevice.device,b="";if(g===i.Device.Brain?b=t.selectedDevice.vexComSystemInfo.brain.name?`( ${t.selectedDevice.vexComSystemInfo.brain.name} )`:`( ${t.selectedDevice.bootMode} )`:g===i.Device.Controller&&(b=""),!(t.selectedDevice instanceof A))return;if(t.selectedDevice.bootMode===x.BootMode.app){let C=t.selectedDevice;t.selectedDevice?.userPort?.close(_=>ie(_,C))}p.window.showWarningMessage(`${m.platform} ${m.device} ${b} Disconnected`),t.selectedDevice=void 0;let S=p.workspace.getConfiguration().get(i.Extension.Settings.buildTypeID,p.ConfigurationTarget.Global).toString();if(t.activeDeviceList.length){let C={communication:"",bootMode:x.BootMode.unknown,user:"",device:i.Device.Unknown,platform:i.Platform.Unknown,robotName:"",id:"",teamNumber:"",json:""};if(o?.selectedProject){let _=o.selectedProject.readProjectSettings(),w=t.activeDeviceList.filter(F=>_.project.platform===F.platform);C=w.length>=1?w[0]:t.activeDeviceList[0]}else C=t.activeDeviceList[0];re(C)}else if(t.activeDFUDeviceList.length){let C={bootMode:x.BootMode.dfu,device:i.Device.Unknown,id:0,pid:"",platform:i.Platform.Unknown,vid:""};if(o?.selectedProject){let _=o.selectedProject.readProjectSettings(),w=t.activeDFUDeviceList.filter(F=>_.project.platform===F.platform);C=w.length>=1?w[0]:t.activeDFUDeviceList[0]}else C=t.activeDFUDeviceList[0];oe(C)}else c.deviceListBtn.text="",c.deviceListBtn.hide(),c.buildBtn.text="$(vex-build)",c.buildBtn.tooltip=`${S} User Program`,a.clear(),o.selectedProject||c.deviceListBtn.hide()}}async function oe(m,g){if(!t.selectedDevice||g){if(t.selectedDevice instanceof A){let S=t.selectedDevice;if(t.selectedDevice.bootMode===x.BootMode.app){let C=t.selectedDevice;t.selectedDevice?.userPort?.close(_=>ie(_,C))}}let b=p.workspace.getConfiguration().get(i.Extension.Settings.buildTypeID,p.ConfigurationTarget.Global).toString();if(t.selectedDevice=Gt.createDevice(m),c.buildBtn.text="$(vex-download)",c.buildBtn.tooltip=`${b} and Download`,c.deviceListBtn.text=`$(vex-${m.platform}-${m.device}) ${m.bootMode}`,c.deviceListBtn.show(),a.refresh(t.selectedDevice),!(t.selectedDevice instanceof De)||t.selectedDevice.activeCommand===h.CommandID.controllerRadioUpdate||t.selectedDevice.activeCommand===h.CommandID.controllerUsbUpdate||t.selectedDevice.activeCommand===h.CommandID.recoverDFU)return;(m.device===i.Device.Brain||await p.window.showInformationMessage(`${m.platform} ${m.device} (DFU) Detected.  Would you like to recover?`,"Recover")==="Recover")&&Vt()}}async function z(m,g){if(m.platform===t.selectedDevice.platform&&m.device===t.selectedDevice.device&&m.bootMode===t.selectedDevice.bootMode){t.selectedDevice=void 0,a.clear(),p.window.showWarningMessage(`${m.platform} ${m.device} (DFU) Disconnected`);let b=p.workspace.getConfiguration().get(i.Extension.Settings.buildTypeID,p.ConfigurationTarget.Global).toString();if(t.activeDeviceList.length){let S={communication:"",bootMode:x.BootMode.unknown,user:"",device:i.Device.Unknown,platform:i.Platform.Unknown,robotName:"",id:"",teamNumber:"",json:""};if(o?.selectedProject){let C=o.selectedProject.readProjectSettings(),_=t.activeDeviceList.filter(w=>C.project.platform===w.platform);S=_.length>=1?_[0]:t.activeDeviceList[0]}else S=t.activeDeviceList[0];re(S,!0)}else if(t.activeDFUDeviceList.length){let S={bootMode:x.BootMode.dfu,device:i.Device.Unknown,id:0,pid:"",platform:i.Platform.Unknown,vid:""};if(o?.selectedProject){let C=o.selectedProject.readProjectSettings(),_=t.activeDFUDeviceList.filter(w=>C.project.platform===w.platform);S=_.length>=1?_[0]:t.activeDFUDeviceList[0]}else S=t.activeDFUDeviceList[0];oe(S,!0)}else c.deviceListBtn.text="",c.deviceListBtn.hide(),c.buildBtn.text="$(vex-build)",c.buildBtn.tooltip=`${b} User Program`,a.clear(),o.selectedProject||c.deviceListBtn.hide()}}async function we(){e.appendLine("[Command]: Select Python File"),o.selectedProject.readProjectSettings().project.language==="python"&&c.pickPythonFile(o).then(g=>{if(g){c.selectPythonFileBtn.text=g.label;let b=o.selectedProject.readProjectSettings();b.project.python.main=g.description,o.selectedProject.writeProjectSettings(b),e.appendLine(`[Command]: Select Python File: Selected ${g.label}`),e.appendLine(`[Command]: Select Python File: Project Settings ${b}`)}else e.appendLine("[Command]: Select Python File: No File Selected")})}async function ne(){e.appendLine("[Command]: Select Project");let m=await c.selectProject(o);if(m){o.selectedProject=m;let g=o.selectedProject.readProjectSettings();c.selectSlotBtn.text=`$(vex-slot) Slot ${g.project.slot}`,c.selectProjectBtn.text=`${g.project.name}`,e.appendLine(`[Command]: Select Project: Selected ${m.name}`),g.project.language==="cpp"&&(c.selectProjectBtn.show(),c.selectPythonFileBtn.hide()),g.project.language==="python"&&(c.selectProjectBtn.show(),c.selectPythonFileBtn.text=`$(python-qp)${Et.basename(g.project.python.main)}`,c.selectPythonFileBtn.show())}else e.appendLine("[Command]: Select Project: No Project Selected")}async function le(){if(e.appendLine("[Command]: Select Slot"),!o.selectedProject){e.appendLine("[Command]: Select Slot, No Valid VEX Extension Project Open"),p.window.showWarningMessage("No Valid VEX Extension Project Open");return}c.selectSlot().then(m=>{let g=m>0&&m<=8?`Slot ${m} selected`:"No slot selected";if(e.appendLine(`[Command]: Select Slot: ${g}`),o.selectedProject){let b=o.selectedProject.readProjectSettings(),S=m>0&&m<=8?m:b.project.slot;b.project.slot=S,o.selectedProject.writeProjectSettings(b)}})}async function se(){e.appendLine("[Command]: Download User Program");let m={command:i.Extension.Command.downloadID,details:"",statusCode:-1,json:""};if(!o.selectedProject)return m.details="No Valid VEX Extension Project Open",e.appendLine("[Command]: Download User Program, No Valid VEX Extension Project Open"),m;if(!t.selectedDevice)return m.details="No VEX Device Connected",e.appendLine("[Command]: Download User Program, No VEX Device Connected"),m;if(m=await Ot(),m.statusCode!==h.ExitCode.vexSucess)return m;let g=o.selectedProject.readProjectSettings();if(t.selectedDevice.platform!==g.project.platform)return e.appendLine(`[Command]: Download - Error \r
`),e.appendLine(`Wrong Platform: Expected ${g.project.platform} Device, ${t.selectedDevice.platform} ${t.selectedDevice.device} connected`),{command:i.Extension.Command.downloadID,details:`Wrong Platform: Expected ${g.project.platform} Device, ${t.selectedDevice.platform} ${t.selectedDevice.device} connected`,statusCode:-1,json:""};let b,S;g.project.language==="cpp"&&(b=p.Uri.joinPath(o.selectedProject.projectUri,"build"),S=(await p.workspace.fs.readDirectory(b)).filter(F=>F[0].includes(".bin"))[0][0],b=p.Uri.joinPath(b,S)),g.project.language==="python"&&(b=p.Uri.joinPath(o.selectedProject.projectUri,g.project.python.main));let C=Boolean(p.workspace.getConfiguration().get(i.Extension.Settings.runAfterDownload,p.ConfigurationTarget.Global)),_;if(t.selectedDevice instanceof qe||t.selectedDevice instanceof Ke||t.selectedDevice instanceof Je)l.write(`Downloading User Program\r
`),_=await t.selectedDevice.downloadUserProgram(g.project.name,g.project.description,g.project.slot,b,C);else if(t.selectedDevice instanceof Be||t.selectedDevice instanceof Ve)l.write(`Downloading User Program\r
`),_=await t.selectedDevice.downloadUserProgram(g.project.name,g.project.description,g.project.slot,b,C);else if(t.selectedDevice instanceof Xe){let w=p.workspace.getConfiguration().get(i.Extension.Settings.controllerChannel,p.ConfigurationTarget.Global).toString(),F=h.DownloadChannel.vexNoChannel;w==="Download"&&t.selectedDevice.device==="Controller"?F=h.DownloadChannel.vexDownloadchannel:w==="Pit"&&(F=h.DownloadChannel.vexPitChannel),l.write(`Downloading User Program\r
`),_=await t.selectedDevice.downloadUserProgram(g.project.name,g.project.description,g.project.slot,b,C,F)}else throw new Error(`Download Error: Device Not Recognized ${t.selectedDevice.platform} ${t.selectedDevice.device}`);return T(_,!1),_.statusCode===h.ExitCode.vexAPIErrorFilePath&&g.project.language==="python"&&we(),_}async function Ue(){if(!o.selectedProject){e.appendLine("[Command]: Play Program, No Valid VEX Extension Project Open"),p.window.showWarningMessage("No Valid VEX Extension Project Open");return}let m=o.selectedProject.readProjectSettings();if(e.appendLine(`[Command]: Play Slot ${m.project.slot}`),!t.selectedDevice){e.appendLine(`[Command]: Play Slot ${m.project.slot}, no device connected`);return}let g=await Ot();if(g.statusCode!==h.ExitCode.vexSucess)return g.command=h.CommandID.play,T(g),g;if(!!o.selectedProject&&t.selectedDevice instanceof A){if(U){e.appendLine("[Command]: Play Program - Command Dropped");return}return U=!0,t.selectedDevice.play(m.project.slot).then(b=>(U=!1,T(b),b)).catch(b=>{U=!1;let S=JSON.parse(b.message);return T(S),S})}}async function _t(){if(e.appendLine("[Command]: Stop Program"),V){e.appendLine("[Command]: Stop Program - Command Dropped");return}if(o.selectedProject||(e.appendLine("[Command]: Stop Program, No Valid VEX Extension Project Open"),p.window.showWarningMessage("No Valid VEX Extension Project Open")),!t.selectedDevice){e.appendLine("[Command]: Stop Program, no device connected");return}let m=await Ot();if(m.statusCode!==h.ExitCode.vexSucess)return m.command=h.CommandID.stop,T(m),m;if(t.selectedDevice instanceof A)return V=!0,t.selectedDevice.stop().then(g=>(V=!1,T(g),g)).catch(g=>{V=!1;let b=JSON.parse(g.message);return T(b),b})}async function ye(m){if(!o.selectedProject){e.appendLine("[Command]: Stop Program, No Valid VEX Extension Project Open"),p.window.showWarningMessage("No Valid VEX Extension Project Open");return}if(!t.selectedDevice){e.appendLine("[Command]: Stop Program, no device connected");return}if(!A.isTypeOf(t.selectedDevice)){e.appendLine("[Command]: Stop Program, no device connected");return}let g=await Ot();if(g.statusCode!==h.ExitCode.vexSucess)return T(g),g;let b=m,S,C;if(b)C={slot:m.items[0].data,file:m.items[1].data,projectType:m.items[2].data,size:m.items[3].data,time:m.items[4].data},S=m.name.split(":")[1];else{if(!(t.selectedDevice instanceof A))return;let _=t.selectedDevice.vexComSystemInfo,w=[];_.programs&&_.programs.items.forEach(N=>{w.push({label:`$(vex-slot) Slot ${N.slot+1}`,description:`${N.file}.${N.type}`})});let F=await p.window.showQuickPick(w,{placeHolder:"Select a user program to Erase",onDidSelectItem:()=>{}});if(F){let N=new RegExp(/(?<=Slot\s*)(1|2|3|4|5|6|7|8)/),Q=_.programs.items.filter(K=>`${K.slot+1}`===N.exec(F.label)[0])[0];C={slot:Q.slot,file:Q.binfile,projectType:Q.type,size:Q.size,time:Q.time},S=Q.file}else return}p.window.showInformationMessage(`Are you sure you want to erase your user program, ${S}?`,"Erase","Cancel").then(_=>{if(t.selectedDevice instanceof A)switch(_){case"Erase":e.appendLine(`[Command]: Erasing User Program - File: ${C.file} Slot:${C.slot} `),t.selectedDevice.erase(C.file).then(w=>{if(t.selectedDevice instanceof A)return T(w),t.selectedDevice.systemInfo()}).then(w=>{T(w),a.refresh(t.selectedDevice)}).catch(w=>{let F=JSON.parse(w.message);T(F)});break}})}async function X(){if(jt||nt){p.window.showWarningMessage("'List VEX Devices' disabled during update");return}if(!(t.selectedDevice instanceof A)&&!(t.selectedDevice instanceof De))return;let m=t.activeDeviceList,g=t.activeDFUDeviceList,b=!1,S="",C=[];e.appendLine("[Command]: Select VEX Device"),m.length&&(m.forEach(w=>{let F="";t.selectedDevice instanceof A&&(F=t?.selectedDevice?.communication?t?.selectedDevice?.communication:"",(w.robotName!==t.selectedDevice.robotName||w.teamNumber!==t.selectedDevice.teamNumber)&&w.communication===t.selectedDevice.communication&&w.user===t.selectedDevice.user&&t.selectedDevice instanceof A&&(w.communication=t.selectedDevice.communication,w.device=t.selectedDevice.device,w.platform=t.selectedDevice.platform,w.robotName=t.selectedDevice.robotName,w.id=t.selectedDevice.id,w.teamNumber=t.selectedDevice.teamNumber,w.user=t.selectedDevice.user)),e.appendLine(`  -${w.platform} ${w.device}:  ${w.robotName} `);let N={label:`${w.robotName}`,description:`$(vex-${w.platform}-${w.device}) ${w.platform} ${w.device}`,detail:`(User):${w.user}   (Comm):${w.communication}`};w.communication===F?(N.label=`$(star-full)${N.label}`,C.unshift(N),b=!0):C.push(N)}),S="Select VEX Device"),g.length&&(g.forEach(w=>{t.selectedDevice instanceof De&&C.some(N=>w.bootMode===N.label)&&w.bootMode!==t.selectedDevice.bootMode&&w.vid===t.selectedDevice.vid&&w.pid===t.selectedDevice.pid&&t.selectedDevice instanceof De&&(w.bootMode=t.selectedDevice.bootMode,w.vid=t.selectedDevice.pid,w.platform=t.selectedDevice.platform),e.appendLine(`  -${w.platform} ${w.device}:  ${w.bootMode} `);let F={label:`${w.bootMode}`,description:`$(vex-${w.platform}-${w.device}) ${w.platform} ${w.device}`,detail:`(VID):${w.vid}   (PID):${w.pid}`};w.bootMode===F.label&&F.description.includes(`${w.platform} ${w.device}`)&&!b?(b=!0,F.label=`$(star-full)${F.label}`,C.unshift(F)):C.push(F)}),S="Select VEX Device"),!m.length&&!g.length&&(e.appendLine("[Command]: No Devices Found"),S="No VEX Devices Found");let _=await p.window.showQuickPick(C,{placeHolder:S,onDidSelectItem:w=>{w.label.indexOf}});if(_)if(e.appendLine(`[Command]: Selected ${_.label}`),t.selectedDevice instanceof A){let w=m.filter(N=>N.communication===_.detail.split(":")[2])[0],F=g.filter(N=>N.bootMode===_.label)[0];if(t.selectedDevice?.userPort?.isOpen&&t.selectedDevice.bootMode===x.BootMode.app){let N=t.selectedDevice;t.selectedDevice?.userPort?.close(Q=>ie(Q,N))}w?re(w,!0):F&&oe(F,!0)}else if(t.selectedDevice instanceof De){let w=m.filter(N=>N.communication===_.detail.split(":")[2])[0],F=g.filter(N=>N.bootMode===_.label)[0];w?re(w,!0):F&&(t.selectedDevice.platform!==w?.platform||t.selectedDevice.device!==w?.device)&&oe(F,!0)}else return;return _||(t.selectedDevice||(c.deviceListBtn.text=""),e.appendLine("[Command]: No Device Selected ")),_}async function de(){let m="statusBarBuild",g=(C,_)=>{let w="";t.selectedDevice?w+="Download":w+="Build",C?(p.window.showErrorMessage(`${w} Failed: ${_||""}`),typeof _=="string"?(l.write(`${w} Failed: ${_||""}\r
\r
`,Z.TextColors.red),e.append(`${w} Failed: ${_||""}`)):(l.write(`${w} Failed: ${_||""}\r
\r
`,Z.TextColors.red),e.append(`

Name:${_.name}
Message:${_.message}
Stack:${_.stack}
`))):(p.window.showInformationMessage(`${w} Finished ${_||""}`),l.write(`${w} Finished ${_||""}\r
\r
`))};if(await p.workspace.saveAll(),o.isBuilding)return;if(t?.selectedDevice&&v){e.appendLine("[Command]: Build Sequence In Progress - Command Dropped");return}v=!0;let b=o.selectedProject.readProjectSettings().project.language,S;switch(b){case"cpp":S=async()=>Lt();break;case"python":S=async()=>he();break;default:g(!0,`Language Not Support: ${b}`),e.appendLine(`Language Not Support: ${b}`);return}return S().then(C=>(C?.statusCode===0?g(!1):g(!0,C.details),C)).catch(C=>{v=!1,g(!0,C)}).finally(()=>{t.selectedDevice?c.buildBtn.text="$(vex-download)":c.buildBtn.text="$(vex-build)",v=!1})}async function he(){if(e.appendLine(""),e.appendLine("Python Build Btn Sequence"),c.buildBtn.text="$(loading~spin)Downloading...",!t.selectedDevice){e.appendLine("No Device connected, so python file can't be downloaded"),l.write(`No Device connected, so python file can't be downloaded\r
`);let b={command:Ce.buildCmdId,details:"No device connected",statusCode:0,json:""};return p.window.showWarningMessage("No Device connected, so python file can't be downloaded"),b}await i.Extension.Command.systemUpdatePythonVM(!1);let m=await i.Extension.Command.downloadUserProgram();return m.statusCode!==0?m:{command:Ce.buildCmdId,details:"Python Build Sequence Success",statusCode:0,json:""}}async function Lt(){e.appendLine(""),e.appendLine("CPP Build"),c.buildBtn.text="$(loading~spin)Building...";let m=p.workspace.getConfiguration().get(i.Extension.Settings.buildTypeID,p.ConfigurationTarget.Global).toString(),g;m==="Rebuild"?g=async()=>i.Extension.Command.rebuild():g=async()=>i.Extension.Command.build();let b=await g();if(b!==0||!t.selectedDevice)return{command:`${i.Extension.name}.project.${String(m).toLowerCase()}`,details:b<0?`${Ne.getErrorMessageFromCode(b)}`:`Make process closed with exit code: ${b}`,statusCode:b,json:""};c.buildBtn.text="$(loading~spin)Downloading...";let S=await i.Extension.Command.downloadUserProgram();return S.statusCode!==0?S:t.selectedDevice instanceof A?(a.refresh(t.selectedDevice),{command:Ce.buildCmdId,details:`C++ ${m} Sequence Success`,statusCode:0,json:""}):void 0}async function wo(){if(e.appendLine(""),e.appendLine("[Command]: Build Project"),!o.selectedProject){e.appendLine("[Command]: Build Project, No Valid VEX Extension Project Open"),p.window.showWarningMessage("No Valid VEX Extension Project Open");return}if(o.selectedProject.language!==i.Language.cpp){p.window.showWarningMessage("Build is only avaliable for C++ Projects");return}return o.build().then(m=>(l.write(""),m)).catch(m=>(p.window.showErrorMessage(`Build Failed - ${m}`),e.appendLine(`[Command]: Build ${m}`),m))}async function Po(){if(e.appendLine(""),e.appendLine("[Command]: Clean Project"),!o.selectedProject){e.appendLine("[Command]: Clean Project, No Valid VEX Extension Project Open"),p.window.showWarningMessage("No Valid VEX Extension Project Open");return}if(o.selectedProject.language!==i.Language.cpp){p.window.showWarningMessage("Clean is only avaliable for C++ Projects");return}return o.clean().then(m=>(p.window.showInformationMessage("Clean Project Finshed"),e.appendLine(`[Command]: Clean Project Finished: Exit Code ${m}`),m)).catch(m=>(p.window.showErrorMessage(`Clean Project Failed - ${m}`),e.appendLine(`[Command]: Clean Project Error: ${m}`),m))}async function Co(){if(e.appendLine(""),e.appendLine("[Command]: Rebuild Project"),!o.selectedProject){e.appendLine("[Command]: Rebuild Project, No Valid VEX Extension Project Open"),p.window.showWarningMessage("No Valid VEX Extension Project Open");return}if(o.selectedProject.language!==i.Language.cpp){p.window.showWarningMessage("Rebuild is only avaliable for C++ Projects");return}return o.rebuild().then(m=>(m===void 0||m!==0?(p.window.showErrorMessage(`Rebuild Failed: make process closed with exit code : ${m}`),e.appendLine(`[Command]: Rebuild Failed: make process closed with exit code : ${m}`)):e.appendLine(`[Command]: Rebuild Finished: Exit Code ${m}`),m)).catch(m=>(p.window.showErrorMessage("Error: Rebuild Project Failed"),p.window.showErrorMessage(`Rebuild Project Failed - ${m}`),e.appendLine(`[Command]: Rebuild Project ${m}`),m))}async function _o(){e.appendLine("[Command]: New Project"),o.newProject().then(m=>{m?e.appendLine(`[Command]:${m}`):e.appendLine("[Command]: New Project Finished")}).catch(m=>{l.write(`${m}\r
`,Z.TextColors.red),e.appendLine(`[Command]: New Project ${m}\r
`)})}async function Uo(){e.appendLine("Import Project"),o.importProject().then(m=>{e.appendLine(`Import Project Finshed: ${m}`)}).catch(m=>{e.appendLine(`[Command]: Import Project Failed: ${m}\r
`),p.window.showErrorMessage(`Import Project Failed: ${m.message}`)})}async function yo(){if(!o.selectedProject){p.window.showErrorMessage("No Project Found");return}e.appendLine("[Command]: Show Project Settings UI "),o.showSettingsUI().then(()=>{e.appendLine("[Command]: Show Project Settings UI Finished "),c.selectProjectBtn.text=o.selectedProject.name}).catch(m=>{e.appendLine(`[Command]: Show Project Settings Error: ${m}\r
`),p.window.showErrorMessage(`Project Settings Invalid:${m.message}`),ze.Reset()})}async function Do(){let m;et.type()==="Windows_NT"?m=p.Uri.joinPath(p.Uri.file(process.env.USERPROFILE),"Documents"):et.type()==="Darwin"?m=p.Uri.joinPath(p.Uri.file(process.env.HOME),"Documents"):et.type()==="Linux"&&(m=p.Uri.joinPath(p.Uri.file(process.env.HOME),"Documents"));let b={defaultUri:o.selectedProject?o.selectedProject.projectUri:m,filters:{png:["png"]}};p.window.showSaveDialog(b).then(S=>{t.selectedDevice instanceof A&&S!==void 0&&t.selectedDevice.screenGrab(S).then(C=>{T(C),C.statusCode===0&&p.commands.executeCommand("vscode.open",S)}).catch(C=>{let _=JSON.parse(C.message);T(_)})})}async function So(){if(t.selectedDevice.platform!=="V5"){p.window.showWarningMessage("Battery Medic is only avaliable to VEX V5 Devices");return}t.selectedDevice instanceof A&&t.selectedDevice.batteryMedic().then(m=>{T(m)}).catch(m=>{})}async function xt(){if(!(t.selectedDevice instanceof A))return;let m=await t.selectedDevice.systemInfo();if(T(m,!1),m.statusCode!==-7&&a.refresh(t.selectedDevice),m.statusCode===h.ExitCode.vexSucess&&!c?.deviceListBtn?.text.includes(t.selectedDevice.robotName)){let g="";t.selectedDevice.device==="Brain"?g=t.selectedDevice.robotName?`( ${t.selectedDevice.robotName} )`:`( ${t.selectedDevice.robotName} )`:t.selectedDevice.device==="Controller"&&(g=t.selectedDevice.robotName?`( ${t.selectedDevice.robotName} )`:""),c.deviceListBtn.text=`$(vex-${t.selectedDevice.platform}-${t.selectedDevice.device})  ${g}`}}async function Io(){let g={placeHolder:"Type brain name here . . .",validateInput:F=>F.length>8?"Name To Long":/[ `!@#$%^&*()+\=\[\]{};':"\\|,.<>\/?~]/.test(F)?"Special Charaters not allowed":null,title:"Set Brain Name"};if(!(t.selectedDevice instanceof A))return;let S=await(async()=>p.window.showInputBox(g))();if(!S)throw new Error("No Brain Name Entered");let C=await t.selectedDevice.setRobotName(S);T(C),C=await t.selectedDevice.systemInfo();let _=JSON.parse(C.json),w;_.iq2&&t.selectedDevice.platform==="IQ2"&&(w=_.iq2),_.exp&&t.selectedDevice.platform==="EXP"&&(w=_.exp),_.v5&&t.selectedDevice.platform==="V5"&&(w=_.v5),c.deviceListBtn.text=`$(vex-${t.selectedDevice.platform}-${t.selectedDevice.device})  ${t.selectedDevice.robotName}`,T(C),a.refresh(t.selectedDevice)}async function Eo(){let g={placeHolder:"Type team number here . . .",validateInput:_=>_.length>8?"Team Number To Long":/[ `!@#$%^&*()+\=\[\]{};':"\\|,.<>\/?~]/.test(_)?"Special Charaters not allowed":null,title:"Set Team Number"};if(!(t.selectedDevice instanceof A))return;let S=await(async()=>p.window.showInputBox(g))();if(!S)throw new Error("No Team Number Entered");let C=await t.selectedDevice.setTeamName(S);T(C),C=await t.selectedDevice.systemInfo(),T(C),a.refresh(t.selectedDevice)}async function jo(){let m=p.Uri.joinPath(f.globalStorageUri,"vexos"),g=p.Uri.joinPath(m,i.Platform.EXP),b=p.Uri.joinPath(m,i.Platform.IQ2),S=p.Uri.joinPath(m,i.Platform.V5),C=JSON.parse((await i.Extension.ResourceManager.getVEXosVersions(i.Platform.EXP,m)).json),_=JSON.parse((await i.Extension.ResourceManager.getVEXosVersions(i.Platform.IQ2,m)).json),w=JSON.parse((await i.Extension.ResourceManager.getVEXosVersions(i.Platform.V5,m)).json);e.appendLine(`V5:  ${JSON.stringify(w)}`),e.appendLine(`IQ2: ${JSON.stringify(_)}`),e.appendLine(`EXP: ${JSON.stringify(C)}`),C.online.latest>C.local.latest||!C.local.catalog.length?i.Extension.ResourceManager.downloadLatestVEXos(i.Platform.EXP,g):e.appendLine("EXP: Latest vexos file available locally"),_.online.latest>_.local.latest||!_.local.catalog.length?i.Extension.ResourceManager.downloadLatestVEXos(i.Platform.IQ2,b):e.appendLine("IQ2: Latest vexos file available locally"),w.online.latest>w.local.latest||!w.local.catalog.length?i.Extension.ResourceManager.downloadLatestVEXos(i.Platform.V5,S):e.appendLine("V5: Latest vexos file available locally")}let jt=!1;async function Bt(){if(!(t.selectedDevice instanceof Je||t.selectedDevice instanceof qe||t.selectedDevice instanceof Ke))return;if(!t.selectedDevice){p.window.showWarningMessage("No Device Connected");return}if(t.selectedDevice.device!==i.Device.Brain){p.window.showWarningMessage(`System update not allowed for ${t.selectedDevice.platform} ${t.selectedDevice.device}`);return}jt=!0,p.commands.executeCommand("setContext",`${i.Extension.name}.vexosBrainUpdateInProgress`,!0),(async()=>{if(!(t.selectedDevice instanceof Je||t.selectedDevice instanceof qe||t.selectedDevice instanceof Ke))return;let g=t.selectedDevice.platform,b=p.Uri.joinPath(f.globalStorageUri,"vexos"),S=(await i.Extension.ResourceManager.getVEXosVersions(g,b)).json,C=JSON.parse(S),_=p.Uri.joinPath(b,g,C.local.latest+".vexos");C.local.catalog.includes(C.online.latest)||(await i.Extension.ResourceManager.downloadLatestVEXos(g,p.Uri.joinPath(b,g)),S=(await i.Extension.ResourceManager.getVEXosVersions(g,b)).json,C=JSON.parse(S),_=p.Uri.joinPath(b,g,C.local.latest+".vexos"));let w=await t.selectedDevice.systemUpdate(_,!0);return w.statusCode===h.ExitCode.vexSucess&&t.selectedDevice&&(t.selectedDevice.needsVexosUpdate=!1),T(w),xt(),w})().then(g=>(jt=!1,p.commands.executeCommand("setContext",`${i.Extension.name}.vexosBrainUpdateInProgress`,!1),nt=!1,g)).catch(g=>{throw jt=!1,nt=!1,p.commands.executeCommand("setContext",`${i.Extension.name}.vexosBrainUpdateInProgress`,!1),new Error(g.message)})}let nt=!1;async function no(m,g){if(nt){p.window.showWarningMessage("Controller Update In Progress");return}if(!t.selectedDevice){p.window.showWarningMessage("No Device Connected");return}if(t.selectedDevice.platform!==i.Platform.EXP&&t.selectedDevice.platform!==i.Platform.IQ2||t.selectedDevice.device!==i.Device.Controller){p.window.showWarningMessage(`Controller updates not allowed for: ${t.selectedDevice.platform} ${t.selectedDevice.device}`);return}return nt=!0,p.commands.executeCommand("setContext",`${i.Extension.name}.vexosControllerUpdateInProgress`,!0),(async()=>{if(!(t.selectedDevice instanceof Ve||t.selectedDevice instanceof Be))return;let S={command:"",details:"",json:"",statusCode:0};if(t.selectedDevice.needsRadioUpdate||t.selectedDevice.needsUsbUpdate){let C=t.selectedDevice.platform,_=p.Uri.joinPath(f.globalStorageUri,"vexos"),w=(await i.Extension.ResourceManager.getVEXosVersions(C,_)).json,F=JSON.parse(w),N=p.Uri.joinPath(_,C,F.local.latest+".vexos");F.local.catalog.includes(F.online.latest)||(await i.Extension.ResourceManager.downloadLatestVEXos(C,p.Uri.joinPath(_,C)),w=(await i.Extension.ResourceManager.getVEXosVersions(C,_)).json,F=JSON.parse(w),N=p.Uri.joinPath(_,C,F.local.latest+".vexos")),t.selectedDevice.needsRadioUpdate&&t.selectedDevice.needsUsbUpdate?(S=await t.selectedDevice.controllerUpdate(N),T(S,!1)):t.selectedDevice.needsRadioUpdate?(S=await t.selectedDevice.controllerRadioUpdate(N),xt(),T(S,!1)):t.selectedDevice.needsUsbUpdate&&(S=await t.selectedDevice.controllerUsbUpdate(N),T(S,!1)),S.statusCode===h.ExitCode.vexSucess?(t?.selectedDevice&&(t.selectedDevice.needsRadioUpdate=!1),p.window.showInformationMessage(`${C} Controller Update: Success`)):p.window.showErrorMessage(`${C} Controller Update: Failed`)}else p.window.showInformationMessage(`No update needed, ${t.selectedDevice.platform} ${t.selectedDevice.device} up to date!`);return S})().then(S=>(p.commands.executeCommand("setContext",`${i.Extension.name}.vexosControllerUpdateInProgress`,!1),nt=!1,S)).catch(S=>{throw nt=!1,p.commands.executeCommand("setContext",`${i.Extension.name}.vexosControllerUpdateInProgress`,!1),new Error(S.message)})}async function gs(){if(!(t.selectedDevice instanceof Ve))return;let m=t.selectedDevice.platform,g=p.Uri.joinPath(f.globalStorageUri,"vexos"),b=(await i.Extension.ResourceManager.getVEXosVersions(m,g)).json,S=JSON.parse(b),C=p.Uri.joinPath(g,m,S.local.latest+".vexos");S.local.catalog.includes(S.online.latest)||(await i.Extension.ResourceManager.downloadLatestVEXos(m,p.Uri.joinPath(g,m)),b=(await i.Extension.ResourceManager.getVEXosVersions(m,g)).json,S=JSON.parse(b),C=p.Uri.joinPath(g,m,S.local.latest+".vexos"));let _=await t.selectedDevice.controllerUsbUpdate(C);return _.statusCode===h.ExitCode.vexSucess&&t.selectedDevice&&(t.selectedDevice.needsVexosUpdate=!1),T(_),xt(),_}async function vs(){if(!(t.selectedDevice instanceof Ve))return;let m=t.selectedDevice.platform,g=p.Uri.joinPath(f.globalStorageUri,"vexos"),b=(await i.Extension.ResourceManager.getVEXosVersions(m,g)).json,S=JSON.parse(b),C=p.Uri.joinPath(g,m,S.local.latest+".vexos");S.local.catalog.includes(S.online.latest)||(await i.Extension.ResourceManager.downloadLatestVEXos(m,p.Uri.joinPath(g,m)),b=(await i.Extension.ResourceManager.getVEXosVersions(m,g)).json,S=JSON.parse(b),C=p.Uri.joinPath(g,m,S.local.latest+".vexos"));let _=await t.selectedDevice.controllerRadioUpdate(C);return _.statusCode===h.ExitCode.vexSucess&&t.selectedDevice&&(t.selectedDevice.needsVexosUpdate=!1),T(_),xt(),_}async function Vo(m){o.selectedProject||p.window.showErrorMessage("No Valid VEX Extension Project Open");let g=p.window.activeTextEditor;if(!g)return;let b=g.selection.start,S=new p.Range(g.selection.start,g.selection.end);if(g.document.lineAt(g.selection.active.line).text,!o.selectedProject)return;let C=o.selectedProject.readProjectSettings(),_=n.getActiveList(C.project.platform,C.project.language),w=g.document.lineAt(g.selection.active.line).text,F=g.document.getText(S),N=new RegExp(`(?<=\\s*)(${F}\\.\\w*\\.\\w*)`),Q=new RegExp(`(?<=\\s*)(\\w*\\.${F}\\.\\w*)`),K=new RegExp(`(?<=\\s*)(\\w*\\.\\w*\\.${F})`),ke="";N.test(w)?ke=N.exec(w)[0].split(".").join("_"):Q.test(w)?ke=Q.exec(w)[0].split(".").join("_"):K.test(w)?ke=K.exec(w)[0].split(".").join("_"):ke.includes(".")?ke=F.split(".").join("_"):ke=F;let Re=_.filter(fe=>fe.name.includes(ke.toLowerCase()));if(Re.length===0){await ro(m);return}else if(Re.length===1)n.Show(Re[0].mdUri);else{let fe=[];Re.forEach(at=>{if(at.name.includes("_")){let tt=at.name.split("_"),Tt=tt.shift(),co=tt.join("_");fe.push(`${Tt}: ${co}`)}else fe.push(`${at.name}`)});let rt=await p.window.showQuickPick(fe,{canPickMany:!1,title:"VEX Command Help",placeHolder:"Select Command"});if(!rt)return;if(rt.includes(":")){let at=rt.replace(": ","_"),tt=_.filter(Tt=>Tt.name===at)[0];n.Show(tt.mdUri)}else{let at=_.filter(tt=>tt.name===rt)[0];n.Show(at.mdUri)}}}async function ro(m){let g=p.window.activeTextEditor;if(!o.selectedProject)return;let b=o.selectedProject.readProjectSettings(),S=n.getActiveList(b.project.platform,b.project.language),C=[];S.forEach(w=>{if(w.name.includes("_")){let F=w.name.split("_"),N=F.shift(),Q=F.join("_");C.push(`${N}: ${Q}`)}else C.push(`${w.name}`)});let _=await p.window.showQuickPick(C,{canPickMany:!1,title:"Vex Command Help",placeHolder:"Select Command"});if(!!_)if(_.includes(":")){let w=_.replace(": ","_"),F=S.filter(N=>N.name===w)[0];n.Show(F.mdUri)}else{let w=S.filter(F=>F.name===_)[0];n.Show(w.mdUri)}}async function To(m){if(!t.selectedDevice){p.window.showWarningMessage("No Device Connected");return}if(!(t.selectedDevice instanceof A))return;if(t.selectedDevice instanceof Xe&&T(await t.selectedDevice.systemInfo()),!o.selectedProject){T(await t.selectedDevice.downloadPythonVM(),!0);return}a.refresh(t.selectedDevice);let g=JSON.parse(t.selectedDevice.json),b=o.selectedProject.readProjectSettings(),S=g.v5?g.v5:g.iq2||g.iq2?g.iq2:g.exp,C=p.Uri.file(p.workspace.getConfiguration().get(i.Extension.Settings.sdkPythonHomeID,p.ConfigurationTarget.Global).toString());if(b.project.platform===t.selectedDevice.platform&&t.selectedDevice.bootMode===x.BootMode.app&&b.project.language===i.Language.python&&S?.brain){let _=p.Uri.joinPath(C,b.project.platform,b.project.sdkVersion,`vex${b.project.platform.toLowerCase()}`,"vm","python_vm.bin"),w=b.project.sdkVersion,F=`${b.project.platform.toUpperCase()}_${i.Utils.vexos.toVersion(S.vms?.items[0]?.version).split(".").join("_")}`,N=`${b.project.platform.toUpperCase()}_${i.Utils.vexos.toVersion(g.files.python_vm.version).split(".").join("_")}`;if(!S?.vms.count)T(await t.selectedDevice.downloadPythonVM(_));else if(w>F)T(await t.selectedDevice.downloadPythonVM(_));else if(N>F)T(await t.selectedDevice.downloadPythonVM());else if(m&&_)T(await t.selectedDevice.downloadPythonVM(_));else if(m)T(await t.selectedDevice.downloadPythonVM());else return}else m===void 0&&T(await t.selectedDevice.downloadPythonVM(),!0)}async function No(){if(o.selectedProject){let m="",g=o.selectedProject.readProjectSettings(),b=o.getSDKHomeUriFromLanguage(g.project.language);b?i.Extension.ResourceManager.downloadSDK(g.project.platform,g.project.language,g.project.sdkVersion,b):p.window.showErrorMessage(`${g.project.language} Language not valid`)}else p.window.showWarningMessage("Valid Project must be opened to download SDK")}async function $o(m){i.Extension.ResourceManager.downloadToolchain()}async function ko(){l?.clear(),Z.Log.clearTempLog()}async function Ro(){d?.clear()}async function Mo(){l&&l.terminal.dispose(),d&&d.terminal.dispose(),l=new Z.Log,d=new Z.Interactive(l.terminal),l.terminal.show()}async function Vt(){if(t.selectedDevice instanceof lt||t.selectedDevice instanceof ct){p.window.showInformationMessage("");let m=await t.selectedDevice.recover();T(m),m.statusCode===h.ExitCode.vexSucess&&p.window.showInformationMessage(`${t.selectedDevice.platform} ${t.selectedDevice.device} DFU Recover Success`)}if(t.selectedDevice instanceof pt||t.selectedDevice instanceof dt){let m=p.Uri.joinPath(f.globalStorageUri,"vexos"),g=(await i.Extension.ResourceManager.getVEXosVersions(t.selectedDevice.platform,m)).json,b=JSON.parse(g),S=p.Uri.joinPath(m,t.selectedDevice.platform,b.local.latest+".vexos");!b.local.catalog.includes(b.online.latest)&&b.latest!==""&&(await i.Extension.ResourceManager.downloadLatestVEXos(t.selectedDevice.platform,p.Uri.joinPath(m,t.selectedDevice.platform)),g=(await i.Extension.ResourceManager.getVEXosVersions(t.selectedDevice.platform,m)).json,b=JSON.parse(g),S=p.Uri.joinPath(m,t.selectedDevice.platform,b.local.latest+".vexos")),p.commands.executeCommand("setContext",`${i.Extension.name}.vexosControllerUpdateInProgress`,!0);let C=await t.selectedDevice.controllerUsbUpdate(S),_=3e3,w=0,F=100,N=t.selectedDevice;for(;w<_&&(await i.Utils.asyncSleep(F),w+=F,!(!t.selectedDevice||t?.selectedDevice?.bootMode!==x.BootMode.dfu)););if(C.statusCode===h.ExitCode.vexSucess&&t?.selectedDevice?.bootMode!==x.BootMode.dfu)T(C),p.window.showInformationMessage(`${N.platform} ${N.device} DFU Recover Success`);else{p.window.showErrorMessage(`${N.platform} ${N.device} DFU Recover Failed`);let Q=await G(!1)}p.commands.executeCommand("setContext",`${i.Extension.name}.vexosControllerUpdateInProgress`,!1)}}async function G(m=!0){let g={command:i.Extension.Command.installDrivers,details:"Driver Install Only Avaliable on Windows",json:"",statusCode:0};if(et.type()!=="Windows_NT")return g.details="Driver Install Only Avaliable on Windows",g.statusCode=-1,m&&T(g),g;let b=m?"Install":await p.window.showWarningMessage("VEX drivers may be missing, would you like to install VEX drivers?","Install","Ignore");if(b==="Install"){if(!s.exist){let C=await s.download();if(C.statusCode!==200)return T(C),C}let S=await s.run();g.statusCode=S.exitCode,S.exitCode===0?g.details="Drivers Installed":g.details=`Drivers Not Installed - ${S.stderr}`}else g.statusCode=0,g.details="Driver Install Ignored";return T(g),g}async function ao(){if(!i.Extension.Context.isDebugEnabled||!(t.selectedDevice instanceof Ve||t.selectedDevice instanceof Be))return;if(!t.selectedDevice){p.window.showWarningMessage("No Device Connected");return}let m=p.Uri.file(et.homedir()),g={title:"Update Controller Radio",defaultUri:m,canSelectFolders:!1,canSelectFiles:!0,canSelectMany:!1,filters:{vexos:["vexos"]}},b=await p.window.showOpenDialog(g);!b||(T(await t.selectedDevice.controllerRadioUpdate(b[0])),t.checkControllerVEXOS(t.selectedDevice))}async function hs(){if(!i.Extension.Context.isDebugEnabled||!(t.selectedDevice instanceof Ve||t.selectedDevice instanceof Be))return;if(!t.selectedDevice){p.window.showWarningMessage("No Device Connected");return}let m=p.Uri.file(et.homedir()),g={title:"Update Controller Radio",defaultUri:m,canSelectFolders:!1,canSelectFiles:!0,canSelectMany:!1,filters:{vexos:["vexos"]}},b=await p.window.showOpenDialog(g);!b||(T(await t.selectedDevice.controllerUsbUpdate(b[0])),t.checkControllerVEXOS(t.selectedDevice))}async function fs(){if(!i.Extension.Context.isDebugEnabled||!(t.selectedDevice instanceof Ve||t.selectedDevice instanceof Be))return;if(!t.selectedDevice){p.window.showWarningMessage("No Device Connected");return}let m=p.Uri.file(et.homedir()),g={title:"Update Controller Radio",defaultUri:m,canSelectFolders:!1,canSelectFiles:!0,canSelectMany:!1,filters:{vexos:["vexos"]}},b=await p.window.showOpenDialog(g);if(!b){p.window.showWarningMessage("No VEXOS File Selected");return}T(await t.selectedDevice.controllerUpdate(b[0]),!0),t.checkControllerVEXOS(t.selectedDevice)}async function xs(){if(!i.Extension.Context.isDebugEnabled||!(t.selectedDevice instanceof Je||t.selectedDevice instanceof qe))return;if(!t.selectedDevice){p.window.showWarningMessage("No Device Connected");return}let m=p.Uri.file(et.homedir()),g={title:"Update Controller Radio",defaultUri:m,canSelectFolders:!1,canSelectFiles:!0,canSelectMany:!1,filters:{vexos:["vexos"]}},b=await p.window.showOpenDialog(g);if(!b){p.window.showWarningMessage("No VEXOS File Selected");return}T(await t.selectedDevice.systemUpdate(b[0]),!0),t.checkSystemVEXOS(t.selectedDevice)}async function Ot(){let m={command:i.Extension.Command.downloadID,details:"",statusCode:-1,json:""};if(t.selectedDevice.bootMode!==x.BootMode.app){m.details=`${t.selectedDevice.platform} ${t.selectedDevice.device} in Bootloader (${t.selectedDevice.bootMode})`,e.appendLine(`[Command]: Download User Program, VEX ${t.selectedDevice.device}  in Bootloader (${t.selectedDevice.bootMode})`);let g="",b="";return t.selectedDevice.device===i.Device.Brain?(g=`${t.selectedDevice.platform} ${t.selectedDevice.device} ${t.selectedDevice.bootMode} Detected.  Would you like to update?`,b="Update"):(g=`${t.selectedDevice.platform} ${t.selectedDevice.device} (DFU) Detected.  Would you like to recover?`,b="Recover"),p.window.showInformationMessage(g,b).then(S=>{S==="Recover"?Vt():S==="Update"&&Bt()}),m}return m.statusCode=0,m}})(Mt||(Mt={}));require("module-alias/register");function ei(f){let e=new Te(f,"VEX","vex.main.debuglog");e.appendLine(`VEX Extension Version: ${i.Extension.version()}`),eo.setup(f),Mt.setup(f,e).catch(t=>{us.window.showErrorMessage(`Fatal Error: ${t.message}`),e.appendLine(`VEX Extension Fatal Error: 
Name	:${t.name}
Message:	${t.message}
Stack:	${t?.stack}`)})}async function ti(){await Mt.shutDown()}0&&(module.exports={activate,deactivate});
//# sourceMappingURL=extension.js.map
